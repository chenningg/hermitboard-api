// Code generated by "enumer -type=AuthType -json -text -sql"; DO NOT EDIT.

package auth

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _AuthTypeName = "LocalFirebase"

var _AuthTypeIndex = [...]uint8{0, 5, 13}

const _AuthTypeLowerName = "localfirebase"

func (i AuthType) String() string {
	i -= 1
	if i < 0 || i >= AuthType(len(_AuthTypeIndex)-1) {
		return fmt.Sprintf("AuthType(%d)", i+1)
	}
	return _AuthTypeName[_AuthTypeIndex[i]:_AuthTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AuthTypeNoOp() {
	var x [1]struct{}
	_ = x[Local-(1)]
	_ = x[Firebase-(2)]
}

var _AuthTypeValues = []AuthType{Local, Firebase}

var _AuthTypeNameToValueMap = map[string]AuthType{
	_AuthTypeName[0:5]:       Local,
	_AuthTypeLowerName[0:5]:  Local,
	_AuthTypeName[5:13]:      Firebase,
	_AuthTypeLowerName[5:13]: Firebase,
}

var _AuthTypeNames = []string{
	_AuthTypeName[0:5],
	_AuthTypeName[5:13],
}

// AuthTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AuthTypeString(s string) (AuthType, error) {
	if val, ok := _AuthTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AuthTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AuthType values", s)
}

// AuthTypeValues returns all values of the enum
func AuthTypeValues() []AuthType {
	return _AuthTypeValues
}

// AuthTypeStrings returns a slice of all String values of the enum
func AuthTypeStrings() []string {
	strs := make([]string, len(_AuthTypeNames))
	copy(strs, _AuthTypeNames)
	return strs
}

// IsAAuthType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AuthType) IsAAuthType() bool {
	for _, v := range _AuthTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for AuthType
func (i AuthType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for AuthType
func (i *AuthType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("AuthType should be a string, got %s", data)
	}

	var err error
	*i, err = AuthTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for AuthType
func (i AuthType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for AuthType
func (i *AuthType) UnmarshalText(text []byte) error {
	var err error
	*i, err = AuthTypeString(string(text))
	return err
}

func (i AuthType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *AuthType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of AuthType: %[1]T(%[1]v)", value)
	}

	val, err := AuthTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
