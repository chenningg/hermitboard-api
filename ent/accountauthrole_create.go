// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chenningg/hermitboard-api/ent/account"
	"github.com/chenningg/hermitboard-api/ent/accountauthrole"
	"github.com/chenningg/hermitboard-api/ent/authrole"
	"github.com/chenningg/hermitboard-api/ent/schema/pulid"
)

// AccountAuthRoleCreate is the builder for creating a AccountAuthRole entity.
type AccountAuthRoleCreate struct {
	config
	mutation *AccountAuthRoleMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (aarc *AccountAuthRoleCreate) SetCreatedAt(t time.Time) *AccountAuthRoleCreate {
	aarc.mutation.SetCreatedAt(t)
	return aarc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aarc *AccountAuthRoleCreate) SetNillableCreatedAt(t *time.Time) *AccountAuthRoleCreate {
	if t != nil {
		aarc.SetCreatedAt(*t)
	}
	return aarc
}

// SetUpdatedAt sets the "updated_at" field.
func (aarc *AccountAuthRoleCreate) SetUpdatedAt(t time.Time) *AccountAuthRoleCreate {
	aarc.mutation.SetUpdatedAt(t)
	return aarc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (aarc *AccountAuthRoleCreate) SetNillableUpdatedAt(t *time.Time) *AccountAuthRoleCreate {
	if t != nil {
		aarc.SetUpdatedAt(*t)
	}
	return aarc
}

// SetDeletedAt sets the "deleted_at" field.
func (aarc *AccountAuthRoleCreate) SetDeletedAt(t time.Time) *AccountAuthRoleCreate {
	aarc.mutation.SetDeletedAt(t)
	return aarc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aarc *AccountAuthRoleCreate) SetNillableDeletedAt(t *time.Time) *AccountAuthRoleCreate {
	if t != nil {
		aarc.SetDeletedAt(*t)
	}
	return aarc
}

// SetAccountID sets the "account_id" field.
func (aarc *AccountAuthRoleCreate) SetAccountID(pu pulid.PULID) *AccountAuthRoleCreate {
	aarc.mutation.SetAccountID(pu)
	return aarc
}

// SetAuthRoleID sets the "auth_role_id" field.
func (aarc *AccountAuthRoleCreate) SetAuthRoleID(pu pulid.PULID) *AccountAuthRoleCreate {
	aarc.mutation.SetAuthRoleID(pu)
	return aarc
}

// SetID sets the "id" field.
func (aarc *AccountAuthRoleCreate) SetID(pu pulid.PULID) *AccountAuthRoleCreate {
	aarc.mutation.SetID(pu)
	return aarc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (aarc *AccountAuthRoleCreate) SetNillableID(pu *pulid.PULID) *AccountAuthRoleCreate {
	if pu != nil {
		aarc.SetID(*pu)
	}
	return aarc
}

// SetAccount sets the "account" edge to the Account entity.
func (aarc *AccountAuthRoleCreate) SetAccount(a *Account) *AccountAuthRoleCreate {
	return aarc.SetAccountID(a.ID)
}

// SetAuthRole sets the "auth_role" edge to the AuthRole entity.
func (aarc *AccountAuthRoleCreate) SetAuthRole(a *AuthRole) *AccountAuthRoleCreate {
	return aarc.SetAuthRoleID(a.ID)
}

// Mutation returns the AccountAuthRoleMutation object of the builder.
func (aarc *AccountAuthRoleCreate) Mutation() *AccountAuthRoleMutation {
	return aarc.mutation
}

// Save creates the AccountAuthRole in the database.
func (aarc *AccountAuthRoleCreate) Save(ctx context.Context) (*AccountAuthRole, error) {
	var (
		err  error
		node *AccountAuthRole
	)
	aarc.defaults()
	if len(aarc.hooks) == 0 {
		if err = aarc.check(); err != nil {
			return nil, err
		}
		node, err = aarc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountAuthRoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aarc.check(); err != nil {
				return nil, err
			}
			aarc.mutation = mutation
			if node, err = aarc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(aarc.hooks) - 1; i >= 0; i-- {
			if aarc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aarc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, aarc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AccountAuthRole)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AccountAuthRoleMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (aarc *AccountAuthRoleCreate) SaveX(ctx context.Context) *AccountAuthRole {
	v, err := aarc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aarc *AccountAuthRoleCreate) Exec(ctx context.Context) error {
	_, err := aarc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aarc *AccountAuthRoleCreate) ExecX(ctx context.Context) {
	if err := aarc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aarc *AccountAuthRoleCreate) defaults() {
	if _, ok := aarc.mutation.CreatedAt(); !ok {
		v := accountauthrole.DefaultCreatedAt()
		aarc.mutation.SetCreatedAt(v)
	}
	if _, ok := aarc.mutation.UpdatedAt(); !ok {
		v := accountauthrole.DefaultUpdatedAt()
		aarc.mutation.SetUpdatedAt(v)
	}
	if _, ok := aarc.mutation.ID(); !ok {
		v := accountauthrole.DefaultID()
		aarc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aarc *AccountAuthRoleCreate) check() error {
	if _, ok := aarc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AccountAuthRole.created_at"`)}
	}
	if _, ok := aarc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AccountAuthRole.updated_at"`)}
	}
	if _, ok := aarc.mutation.AccountID(); !ok {
		return &ValidationError{Name: "account_id", err: errors.New(`ent: missing required field "AccountAuthRole.account_id"`)}
	}
	if _, ok := aarc.mutation.AuthRoleID(); !ok {
		return &ValidationError{Name: "auth_role_id", err: errors.New(`ent: missing required field "AccountAuthRole.auth_role_id"`)}
	}
	if _, ok := aarc.mutation.AccountID(); !ok {
		return &ValidationError{Name: "account", err: errors.New(`ent: missing required edge "AccountAuthRole.account"`)}
	}
	if _, ok := aarc.mutation.AuthRoleID(); !ok {
		return &ValidationError{Name: "auth_role", err: errors.New(`ent: missing required edge "AccountAuthRole.auth_role"`)}
	}
	return nil
}

func (aarc *AccountAuthRoleCreate) sqlSave(ctx context.Context) (*AccountAuthRole, error) {
	_node, _spec := aarc.createSpec()
	if err := sqlgraph.CreateNode(ctx, aarc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.PULID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (aarc *AccountAuthRoleCreate) createSpec() (*AccountAuthRole, *sqlgraph.CreateSpec) {
	var (
		_node = &AccountAuthRole{config: aarc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: accountauthrole.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: accountauthrole.FieldID,
			},
		}
	)
	if id, ok := aarc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := aarc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accountauthrole.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := aarc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accountauthrole.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := aarc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accountauthrole.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if nodes := aarc.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accountauthrole.AccountTable,
			Columns: []string{accountauthrole.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AccountID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := aarc.mutation.AuthRoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accountauthrole.AuthRoleTable,
			Columns: []string{accountauthrole.AuthRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: authrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AuthRoleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AccountAuthRoleCreateBulk is the builder for creating many AccountAuthRole entities in bulk.
type AccountAuthRoleCreateBulk struct {
	config
	builders []*AccountAuthRoleCreate
}

// Save creates the AccountAuthRole entities in the database.
func (aarcb *AccountAuthRoleCreateBulk) Save(ctx context.Context) ([]*AccountAuthRole, error) {
	specs := make([]*sqlgraph.CreateSpec, len(aarcb.builders))
	nodes := make([]*AccountAuthRole, len(aarcb.builders))
	mutators := make([]Mutator, len(aarcb.builders))
	for i := range aarcb.builders {
		func(i int, root context.Context) {
			builder := aarcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccountAuthRoleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aarcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aarcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aarcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aarcb *AccountAuthRoleCreateBulk) SaveX(ctx context.Context) []*AccountAuthRole {
	v, err := aarcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aarcb *AccountAuthRoleCreateBulk) Exec(ctx context.Context) error {
	_, err := aarcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aarcb *AccountAuthRoleCreateBulk) ExecX(ctx context.Context) {
	if err := aarcb.Exec(ctx); err != nil {
		panic(err)
	}
}
