// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chenningg/hermitboard-api/ent/account"
	"github.com/chenningg/hermitboard-api/ent/accountauthrole"
	"github.com/chenningg/hermitboard-api/ent/authrole"
	"github.com/chenningg/hermitboard-api/ent/predicate"
	"github.com/chenningg/hermitboard-api/ent/schema/pulid"
)

// AccountAuthRoleQuery is the builder for querying AccountAuthRole entities.
type AccountAuthRoleQuery struct {
	config
	limit        *int
	offset       *int
	unique       *bool
	order        []OrderFunc
	fields       []string
	predicates   []predicate.AccountAuthRole
	withAccount  *AccountQuery
	withAuthRole *AuthRoleQuery
	modifiers    []func(*sql.Selector)
	loadTotal    []func(context.Context, []*AccountAuthRole) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AccountAuthRoleQuery builder.
func (aarq *AccountAuthRoleQuery) Where(ps ...predicate.AccountAuthRole) *AccountAuthRoleQuery {
	aarq.predicates = append(aarq.predicates, ps...)
	return aarq
}

// Limit adds a limit step to the query.
func (aarq *AccountAuthRoleQuery) Limit(limit int) *AccountAuthRoleQuery {
	aarq.limit = &limit
	return aarq
}

// Offset adds an offset step to the query.
func (aarq *AccountAuthRoleQuery) Offset(offset int) *AccountAuthRoleQuery {
	aarq.offset = &offset
	return aarq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (aarq *AccountAuthRoleQuery) Unique(unique bool) *AccountAuthRoleQuery {
	aarq.unique = &unique
	return aarq
}

// Order adds an order step to the query.
func (aarq *AccountAuthRoleQuery) Order(o ...OrderFunc) *AccountAuthRoleQuery {
	aarq.order = append(aarq.order, o...)
	return aarq
}

// QueryAccount chains the current query on the "account" edge.
func (aarq *AccountAuthRoleQuery) QueryAccount() *AccountQuery {
	query := &AccountQuery{config: aarq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aarq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aarq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(accountauthrole.Table, accountauthrole.FieldID, selector),
			sqlgraph.To(account.Table, account.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, accountauthrole.AccountTable, accountauthrole.AccountColumn),
		)
		fromU = sqlgraph.SetNeighbors(aarq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAuthRole chains the current query on the "auth_role" edge.
func (aarq *AccountAuthRoleQuery) QueryAuthRole() *AuthRoleQuery {
	query := &AuthRoleQuery{config: aarq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aarq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aarq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(accountauthrole.Table, accountauthrole.FieldID, selector),
			sqlgraph.To(authrole.Table, authrole.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, accountauthrole.AuthRoleTable, accountauthrole.AuthRoleColumn),
		)
		fromU = sqlgraph.SetNeighbors(aarq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AccountAuthRole entity from the query.
// Returns a *NotFoundError when no AccountAuthRole was found.
func (aarq *AccountAuthRoleQuery) First(ctx context.Context) (*AccountAuthRole, error) {
	nodes, err := aarq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{accountauthrole.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (aarq *AccountAuthRoleQuery) FirstX(ctx context.Context) *AccountAuthRole {
	node, err := aarq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AccountAuthRole ID from the query.
// Returns a *NotFoundError when no AccountAuthRole ID was found.
func (aarq *AccountAuthRoleQuery) FirstID(ctx context.Context) (id pulid.PULID, err error) {
	var ids []pulid.PULID
	if ids, err = aarq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{accountauthrole.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (aarq *AccountAuthRoleQuery) FirstIDX(ctx context.Context) pulid.PULID {
	id, err := aarq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AccountAuthRole entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AccountAuthRole entity is found.
// Returns a *NotFoundError when no AccountAuthRole entities are found.
func (aarq *AccountAuthRoleQuery) Only(ctx context.Context) (*AccountAuthRole, error) {
	nodes, err := aarq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{accountauthrole.Label}
	default:
		return nil, &NotSingularError{accountauthrole.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (aarq *AccountAuthRoleQuery) OnlyX(ctx context.Context) *AccountAuthRole {
	node, err := aarq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AccountAuthRole ID in the query.
// Returns a *NotSingularError when more than one AccountAuthRole ID is found.
// Returns a *NotFoundError when no entities are found.
func (aarq *AccountAuthRoleQuery) OnlyID(ctx context.Context) (id pulid.PULID, err error) {
	var ids []pulid.PULID
	if ids, err = aarq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{accountauthrole.Label}
	default:
		err = &NotSingularError{accountauthrole.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (aarq *AccountAuthRoleQuery) OnlyIDX(ctx context.Context) pulid.PULID {
	id, err := aarq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AccountAuthRoles.
func (aarq *AccountAuthRoleQuery) All(ctx context.Context) ([]*AccountAuthRole, error) {
	if err := aarq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return aarq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (aarq *AccountAuthRoleQuery) AllX(ctx context.Context) []*AccountAuthRole {
	nodes, err := aarq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AccountAuthRole IDs.
func (aarq *AccountAuthRoleQuery) IDs(ctx context.Context) ([]pulid.PULID, error) {
	var ids []pulid.PULID
	if err := aarq.Select(accountauthrole.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (aarq *AccountAuthRoleQuery) IDsX(ctx context.Context) []pulid.PULID {
	ids, err := aarq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (aarq *AccountAuthRoleQuery) Count(ctx context.Context) (int, error) {
	if err := aarq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return aarq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (aarq *AccountAuthRoleQuery) CountX(ctx context.Context) int {
	count, err := aarq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (aarq *AccountAuthRoleQuery) Exist(ctx context.Context) (bool, error) {
	if err := aarq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return aarq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (aarq *AccountAuthRoleQuery) ExistX(ctx context.Context) bool {
	exist, err := aarq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AccountAuthRoleQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (aarq *AccountAuthRoleQuery) Clone() *AccountAuthRoleQuery {
	if aarq == nil {
		return nil
	}
	return &AccountAuthRoleQuery{
		config:       aarq.config,
		limit:        aarq.limit,
		offset:       aarq.offset,
		order:        append([]OrderFunc{}, aarq.order...),
		predicates:   append([]predicate.AccountAuthRole{}, aarq.predicates...),
		withAccount:  aarq.withAccount.Clone(),
		withAuthRole: aarq.withAuthRole.Clone(),
		// clone intermediate query.
		sql:    aarq.sql.Clone(),
		path:   aarq.path,
		unique: aarq.unique,
	}
}

// WithAccount tells the query-builder to eager-load the nodes that are connected to
// the "account" edge. The optional arguments are used to configure the query builder of the edge.
func (aarq *AccountAuthRoleQuery) WithAccount(opts ...func(*AccountQuery)) *AccountAuthRoleQuery {
	query := &AccountQuery{config: aarq.config}
	for _, opt := range opts {
		opt(query)
	}
	aarq.withAccount = query
	return aarq
}

// WithAuthRole tells the query-builder to eager-load the nodes that are connected to
// the "auth_role" edge. The optional arguments are used to configure the query builder of the edge.
func (aarq *AccountAuthRoleQuery) WithAuthRole(opts ...func(*AuthRoleQuery)) *AccountAuthRoleQuery {
	query := &AuthRoleQuery{config: aarq.config}
	for _, opt := range opts {
		opt(query)
	}
	aarq.withAuthRole = query
	return aarq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AccountAuthRole.Query().
//		GroupBy(accountauthrole.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (aarq *AccountAuthRoleQuery) GroupBy(field string, fields ...string) *AccountAuthRoleGroupBy {
	grbuild := &AccountAuthRoleGroupBy{config: aarq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := aarq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return aarq.sqlQuery(ctx), nil
	}
	grbuild.label = accountauthrole.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.AccountAuthRole.Query().
//		Select(accountauthrole.FieldCreatedAt).
//		Scan(ctx, &v)
func (aarq *AccountAuthRoleQuery) Select(fields ...string) *AccountAuthRoleSelect {
	aarq.fields = append(aarq.fields, fields...)
	selbuild := &AccountAuthRoleSelect{AccountAuthRoleQuery: aarq}
	selbuild.label = accountauthrole.Label
	selbuild.flds, selbuild.scan = &aarq.fields, selbuild.Scan
	return selbuild
}

func (aarq *AccountAuthRoleQuery) prepareQuery(ctx context.Context) error {
	for _, f := range aarq.fields {
		if !accountauthrole.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if aarq.path != nil {
		prev, err := aarq.path(ctx)
		if err != nil {
			return err
		}
		aarq.sql = prev
	}
	return nil
}

func (aarq *AccountAuthRoleQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*AccountAuthRole, error) {
	var (
		nodes       = []*AccountAuthRole{}
		_spec       = aarq.querySpec()
		loadedTypes = [2]bool{
			aarq.withAccount != nil,
			aarq.withAuthRole != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*AccountAuthRole).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &AccountAuthRole{config: aarq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(aarq.modifiers) > 0 {
		_spec.Modifiers = aarq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, aarq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := aarq.withAccount; query != nil {
		if err := aarq.loadAccount(ctx, query, nodes, nil,
			func(n *AccountAuthRole, e *Account) { n.Edges.Account = e }); err != nil {
			return nil, err
		}
	}
	if query := aarq.withAuthRole; query != nil {
		if err := aarq.loadAuthRole(ctx, query, nodes, nil,
			func(n *AccountAuthRole, e *AuthRole) { n.Edges.AuthRole = e }); err != nil {
			return nil, err
		}
	}
	for i := range aarq.loadTotal {
		if err := aarq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (aarq *AccountAuthRoleQuery) loadAccount(ctx context.Context, query *AccountQuery, nodes []*AccountAuthRole, init func(*AccountAuthRole), assign func(*AccountAuthRole, *Account)) error {
	ids := make([]pulid.PULID, 0, len(nodes))
	nodeids := make(map[pulid.PULID][]*AccountAuthRole)
	for i := range nodes {
		fk := nodes[i].AccountID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(account.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "account_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (aarq *AccountAuthRoleQuery) loadAuthRole(ctx context.Context, query *AuthRoleQuery, nodes []*AccountAuthRole, init func(*AccountAuthRole), assign func(*AccountAuthRole, *AuthRole)) error {
	ids := make([]pulid.PULID, 0, len(nodes))
	nodeids := make(map[pulid.PULID][]*AccountAuthRole)
	for i := range nodes {
		fk := nodes[i].AuthRoleID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(authrole.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "auth_role_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (aarq *AccountAuthRoleQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := aarq.querySpec()
	if len(aarq.modifiers) > 0 {
		_spec.Modifiers = aarq.modifiers
	}
	_spec.Node.Columns = aarq.fields
	if len(aarq.fields) > 0 {
		_spec.Unique = aarq.unique != nil && *aarq.unique
	}
	return sqlgraph.CountNodes(ctx, aarq.driver, _spec)
}

func (aarq *AccountAuthRoleQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := aarq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (aarq *AccountAuthRoleQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   accountauthrole.Table,
			Columns: accountauthrole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: accountauthrole.FieldID,
			},
		},
		From:   aarq.sql,
		Unique: true,
	}
	if unique := aarq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := aarq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accountauthrole.FieldID)
		for i := range fields {
			if fields[i] != accountauthrole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := aarq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := aarq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := aarq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := aarq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (aarq *AccountAuthRoleQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(aarq.driver.Dialect())
	t1 := builder.Table(accountauthrole.Table)
	columns := aarq.fields
	if len(columns) == 0 {
		columns = accountauthrole.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if aarq.sql != nil {
		selector = aarq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if aarq.unique != nil && *aarq.unique {
		selector.Distinct()
	}
	for _, p := range aarq.predicates {
		p(selector)
	}
	for _, p := range aarq.order {
		p(selector)
	}
	if offset := aarq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := aarq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AccountAuthRoleGroupBy is the group-by builder for AccountAuthRole entities.
type AccountAuthRoleGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (aargb *AccountAuthRoleGroupBy) Aggregate(fns ...AggregateFunc) *AccountAuthRoleGroupBy {
	aargb.fns = append(aargb.fns, fns...)
	return aargb
}

// Scan applies the group-by query and scans the result into the given value.
func (aargb *AccountAuthRoleGroupBy) Scan(ctx context.Context, v any) error {
	query, err := aargb.path(ctx)
	if err != nil {
		return err
	}
	aargb.sql = query
	return aargb.sqlScan(ctx, v)
}

func (aargb *AccountAuthRoleGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range aargb.fields {
		if !accountauthrole.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := aargb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := aargb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (aargb *AccountAuthRoleGroupBy) sqlQuery() *sql.Selector {
	selector := aargb.sql.Select()
	aggregation := make([]string, 0, len(aargb.fns))
	for _, fn := range aargb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(aargb.fields)+len(aargb.fns))
		for _, f := range aargb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(aargb.fields...)...)
}

// AccountAuthRoleSelect is the builder for selecting fields of AccountAuthRole entities.
type AccountAuthRoleSelect struct {
	*AccountAuthRoleQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (aars *AccountAuthRoleSelect) Scan(ctx context.Context, v any) error {
	if err := aars.prepareQuery(ctx); err != nil {
		return err
	}
	aars.sql = aars.AccountAuthRoleQuery.sqlQuery(ctx)
	return aars.sqlScan(ctx, v)
}

func (aars *AccountAuthRoleSelect) sqlScan(ctx context.Context, v any) error {
	rows := &sql.Rows{}
	query, args := aars.sql.Query()
	if err := aars.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
