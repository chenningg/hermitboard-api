// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chenningg/hermitboard-api/ent/account"
	"github.com/chenningg/hermitboard-api/ent/accountauthrole"
	"github.com/chenningg/hermitboard-api/ent/authrole"
	"github.com/chenningg/hermitboard-api/ent/predicate"
	"github.com/chenningg/hermitboard-api/pulid"
)

// AccountAuthRoleUpdate is the builder for updating AccountAuthRole entities.
type AccountAuthRoleUpdate struct {
	config
	hooks    []Hook
	mutation *AccountAuthRoleMutation
}

// Where appends a list predicates to the AccountAuthRoleUpdate builder.
func (aaru *AccountAuthRoleUpdate) Where(ps ...predicate.AccountAuthRole) *AccountAuthRoleUpdate {
	aaru.mutation.Where(ps...)
	return aaru
}

// SetUpdatedAt sets the "updated_at" field.
func (aaru *AccountAuthRoleUpdate) SetUpdatedAt(t time.Time) *AccountAuthRoleUpdate {
	aaru.mutation.SetUpdatedAt(t)
	return aaru
}

// SetDeletedAt sets the "deleted_at" field.
func (aaru *AccountAuthRoleUpdate) SetDeletedAt(t time.Time) *AccountAuthRoleUpdate {
	aaru.mutation.SetDeletedAt(t)
	return aaru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (aaru *AccountAuthRoleUpdate) ClearDeletedAt() *AccountAuthRoleUpdate {
	aaru.mutation.ClearDeletedAt()
	return aaru
}

// SetAccountID sets the "account_id" field.
func (aaru *AccountAuthRoleUpdate) SetAccountID(pu pulid.PULID) *AccountAuthRoleUpdate {
	aaru.mutation.SetAccountID(pu)
	return aaru
}

// SetAuthRoleID sets the "auth_role_id" field.
func (aaru *AccountAuthRoleUpdate) SetAuthRoleID(pu pulid.PULID) *AccountAuthRoleUpdate {
	aaru.mutation.SetAuthRoleID(pu)
	return aaru
}

// SetAccount sets the "account" edge to the Account entity.
func (aaru *AccountAuthRoleUpdate) SetAccount(a *Account) *AccountAuthRoleUpdate {
	return aaru.SetAccountID(a.ID)
}

// SetAuthRole sets the "auth_role" edge to the AuthRole entity.
func (aaru *AccountAuthRoleUpdate) SetAuthRole(a *AuthRole) *AccountAuthRoleUpdate {
	return aaru.SetAuthRoleID(a.ID)
}

// Mutation returns the AccountAuthRoleMutation object of the builder.
func (aaru *AccountAuthRoleUpdate) Mutation() *AccountAuthRoleMutation {
	return aaru.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (aaru *AccountAuthRoleUpdate) ClearAccount() *AccountAuthRoleUpdate {
	aaru.mutation.ClearAccount()
	return aaru
}

// ClearAuthRole clears the "auth_role" edge to the AuthRole entity.
func (aaru *AccountAuthRoleUpdate) ClearAuthRole() *AccountAuthRoleUpdate {
	aaru.mutation.ClearAuthRole()
	return aaru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aaru *AccountAuthRoleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	aaru.defaults()
	if len(aaru.hooks) == 0 {
		if err = aaru.check(); err != nil {
			return 0, err
		}
		affected, err = aaru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountAuthRoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aaru.check(); err != nil {
				return 0, err
			}
			aaru.mutation = mutation
			affected, err = aaru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aaru.hooks) - 1; i >= 0; i-- {
			if aaru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aaru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aaru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aaru *AccountAuthRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := aaru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aaru *AccountAuthRoleUpdate) Exec(ctx context.Context) error {
	_, err := aaru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aaru *AccountAuthRoleUpdate) ExecX(ctx context.Context) {
	if err := aaru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aaru *AccountAuthRoleUpdate) defaults() {
	if _, ok := aaru.mutation.UpdatedAt(); !ok {
		v := accountauthrole.UpdateDefaultUpdatedAt()
		aaru.mutation.SetUpdatedAt(v)
	}
	if _, ok := aaru.mutation.DeletedAt(); !ok && !aaru.mutation.DeletedAtCleared() {
		v := accountauthrole.UpdateDefaultDeletedAt()
		aaru.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aaru *AccountAuthRoleUpdate) check() error {
	if _, ok := aaru.mutation.AccountID(); aaru.mutation.AccountCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AccountAuthRole.account"`)
	}
	if _, ok := aaru.mutation.AuthRoleID(); aaru.mutation.AuthRoleCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AccountAuthRole.auth_role"`)
	}
	return nil
}

func (aaru *AccountAuthRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   accountauthrole.Table,
			Columns: accountauthrole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: accountauthrole.FieldID,
			},
		},
	}
	if ps := aaru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aaru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accountauthrole.FieldUpdatedAt,
		})
	}
	if value, ok := aaru.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accountauthrole.FieldDeletedAt,
		})
	}
	if aaru.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: accountauthrole.FieldDeletedAt,
		})
	}
	if aaru.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accountauthrole.AccountTable,
			Columns: []string{accountauthrole.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: account.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aaru.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accountauthrole.AccountTable,
			Columns: []string{accountauthrole.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aaru.mutation.AuthRoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accountauthrole.AuthRoleTable,
			Columns: []string{accountauthrole.AuthRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: authrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aaru.mutation.AuthRoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accountauthrole.AuthRoleTable,
			Columns: []string{accountauthrole.AuthRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: authrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aaru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountauthrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AccountAuthRoleUpdateOne is the builder for updating a single AccountAuthRole entity.
type AccountAuthRoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccountAuthRoleMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (aaruo *AccountAuthRoleUpdateOne) SetUpdatedAt(t time.Time) *AccountAuthRoleUpdateOne {
	aaruo.mutation.SetUpdatedAt(t)
	return aaruo
}

// SetDeletedAt sets the "deleted_at" field.
func (aaruo *AccountAuthRoleUpdateOne) SetDeletedAt(t time.Time) *AccountAuthRoleUpdateOne {
	aaruo.mutation.SetDeletedAt(t)
	return aaruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (aaruo *AccountAuthRoleUpdateOne) ClearDeletedAt() *AccountAuthRoleUpdateOne {
	aaruo.mutation.ClearDeletedAt()
	return aaruo
}

// SetAccountID sets the "account_id" field.
func (aaruo *AccountAuthRoleUpdateOne) SetAccountID(pu pulid.PULID) *AccountAuthRoleUpdateOne {
	aaruo.mutation.SetAccountID(pu)
	return aaruo
}

// SetAuthRoleID sets the "auth_role_id" field.
func (aaruo *AccountAuthRoleUpdateOne) SetAuthRoleID(pu pulid.PULID) *AccountAuthRoleUpdateOne {
	aaruo.mutation.SetAuthRoleID(pu)
	return aaruo
}

// SetAccount sets the "account" edge to the Account entity.
func (aaruo *AccountAuthRoleUpdateOne) SetAccount(a *Account) *AccountAuthRoleUpdateOne {
	return aaruo.SetAccountID(a.ID)
}

// SetAuthRole sets the "auth_role" edge to the AuthRole entity.
func (aaruo *AccountAuthRoleUpdateOne) SetAuthRole(a *AuthRole) *AccountAuthRoleUpdateOne {
	return aaruo.SetAuthRoleID(a.ID)
}

// Mutation returns the AccountAuthRoleMutation object of the builder.
func (aaruo *AccountAuthRoleUpdateOne) Mutation() *AccountAuthRoleMutation {
	return aaruo.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (aaruo *AccountAuthRoleUpdateOne) ClearAccount() *AccountAuthRoleUpdateOne {
	aaruo.mutation.ClearAccount()
	return aaruo
}

// ClearAuthRole clears the "auth_role" edge to the AuthRole entity.
func (aaruo *AccountAuthRoleUpdateOne) ClearAuthRole() *AccountAuthRoleUpdateOne {
	aaruo.mutation.ClearAuthRole()
	return aaruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aaruo *AccountAuthRoleUpdateOne) Select(field string, fields ...string) *AccountAuthRoleUpdateOne {
	aaruo.fields = append([]string{field}, fields...)
	return aaruo
}

// Save executes the query and returns the updated AccountAuthRole entity.
func (aaruo *AccountAuthRoleUpdateOne) Save(ctx context.Context) (*AccountAuthRole, error) {
	var (
		err  error
		node *AccountAuthRole
	)
	aaruo.defaults()
	if len(aaruo.hooks) == 0 {
		if err = aaruo.check(); err != nil {
			return nil, err
		}
		node, err = aaruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountAuthRoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aaruo.check(); err != nil {
				return nil, err
			}
			aaruo.mutation = mutation
			node, err = aaruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aaruo.hooks) - 1; i >= 0; i-- {
			if aaruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aaruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, aaruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AccountAuthRole)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AccountAuthRoleMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aaruo *AccountAuthRoleUpdateOne) SaveX(ctx context.Context) *AccountAuthRole {
	node, err := aaruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aaruo *AccountAuthRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := aaruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aaruo *AccountAuthRoleUpdateOne) ExecX(ctx context.Context) {
	if err := aaruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aaruo *AccountAuthRoleUpdateOne) defaults() {
	if _, ok := aaruo.mutation.UpdatedAt(); !ok {
		v := accountauthrole.UpdateDefaultUpdatedAt()
		aaruo.mutation.SetUpdatedAt(v)
	}
	if _, ok := aaruo.mutation.DeletedAt(); !ok && !aaruo.mutation.DeletedAtCleared() {
		v := accountauthrole.UpdateDefaultDeletedAt()
		aaruo.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aaruo *AccountAuthRoleUpdateOne) check() error {
	if _, ok := aaruo.mutation.AccountID(); aaruo.mutation.AccountCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AccountAuthRole.account"`)
	}
	if _, ok := aaruo.mutation.AuthRoleID(); aaruo.mutation.AuthRoleCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AccountAuthRole.auth_role"`)
	}
	return nil
}

func (aaruo *AccountAuthRoleUpdateOne) sqlSave(ctx context.Context) (_node *AccountAuthRole, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   accountauthrole.Table,
			Columns: accountauthrole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: accountauthrole.FieldID,
			},
		},
	}
	id, ok := aaruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AccountAuthRole.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aaruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accountauthrole.FieldID)
		for _, f := range fields {
			if !accountauthrole.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != accountauthrole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aaruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aaruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accountauthrole.FieldUpdatedAt,
		})
	}
	if value, ok := aaruo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accountauthrole.FieldDeletedAt,
		})
	}
	if aaruo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: accountauthrole.FieldDeletedAt,
		})
	}
	if aaruo.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accountauthrole.AccountTable,
			Columns: []string{accountauthrole.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: account.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aaruo.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accountauthrole.AccountTable,
			Columns: []string{accountauthrole.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aaruo.mutation.AuthRoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accountauthrole.AuthRoleTable,
			Columns: []string{accountauthrole.AuthRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: authrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aaruo.mutation.AuthRoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   accountauthrole.AuthRoleTable,
			Columns: []string{accountauthrole.AuthRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: authrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AccountAuthRole{config: aaruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aaruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountauthrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
