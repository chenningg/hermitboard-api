// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/chenningg/hermitboard-api/ent/asset"
	"github.com/chenningg/hermitboard-api/ent/assetclass"
	"github.com/chenningg/hermitboard-api/ent/cryptocurrency"
	"github.com/chenningg/hermitboard-api/pulid"
)

// Asset is the model entity for the Asset schema.
type Asset struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.PULID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// AssetClassID holds the value of the "asset_class_id" field.
	AssetClassID pulid.PULID `json:"asset_class_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AssetQuery when eager-loading is set.
	Edges AssetEdges `json:"edges"`
}

// AssetEdges holds the relations/edges for other nodes in the graph.
type AssetEdges struct {
	// AssetClass holds the value of the asset_class edge.
	AssetClass *AssetClass `json:"asset_class,omitempty"`
	// Cryptocurrency holds the value of the cryptocurrency edge.
	Cryptocurrency *Cryptocurrency `json:"cryptocurrency,omitempty"`
	// TransactionBase holds the value of the transaction_base edge.
	TransactionBase []*Transaction `json:"transaction_base,omitempty"`
	// TransactionQuote holds the value of the transaction_quote edge.
	TransactionQuote []*Transaction `json:"transaction_quote,omitempty"`
	// DailyAssetPrice holds the value of the daily_asset_price edge.
	DailyAssetPrice []*DailyAssetPrice `json:"daily_asset_price,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
	// totalCount holds the count of the edges above.
	totalCount [5]map[string]int

	namedTransactionBase  map[string][]*Transaction
	namedTransactionQuote map[string][]*Transaction
	namedDailyAssetPrice  map[string][]*DailyAssetPrice
}

// AssetClassOrErr returns the AssetClass value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetEdges) AssetClassOrErr() (*AssetClass, error) {
	if e.loadedTypes[0] {
		if e.AssetClass == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: assetclass.Label}
		}
		return e.AssetClass, nil
	}
	return nil, &NotLoadedError{edge: "asset_class"}
}

// CryptocurrencyOrErr returns the Cryptocurrency value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetEdges) CryptocurrencyOrErr() (*Cryptocurrency, error) {
	if e.loadedTypes[1] {
		if e.Cryptocurrency == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: cryptocurrency.Label}
		}
		return e.Cryptocurrency, nil
	}
	return nil, &NotLoadedError{edge: "cryptocurrency"}
}

// TransactionBaseOrErr returns the TransactionBase value or an error if the edge
// was not loaded in eager-loading.
func (e AssetEdges) TransactionBaseOrErr() ([]*Transaction, error) {
	if e.loadedTypes[2] {
		return e.TransactionBase, nil
	}
	return nil, &NotLoadedError{edge: "transaction_base"}
}

// TransactionQuoteOrErr returns the TransactionQuote value or an error if the edge
// was not loaded in eager-loading.
func (e AssetEdges) TransactionQuoteOrErr() ([]*Transaction, error) {
	if e.loadedTypes[3] {
		return e.TransactionQuote, nil
	}
	return nil, &NotLoadedError{edge: "transaction_quote"}
}

// DailyAssetPriceOrErr returns the DailyAssetPrice value or an error if the edge
// was not loaded in eager-loading.
func (e AssetEdges) DailyAssetPriceOrErr() ([]*DailyAssetPrice, error) {
	if e.loadedTypes[4] {
		return e.DailyAssetPrice, nil
	}
	return nil, &NotLoadedError{edge: "daily_asset_price"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Asset) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case asset.FieldID, asset.FieldAssetClassID:
			values[i] = new(pulid.PULID)
		case asset.FieldCreatedAt, asset.FieldUpdatedAt, asset.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Asset", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Asset fields.
func (a *Asset) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case asset.FieldID:
			if value, ok := values[i].(*pulid.PULID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				a.ID = *value
			}
		case asset.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case asset.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case asset.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				a.DeletedAt = new(time.Time)
				*a.DeletedAt = value.Time
			}
		case asset.FieldAssetClassID:
			if value, ok := values[i].(*pulid.PULID); !ok {
				return fmt.Errorf("unexpected type %T for field asset_class_id", values[i])
			} else if value != nil {
				a.AssetClassID = *value
			}
		}
	}
	return nil
}

// QueryAssetClass queries the "asset_class" edge of the Asset entity.
func (a *Asset) QueryAssetClass() *AssetClassQuery {
	return (&AssetClient{config: a.config}).QueryAssetClass(a)
}

// QueryCryptocurrency queries the "cryptocurrency" edge of the Asset entity.
func (a *Asset) QueryCryptocurrency() *CryptocurrencyQuery {
	return (&AssetClient{config: a.config}).QueryCryptocurrency(a)
}

// QueryTransactionBase queries the "transaction_base" edge of the Asset entity.
func (a *Asset) QueryTransactionBase() *TransactionQuery {
	return (&AssetClient{config: a.config}).QueryTransactionBase(a)
}

// QueryTransactionQuote queries the "transaction_quote" edge of the Asset entity.
func (a *Asset) QueryTransactionQuote() *TransactionQuery {
	return (&AssetClient{config: a.config}).QueryTransactionQuote(a)
}

// QueryDailyAssetPrice queries the "daily_asset_price" edge of the Asset entity.
func (a *Asset) QueryDailyAssetPrice() *DailyAssetPriceQuery {
	return (&AssetClient{config: a.config}).QueryDailyAssetPrice(a)
}

// Update returns a builder for updating this Asset.
// Note that you need to call Asset.Unwrap() before calling this method if this Asset
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Asset) Update() *AssetUpdateOne {
	return (&AssetClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Asset entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Asset) Unwrap() *Asset {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Asset is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Asset) String() string {
	var builder strings.Builder
	builder.WriteString("Asset(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := a.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("asset_class_id=")
	builder.WriteString(fmt.Sprintf("%v", a.AssetClassID))
	builder.WriteByte(')')
	return builder.String()
}

// NamedTransactionBase returns the TransactionBase named value or an error if the edge was not
// loaded in eager-loading with this name.
func (a *Asset) NamedTransactionBase(name string) ([]*Transaction, error) {
	if a.Edges.namedTransactionBase == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := a.Edges.namedTransactionBase[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (a *Asset) appendNamedTransactionBase(name string, edges ...*Transaction) {
	if a.Edges.namedTransactionBase == nil {
		a.Edges.namedTransactionBase = make(map[string][]*Transaction)
	}
	if len(edges) == 0 {
		a.Edges.namedTransactionBase[name] = []*Transaction{}
	} else {
		a.Edges.namedTransactionBase[name] = append(a.Edges.namedTransactionBase[name], edges...)
	}
}

// NamedTransactionQuote returns the TransactionQuote named value or an error if the edge was not
// loaded in eager-loading with this name.
func (a *Asset) NamedTransactionQuote(name string) ([]*Transaction, error) {
	if a.Edges.namedTransactionQuote == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := a.Edges.namedTransactionQuote[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (a *Asset) appendNamedTransactionQuote(name string, edges ...*Transaction) {
	if a.Edges.namedTransactionQuote == nil {
		a.Edges.namedTransactionQuote = make(map[string][]*Transaction)
	}
	if len(edges) == 0 {
		a.Edges.namedTransactionQuote[name] = []*Transaction{}
	} else {
		a.Edges.namedTransactionQuote[name] = append(a.Edges.namedTransactionQuote[name], edges...)
	}
}

// NamedDailyAssetPrice returns the DailyAssetPrice named value or an error if the edge was not
// loaded in eager-loading with this name.
func (a *Asset) NamedDailyAssetPrice(name string) ([]*DailyAssetPrice, error) {
	if a.Edges.namedDailyAssetPrice == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := a.Edges.namedDailyAssetPrice[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (a *Asset) appendNamedDailyAssetPrice(name string, edges ...*DailyAssetPrice) {
	if a.Edges.namedDailyAssetPrice == nil {
		a.Edges.namedDailyAssetPrice = make(map[string][]*DailyAssetPrice)
	}
	if len(edges) == 0 {
		a.Edges.namedDailyAssetPrice[name] = []*DailyAssetPrice{}
	} else {
		a.Edges.namedDailyAssetPrice[name] = append(a.Edges.namedDailyAssetPrice[name], edges...)
	}
}

// Assets is a parsable slice of Asset.
type Assets []*Asset

func (a Assets) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
