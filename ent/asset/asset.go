// Code generated by ent, DO NOT EDIT.

package asset

import (
	"time"

	"github.com/oklog/ulid/v2"
	ulid "github.com/oklog/ulid/v2"
)

const (
	// Label holds the string label denoting the asset type in the database.
	Label = "asset"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeAssetClass holds the string denoting the asset_class edge name in mutations.
	EdgeAssetClass = "asset_class"
	// EdgeCryptocurrency holds the string denoting the cryptocurrency edge name in mutations.
	EdgeCryptocurrency = "cryptocurrency"
	// EdgeTransactionBase holds the string denoting the transaction_base edge name in mutations.
	EdgeTransactionBase = "transaction_base"
	// EdgeTransactionQuote holds the string denoting the transaction_quote edge name in mutations.
	EdgeTransactionQuote = "transaction_quote"
	// EdgeDailyAssetPrice holds the string denoting the daily_asset_price edge name in mutations.
	EdgeDailyAssetPrice = "daily_asset_price"
	// Table holds the table name of the asset in the database.
	Table = "assets"
	// AssetClassTable is the table that holds the asset_class relation/edge.
	AssetClassTable = "assets"
	// AssetClassInverseTable is the table name for the AssetClass entity.
	// It exists in this package in order to avoid circular dependency with the "assetclass" package.
	AssetClassInverseTable = "asset_classes"
	// AssetClassColumn is the table column denoting the asset_class relation/edge.
	AssetClassColumn = "asset_asset_class"
	// CryptocurrencyTable is the table that holds the cryptocurrency relation/edge.
	CryptocurrencyTable = "cryptocurrencies"
	// CryptocurrencyInverseTable is the table name for the Cryptocurrency entity.
	// It exists in this package in order to avoid circular dependency with the "cryptocurrency" package.
	CryptocurrencyInverseTable = "cryptocurrencies"
	// CryptocurrencyColumn is the table column denoting the cryptocurrency relation/edge.
	CryptocurrencyColumn = "asset_cryptocurrency"
	// TransactionBaseTable is the table that holds the transaction_base relation/edge. The primary key declared below.
	TransactionBaseTable = "transaction_base_asset"
	// TransactionBaseInverseTable is the table name for the Transaction entity.
	// It exists in this package in order to avoid circular dependency with the "transaction" package.
	TransactionBaseInverseTable = "transactions"
	// TransactionQuoteTable is the table that holds the transaction_quote relation/edge. The primary key declared below.
	TransactionQuoteTable = "transaction_quote_asset"
	// TransactionQuoteInverseTable is the table name for the Transaction entity.
	// It exists in this package in order to avoid circular dependency with the "transaction" package.
	TransactionQuoteInverseTable = "transactions"
	// DailyAssetPriceTable is the table that holds the daily_asset_price relation/edge.
	DailyAssetPriceTable = "daily_asset_prices"
	// DailyAssetPriceInverseTable is the table name for the DailyAssetPrice entity.
	// It exists in this package in order to avoid circular dependency with the "dailyassetprice" package.
	DailyAssetPriceInverseTable = "daily_asset_prices"
	// DailyAssetPriceColumn is the table column denoting the daily_asset_price relation/edge.
	DailyAssetPriceColumn = "asset_daily_asset_price"
)

// Columns holds all SQL columns for asset fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "assets"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"asset_asset_class",
}

var (
	// TransactionBasePrimaryKey and TransactionBaseColumn2 are the table columns denoting the
	// primary key for the transaction_base relation (M2M).
	TransactionBasePrimaryKey = []string{"transaction_id", "asset_id"}
	// TransactionQuotePrimaryKey and TransactionQuoteColumn2 are the table columns denoting the
	// primary key for the transaction_quote relation (M2M).
	TransactionQuotePrimaryKey = []string{"transaction_id", "asset_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() ulid.ULID
)
