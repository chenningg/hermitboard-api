// Code generated by ent, DO NOT EDIT.

package assetclass

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/chenningg/hermitboard-api/pulid"
)

const (
	// Label holds the string label denoting the assetclass type in the database.
	Label = "asset_class"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldAssetClass holds the string denoting the asset_class field in the database.
	FieldAssetClass = "asset_class"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// EdgeAssets holds the string denoting the assets edge name in mutations.
	EdgeAssets = "assets"
	// Table holds the table name of the assetclass in the database.
	Table = "asset_classes"
	// AssetsTable is the table that holds the assets relation/edge.
	AssetsTable = "assets"
	// AssetsInverseTable is the table name for the Asset entity.
	// It exists in this package in order to avoid circular dependency with the "asset" package.
	AssetsInverseTable = "assets"
	// AssetsColumn is the table column denoting the assets relation/edge.
	AssetsColumn = "asset_asset_class"
)

// Columns holds all SQL columns for assetclass fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldAssetClass,
	FieldDescription,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// UpdateDefaultDeletedAt holds the default value on update for the "deleted_at" field.
	UpdateDefaultDeletedAt func() time.Time
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.PULID
)

// AssetClass defines the type for the "asset_class" enum field.
type AssetClass string

// AssetClass values.
const (
	AssetClassCashOrCashEquivalent AssetClass = "CASH_OR_CASH_EQUIVALENT"
	AssetClassCommodity            AssetClass = "COMMODITY"
	AssetClassCryptocurrency       AssetClass = "CRYPTOCURRENCY"
	AssetClassEquity               AssetClass = "EQUITY"
	AssetClassFixedIncome          AssetClass = "FIXED_INCOME"
	AssetClassFuture               AssetClass = "FUTURE"
	AssetClassRealEstate           AssetClass = "REAL_ESTATE"
)

func (ac AssetClass) String() string {
	return string(ac)
}

// AssetClassValidator is a validator for the "asset_class" field enum values. It is called by the builders before save.
func AssetClassValidator(ac AssetClass) error {
	switch ac {
	case AssetClassCashOrCashEquivalent, AssetClassCommodity, AssetClassCryptocurrency, AssetClassEquity, AssetClassFixedIncome, AssetClassFuture, AssetClassRealEstate:
		return nil
	default:
		return fmt.Errorf("assetclass: invalid enum value for asset_class field: %q", ac)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (e AssetClass) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *AssetClass) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = AssetClass(str)
	if err := AssetClassValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid AssetClass", str)
	}
	return nil
}
