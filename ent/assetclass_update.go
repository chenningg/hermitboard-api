// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chenningg/hermitboard-api/ent/asset"
	"github.com/chenningg/hermitboard-api/ent/assetclass"
	"github.com/chenningg/hermitboard-api/ent/predicate"
	"github.com/chenningg/hermitboard-api/hbtype"
	"github.com/oklog/ulid/v2"
	ulid "github.com/oklog/ulid/v2"
)

// AssetClassUpdate is the builder for updating AssetClass entities.
type AssetClassUpdate struct {
	config
	hooks    []Hook
	mutation *AssetClassMutation
}

// Where appends a list predicates to the AssetClassUpdate builder.
func (acu *AssetClassUpdate) Where(ps ...predicate.AssetClass) *AssetClassUpdate {
	acu.mutation.Where(ps...)
	return acu
}

// SetUpdatedAt sets the "updated_at" field.
func (acu *AssetClassUpdate) SetUpdatedAt(t time.Time) *AssetClassUpdate {
	acu.mutation.SetUpdatedAt(t)
	return acu
}

// SetClass sets the "class" field.
func (acu *AssetClassUpdate) SetClass(hc hbtype.AssetClass) *AssetClassUpdate {
	acu.mutation.SetClass(hc)
	return acu
}

// SetDescription sets the "description" field.
func (acu *AssetClassUpdate) SetDescription(s string) *AssetClassUpdate {
	acu.mutation.SetDescription(s)
	return acu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (acu *AssetClassUpdate) SetNillableDescription(s *string) *AssetClassUpdate {
	if s != nil {
		acu.SetDescription(*s)
	}
	return acu
}

// ClearDescription clears the value of the "description" field.
func (acu *AssetClassUpdate) ClearDescription() *AssetClassUpdate {
	acu.mutation.ClearDescription()
	return acu
}

// AddAssetIDs adds the "assets" edge to the Asset entity by IDs.
func (acu *AssetClassUpdate) AddAssetIDs(ids ...ulid.ULID) *AssetClassUpdate {
	acu.mutation.AddAssetIDs(ids...)
	return acu
}

// AddAssets adds the "assets" edges to the Asset entity.
func (acu *AssetClassUpdate) AddAssets(a ...*Asset) *AssetClassUpdate {
	ids := make([]ulid.ULID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return acu.AddAssetIDs(ids...)
}

// Mutation returns the AssetClassMutation object of the builder.
func (acu *AssetClassUpdate) Mutation() *AssetClassMutation {
	return acu.mutation
}

// ClearAssets clears all "assets" edges to the Asset entity.
func (acu *AssetClassUpdate) ClearAssets() *AssetClassUpdate {
	acu.mutation.ClearAssets()
	return acu
}

// RemoveAssetIDs removes the "assets" edge to Asset entities by IDs.
func (acu *AssetClassUpdate) RemoveAssetIDs(ids ...ulid.ULID) *AssetClassUpdate {
	acu.mutation.RemoveAssetIDs(ids...)
	return acu
}

// RemoveAssets removes "assets" edges to Asset entities.
func (acu *AssetClassUpdate) RemoveAssets(a ...*Asset) *AssetClassUpdate {
	ids := make([]ulid.ULID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return acu.RemoveAssetIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (acu *AssetClassUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	acu.defaults()
	if len(acu.hooks) == 0 {
		if err = acu.check(); err != nil {
			return 0, err
		}
		affected, err = acu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AssetClassMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = acu.check(); err != nil {
				return 0, err
			}
			acu.mutation = mutation
			affected, err = acu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(acu.hooks) - 1; i >= 0; i-- {
			if acu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = acu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, acu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (acu *AssetClassUpdate) SaveX(ctx context.Context) int {
	affected, err := acu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (acu *AssetClassUpdate) Exec(ctx context.Context) error {
	_, err := acu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acu *AssetClassUpdate) ExecX(ctx context.Context) {
	if err := acu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acu *AssetClassUpdate) defaults() {
	if _, ok := acu.mutation.UpdatedAt(); !ok {
		v := assetclass.UpdateDefaultUpdatedAt()
		acu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acu *AssetClassUpdate) check() error {
	if v, ok := acu.mutation.Class(); ok {
		if err := assetclass.ClassValidator(v); err != nil {
			return &ValidationError{Name: "class", err: fmt.Errorf(`ent: validator failed for field "AssetClass.class": %w`, err)}
		}
	}
	if v, ok := acu.mutation.Description(); ok {
		if err := assetclass.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "AssetClass.description": %w`, err)}
		}
	}
	return nil
}

func (acu *AssetClassUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   assetclass.Table,
			Columns: assetclass.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: assetclass.FieldID,
			},
		},
	}
	if ps := acu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: assetclass.FieldUpdatedAt,
		})
	}
	if value, ok := acu.mutation.Class(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: assetclass.FieldClass,
		})
	}
	if value, ok := acu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assetclass.FieldDescription,
		})
	}
	if acu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: assetclass.FieldDescription,
		})
	}
	if acu.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   assetclass.AssetsTable,
			Columns: []string{assetclass.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: asset.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.RemovedAssetsIDs(); len(nodes) > 0 && !acu.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   assetclass.AssetsTable,
			Columns: []string{assetclass.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: asset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   assetclass.AssetsTable,
			Columns: []string{assetclass.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: asset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, acu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assetclass.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AssetClassUpdateOne is the builder for updating a single AssetClass entity.
type AssetClassUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AssetClassMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (acuo *AssetClassUpdateOne) SetUpdatedAt(t time.Time) *AssetClassUpdateOne {
	acuo.mutation.SetUpdatedAt(t)
	return acuo
}

// SetClass sets the "class" field.
func (acuo *AssetClassUpdateOne) SetClass(hc hbtype.AssetClass) *AssetClassUpdateOne {
	acuo.mutation.SetClass(hc)
	return acuo
}

// SetDescription sets the "description" field.
func (acuo *AssetClassUpdateOne) SetDescription(s string) *AssetClassUpdateOne {
	acuo.mutation.SetDescription(s)
	return acuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (acuo *AssetClassUpdateOne) SetNillableDescription(s *string) *AssetClassUpdateOne {
	if s != nil {
		acuo.SetDescription(*s)
	}
	return acuo
}

// ClearDescription clears the value of the "description" field.
func (acuo *AssetClassUpdateOne) ClearDescription() *AssetClassUpdateOne {
	acuo.mutation.ClearDescription()
	return acuo
}

// AddAssetIDs adds the "assets" edge to the Asset entity by IDs.
func (acuo *AssetClassUpdateOne) AddAssetIDs(ids ...ulid.ULID) *AssetClassUpdateOne {
	acuo.mutation.AddAssetIDs(ids...)
	return acuo
}

// AddAssets adds the "assets" edges to the Asset entity.
func (acuo *AssetClassUpdateOne) AddAssets(a ...*Asset) *AssetClassUpdateOne {
	ids := make([]ulid.ULID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return acuo.AddAssetIDs(ids...)
}

// Mutation returns the AssetClassMutation object of the builder.
func (acuo *AssetClassUpdateOne) Mutation() *AssetClassMutation {
	return acuo.mutation
}

// ClearAssets clears all "assets" edges to the Asset entity.
func (acuo *AssetClassUpdateOne) ClearAssets() *AssetClassUpdateOne {
	acuo.mutation.ClearAssets()
	return acuo
}

// RemoveAssetIDs removes the "assets" edge to Asset entities by IDs.
func (acuo *AssetClassUpdateOne) RemoveAssetIDs(ids ...ulid.ULID) *AssetClassUpdateOne {
	acuo.mutation.RemoveAssetIDs(ids...)
	return acuo
}

// RemoveAssets removes "assets" edges to Asset entities.
func (acuo *AssetClassUpdateOne) RemoveAssets(a ...*Asset) *AssetClassUpdateOne {
	ids := make([]ulid.ULID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return acuo.RemoveAssetIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (acuo *AssetClassUpdateOne) Select(field string, fields ...string) *AssetClassUpdateOne {
	acuo.fields = append([]string{field}, fields...)
	return acuo
}

// Save executes the query and returns the updated AssetClass entity.
func (acuo *AssetClassUpdateOne) Save(ctx context.Context) (*AssetClass, error) {
	var (
		err  error
		node *AssetClass
	)
	acuo.defaults()
	if len(acuo.hooks) == 0 {
		if err = acuo.check(); err != nil {
			return nil, err
		}
		node, err = acuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AssetClassMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = acuo.check(); err != nil {
				return nil, err
			}
			acuo.mutation = mutation
			node, err = acuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(acuo.hooks) - 1; i >= 0; i-- {
			if acuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = acuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, acuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AssetClass)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AssetClassMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (acuo *AssetClassUpdateOne) SaveX(ctx context.Context) *AssetClass {
	node, err := acuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (acuo *AssetClassUpdateOne) Exec(ctx context.Context) error {
	_, err := acuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acuo *AssetClassUpdateOne) ExecX(ctx context.Context) {
	if err := acuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acuo *AssetClassUpdateOne) defaults() {
	if _, ok := acuo.mutation.UpdatedAt(); !ok {
		v := assetclass.UpdateDefaultUpdatedAt()
		acuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acuo *AssetClassUpdateOne) check() error {
	if v, ok := acuo.mutation.Class(); ok {
		if err := assetclass.ClassValidator(v); err != nil {
			return &ValidationError{Name: "class", err: fmt.Errorf(`ent: validator failed for field "AssetClass.class": %w`, err)}
		}
	}
	if v, ok := acuo.mutation.Description(); ok {
		if err := assetclass.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "AssetClass.description": %w`, err)}
		}
	}
	return nil
}

func (acuo *AssetClassUpdateOne) sqlSave(ctx context.Context) (_node *AssetClass, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   assetclass.Table,
			Columns: assetclass.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: assetclass.FieldID,
			},
		},
	}
	id, ok := acuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AssetClass.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := acuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assetclass.FieldID)
		for _, f := range fields {
			if !assetclass.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != assetclass.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := acuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: assetclass.FieldUpdatedAt,
		})
	}
	if value, ok := acuo.mutation.Class(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: assetclass.FieldClass,
		})
	}
	if value, ok := acuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assetclass.FieldDescription,
		})
	}
	if acuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: assetclass.FieldDescription,
		})
	}
	if acuo.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   assetclass.AssetsTable,
			Columns: []string{assetclass.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: asset.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.RemovedAssetsIDs(); len(nodes) > 0 && !acuo.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   assetclass.AssetsTable,
			Columns: []string{assetclass.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: asset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   assetclass.AssetsTable,
			Columns: []string{assetclass.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: asset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AssetClass{config: acuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, acuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assetclass.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
