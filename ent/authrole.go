// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/chenningg/hermitboard-api/ent/authrole"
	"github.com/chenningg/hermitboard-api/ent/schema/pulid"
)

// AuthRole is the model entity for the AuthRole schema.
type AuthRole struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.PULID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// AuthRole holds the value of the "auth_role" field.
	AuthRole authrole.AuthRole `json:"auth_role,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AuthRoleQuery when eager-loading is set.
	Edges AuthRoleEdges `json:"edges"`
}

// AuthRoleEdges holds the relations/edges for other nodes in the graph.
type AuthRoleEdges struct {
	// Accounts holds the value of the accounts edge.
	Accounts []*Account `json:"accounts,omitempty"`
	// AccountAuthRoles holds the value of the account_auth_roles edge.
	AccountAuthRoles []*AccountAuthRole `json:"account_auth_roles,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedAccounts         map[string][]*Account
	namedAccountAuthRoles map[string][]*AccountAuthRole
}

// AccountsOrErr returns the Accounts value or an error if the edge
// was not loaded in eager-loading.
func (e AuthRoleEdges) AccountsOrErr() ([]*Account, error) {
	if e.loadedTypes[0] {
		return e.Accounts, nil
	}
	return nil, &NotLoadedError{edge: "accounts"}
}

// AccountAuthRolesOrErr returns the AccountAuthRoles value or an error if the edge
// was not loaded in eager-loading.
func (e AuthRoleEdges) AccountAuthRolesOrErr() ([]*AccountAuthRole, error) {
	if e.loadedTypes[1] {
		return e.AccountAuthRoles, nil
	}
	return nil, &NotLoadedError{edge: "account_auth_roles"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuthRole) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case authrole.FieldID:
			values[i] = new(pulid.PULID)
		case authrole.FieldAuthRole, authrole.FieldDescription:
			values[i] = new(sql.NullString)
		case authrole.FieldCreatedAt, authrole.FieldUpdatedAt, authrole.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AuthRole", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuthRole fields.
func (ar *AuthRole) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case authrole.FieldID:
			if value, ok := values[i].(*pulid.PULID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ar.ID = *value
			}
		case authrole.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ar.CreatedAt = value.Time
			}
		case authrole.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ar.UpdatedAt = value.Time
			}
		case authrole.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ar.DeletedAt = new(time.Time)
				*ar.DeletedAt = value.Time
			}
		case authrole.FieldAuthRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auth_role", values[i])
			} else if value.Valid {
				ar.AuthRole = authrole.AuthRole(value.String)
			}
		case authrole.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ar.Description = new(string)
				*ar.Description = value.String
			}
		}
	}
	return nil
}

// QueryAccounts queries the "accounts" edge of the AuthRole entity.
func (ar *AuthRole) QueryAccounts() *AccountQuery {
	return (&AuthRoleClient{config: ar.config}).QueryAccounts(ar)
}

// QueryAccountAuthRoles queries the "account_auth_roles" edge of the AuthRole entity.
func (ar *AuthRole) QueryAccountAuthRoles() *AccountAuthRoleQuery {
	return (&AuthRoleClient{config: ar.config}).QueryAccountAuthRoles(ar)
}

// Update returns a builder for updating this AuthRole.
// Note that you need to call AuthRole.Unwrap() before calling this method if this AuthRole
// was returned from a transaction, and the transaction was committed or rolled back.
func (ar *AuthRole) Update() *AuthRoleUpdateOne {
	return (&AuthRoleClient{config: ar.config}).UpdateOne(ar)
}

// Unwrap unwraps the AuthRole entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ar *AuthRole) Unwrap() *AuthRole {
	_tx, ok := ar.config.driver.(*txDriver)
	if !ok {
		panic("ent: AuthRole is not a transactional entity")
	}
	ar.config.driver = _tx.drv
	return ar
}

// String implements the fmt.Stringer.
func (ar *AuthRole) String() string {
	var builder strings.Builder
	builder.WriteString("AuthRole(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ar.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ar.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ar.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := ar.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("auth_role=")
	builder.WriteString(fmt.Sprintf("%v", ar.AuthRole))
	builder.WriteString(", ")
	if v := ar.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedAccounts returns the Accounts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ar *AuthRole) NamedAccounts(name string) ([]*Account, error) {
	if ar.Edges.namedAccounts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ar.Edges.namedAccounts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ar *AuthRole) appendNamedAccounts(name string, edges ...*Account) {
	if ar.Edges.namedAccounts == nil {
		ar.Edges.namedAccounts = make(map[string][]*Account)
	}
	if len(edges) == 0 {
		ar.Edges.namedAccounts[name] = []*Account{}
	} else {
		ar.Edges.namedAccounts[name] = append(ar.Edges.namedAccounts[name], edges...)
	}
}

// NamedAccountAuthRoles returns the AccountAuthRoles named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ar *AuthRole) NamedAccountAuthRoles(name string) ([]*AccountAuthRole, error) {
	if ar.Edges.namedAccountAuthRoles == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ar.Edges.namedAccountAuthRoles[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ar *AuthRole) appendNamedAccountAuthRoles(name string, edges ...*AccountAuthRole) {
	if ar.Edges.namedAccountAuthRoles == nil {
		ar.Edges.namedAccountAuthRoles = make(map[string][]*AccountAuthRole)
	}
	if len(edges) == 0 {
		ar.Edges.namedAccountAuthRoles[name] = []*AccountAuthRole{}
	} else {
		ar.Edges.namedAccountAuthRoles[name] = append(ar.Edges.namedAccountAuthRoles[name], edges...)
	}
}

// AuthRoles is a parsable slice of AuthRole.
type AuthRoles []*AuthRole

func (ar AuthRoles) config(cfg config) {
	for _i := range ar {
		ar[_i].config = cfg
	}
}
