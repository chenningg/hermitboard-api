// Code generated by ent, DO NOT EDIT.

package authrole

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/chenningg/hermitboard-api/pulid"
)

const (
	// Label holds the string label denoting the authrole type in the database.
	Label = "auth_role"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// EdgeAccounts holds the string denoting the accounts edge name in mutations.
	EdgeAccounts = "accounts"
	// EdgeStaffAccounts holds the string denoting the staff_accounts edge name in mutations.
	EdgeStaffAccounts = "staff_accounts"
	// Table holds the table name of the authrole in the database.
	Table = "auth_roles"
	// AccountsTable is the table that holds the accounts relation/edge. The primary key declared below.
	AccountsTable = "account_auth_roles"
	// AccountsInverseTable is the table name for the Account entity.
	// It exists in this package in order to avoid circular dependency with the "account" package.
	AccountsInverseTable = "accounts"
	// StaffAccountsTable is the table that holds the staff_accounts relation/edge. The primary key declared below.
	StaffAccountsTable = "staff_account_auth_roles"
	// StaffAccountsInverseTable is the table name for the StaffAccount entity.
	// It exists in this package in order to avoid circular dependency with the "staffaccount" package.
	StaffAccountsInverseTable = "staff_accounts"
)

// Columns holds all SQL columns for authrole fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldValue,
	FieldDescription,
}

var (
	// AccountsPrimaryKey and AccountsColumn2 are the table columns denoting the
	// primary key for the accounts relation (M2M).
	AccountsPrimaryKey = []string{"account_id", "auth_role_id"}
	// StaffAccountsPrimaryKey and StaffAccountsColumn2 are the table columns denoting the
	// primary key for the staff_accounts relation (M2M).
	StaffAccountsPrimaryKey = []string{"staff_account_id", "auth_role_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// UpdateDefaultDeletedAt holds the default value on update for the "deleted_at" field.
	UpdateDefaultDeletedAt func() time.Time
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.PULID
)

// Value defines the type for the "value" enum field.
type Value string

// Value values.
const (
	ValueDemo       Value = "DEMO"
	ValueFree       Value = "FREE"
	ValuePlus       Value = "PLUS"
	ValuePro        Value = "PRO"
	ValueEnterprise Value = "ENTERPRISE"
	ValueSupport    Value = "SUPPORT"
	ValueAdmin      Value = "ADMIN"
	ValueSuperAdmin Value = "SUPER_ADMIN"
)

func (v Value) String() string {
	return string(v)
}

// ValueValidator is a validator for the "value" field enum values. It is called by the builders before save.
func ValueValidator(v Value) error {
	switch v {
	case ValueDemo, ValueFree, ValuePlus, ValuePro, ValueEnterprise, ValueSupport, ValueAdmin, ValueSuperAdmin:
		return nil
	default:
		return fmt.Errorf("authrole: invalid enum value for value field: %q", v)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Value) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Value) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Value(str)
	if err := ValueValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Value", str)
	}
	return nil
}
