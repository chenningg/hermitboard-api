// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chenningg/hermitboard-api/ent/account"
	"github.com/chenningg/hermitboard-api/ent/authrole"
	"github.com/chenningg/hermitboard-api/ent/predicate"
	"github.com/chenningg/hermitboard-api/ent/staffaccount"
	"github.com/chenningg/hermitboard-api/pulid"
)

// AuthRoleUpdate is the builder for updating AuthRole entities.
type AuthRoleUpdate struct {
	config
	hooks    []Hook
	mutation *AuthRoleMutation
}

// Where appends a list predicates to the AuthRoleUpdate builder.
func (aru *AuthRoleUpdate) Where(ps ...predicate.AuthRole) *AuthRoleUpdate {
	aru.mutation.Where(ps...)
	return aru
}

// SetUpdatedAt sets the "updated_at" field.
func (aru *AuthRoleUpdate) SetUpdatedAt(t time.Time) *AuthRoleUpdate {
	aru.mutation.SetUpdatedAt(t)
	return aru
}

// SetDeletedAt sets the "deleted_at" field.
func (aru *AuthRoleUpdate) SetDeletedAt(t time.Time) *AuthRoleUpdate {
	aru.mutation.SetDeletedAt(t)
	return aru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (aru *AuthRoleUpdate) ClearDeletedAt() *AuthRoleUpdate {
	aru.mutation.ClearDeletedAt()
	return aru
}

// SetAuthRole sets the "auth_role" field.
func (aru *AuthRoleUpdate) SetAuthRole(ar authrole.AuthRole) *AuthRoleUpdate {
	aru.mutation.SetAuthRole(ar)
	return aru
}

// SetDescription sets the "description" field.
func (aru *AuthRoleUpdate) SetDescription(s string) *AuthRoleUpdate {
	aru.mutation.SetDescription(s)
	return aru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (aru *AuthRoleUpdate) SetNillableDescription(s *string) *AuthRoleUpdate {
	if s != nil {
		aru.SetDescription(*s)
	}
	return aru
}

// ClearDescription clears the value of the "description" field.
func (aru *AuthRoleUpdate) ClearDescription() *AuthRoleUpdate {
	aru.mutation.ClearDescription()
	return aru
}

// AddAccountIDs adds the "accounts" edge to the Account entity by IDs.
func (aru *AuthRoleUpdate) AddAccountIDs(ids ...pulid.PULID) *AuthRoleUpdate {
	aru.mutation.AddAccountIDs(ids...)
	return aru
}

// AddAccounts adds the "accounts" edges to the Account entity.
func (aru *AuthRoleUpdate) AddAccounts(a ...*Account) *AuthRoleUpdate {
	ids := make([]pulid.PULID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aru.AddAccountIDs(ids...)
}

// AddStaffAccountIDs adds the "staff_accounts" edge to the StaffAccount entity by IDs.
func (aru *AuthRoleUpdate) AddStaffAccountIDs(ids ...pulid.PULID) *AuthRoleUpdate {
	aru.mutation.AddStaffAccountIDs(ids...)
	return aru
}

// AddStaffAccounts adds the "staff_accounts" edges to the StaffAccount entity.
func (aru *AuthRoleUpdate) AddStaffAccounts(s ...*StaffAccount) *AuthRoleUpdate {
	ids := make([]pulid.PULID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return aru.AddStaffAccountIDs(ids...)
}

// Mutation returns the AuthRoleMutation object of the builder.
func (aru *AuthRoleUpdate) Mutation() *AuthRoleMutation {
	return aru.mutation
}

// ClearAccounts clears all "accounts" edges to the Account entity.
func (aru *AuthRoleUpdate) ClearAccounts() *AuthRoleUpdate {
	aru.mutation.ClearAccounts()
	return aru
}

// RemoveAccountIDs removes the "accounts" edge to Account entities by IDs.
func (aru *AuthRoleUpdate) RemoveAccountIDs(ids ...pulid.PULID) *AuthRoleUpdate {
	aru.mutation.RemoveAccountIDs(ids...)
	return aru
}

// RemoveAccounts removes "accounts" edges to Account entities.
func (aru *AuthRoleUpdate) RemoveAccounts(a ...*Account) *AuthRoleUpdate {
	ids := make([]pulid.PULID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aru.RemoveAccountIDs(ids...)
}

// ClearStaffAccounts clears all "staff_accounts" edges to the StaffAccount entity.
func (aru *AuthRoleUpdate) ClearStaffAccounts() *AuthRoleUpdate {
	aru.mutation.ClearStaffAccounts()
	return aru
}

// RemoveStaffAccountIDs removes the "staff_accounts" edge to StaffAccount entities by IDs.
func (aru *AuthRoleUpdate) RemoveStaffAccountIDs(ids ...pulid.PULID) *AuthRoleUpdate {
	aru.mutation.RemoveStaffAccountIDs(ids...)
	return aru
}

// RemoveStaffAccounts removes "staff_accounts" edges to StaffAccount entities.
func (aru *AuthRoleUpdate) RemoveStaffAccounts(s ...*StaffAccount) *AuthRoleUpdate {
	ids := make([]pulid.PULID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return aru.RemoveStaffAccountIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aru *AuthRoleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	aru.defaults()
	if len(aru.hooks) == 0 {
		if err = aru.check(); err != nil {
			return 0, err
		}
		affected, err = aru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuthRoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aru.check(); err != nil {
				return 0, err
			}
			aru.mutation = mutation
			affected, err = aru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aru.hooks) - 1; i >= 0; i-- {
			if aru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aru *AuthRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := aru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aru *AuthRoleUpdate) Exec(ctx context.Context) error {
	_, err := aru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aru *AuthRoleUpdate) ExecX(ctx context.Context) {
	if err := aru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aru *AuthRoleUpdate) defaults() {
	if _, ok := aru.mutation.UpdatedAt(); !ok {
		v := authrole.UpdateDefaultUpdatedAt()
		aru.mutation.SetUpdatedAt(v)
	}
	if _, ok := aru.mutation.DeletedAt(); !ok && !aru.mutation.DeletedAtCleared() {
		v := authrole.UpdateDefaultDeletedAt()
		aru.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aru *AuthRoleUpdate) check() error {
	if v, ok := aru.mutation.AuthRole(); ok {
		if err := authrole.AuthRoleValidator(v); err != nil {
			return &ValidationError{Name: "auth_role", err: fmt.Errorf(`ent: validator failed for field "AuthRole.auth_role": %w`, err)}
		}
	}
	if v, ok := aru.mutation.Description(); ok {
		if err := authrole.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "AuthRole.description": %w`, err)}
		}
	}
	return nil
}

func (aru *AuthRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   authrole.Table,
			Columns: authrole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: authrole.FieldID,
			},
		},
	}
	if ps := aru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authrole.FieldUpdatedAt,
		})
	}
	if value, ok := aru.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authrole.FieldDeletedAt,
		})
	}
	if aru.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: authrole.FieldDeletedAt,
		})
	}
	if value, ok := aru.mutation.AuthRole(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: authrole.FieldAuthRole,
		})
	}
	if value, ok := aru.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authrole.FieldDescription,
		})
	}
	if aru.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: authrole.FieldDescription,
		})
	}
	if aru.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   authrole.AccountsTable,
			Columns: authrole.AccountsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: account.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.RemovedAccountsIDs(); len(nodes) > 0 && !aru.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   authrole.AccountsTable,
			Columns: authrole.AccountsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   authrole.AccountsTable,
			Columns: authrole.AccountsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aru.mutation.StaffAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   authrole.StaffAccountsTable,
			Columns: authrole.StaffAccountsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: staffaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.RemovedStaffAccountsIDs(); len(nodes) > 0 && !aru.mutation.StaffAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   authrole.StaffAccountsTable,
			Columns: authrole.StaffAccountsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: staffaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.StaffAccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   authrole.StaffAccountsTable,
			Columns: authrole.StaffAccountsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: staffaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AuthRoleUpdateOne is the builder for updating a single AuthRole entity.
type AuthRoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuthRoleMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (aruo *AuthRoleUpdateOne) SetUpdatedAt(t time.Time) *AuthRoleUpdateOne {
	aruo.mutation.SetUpdatedAt(t)
	return aruo
}

// SetDeletedAt sets the "deleted_at" field.
func (aruo *AuthRoleUpdateOne) SetDeletedAt(t time.Time) *AuthRoleUpdateOne {
	aruo.mutation.SetDeletedAt(t)
	return aruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (aruo *AuthRoleUpdateOne) ClearDeletedAt() *AuthRoleUpdateOne {
	aruo.mutation.ClearDeletedAt()
	return aruo
}

// SetAuthRole sets the "auth_role" field.
func (aruo *AuthRoleUpdateOne) SetAuthRole(ar authrole.AuthRole) *AuthRoleUpdateOne {
	aruo.mutation.SetAuthRole(ar)
	return aruo
}

// SetDescription sets the "description" field.
func (aruo *AuthRoleUpdateOne) SetDescription(s string) *AuthRoleUpdateOne {
	aruo.mutation.SetDescription(s)
	return aruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (aruo *AuthRoleUpdateOne) SetNillableDescription(s *string) *AuthRoleUpdateOne {
	if s != nil {
		aruo.SetDescription(*s)
	}
	return aruo
}

// ClearDescription clears the value of the "description" field.
func (aruo *AuthRoleUpdateOne) ClearDescription() *AuthRoleUpdateOne {
	aruo.mutation.ClearDescription()
	return aruo
}

// AddAccountIDs adds the "accounts" edge to the Account entity by IDs.
func (aruo *AuthRoleUpdateOne) AddAccountIDs(ids ...pulid.PULID) *AuthRoleUpdateOne {
	aruo.mutation.AddAccountIDs(ids...)
	return aruo
}

// AddAccounts adds the "accounts" edges to the Account entity.
func (aruo *AuthRoleUpdateOne) AddAccounts(a ...*Account) *AuthRoleUpdateOne {
	ids := make([]pulid.PULID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aruo.AddAccountIDs(ids...)
}

// AddStaffAccountIDs adds the "staff_accounts" edge to the StaffAccount entity by IDs.
func (aruo *AuthRoleUpdateOne) AddStaffAccountIDs(ids ...pulid.PULID) *AuthRoleUpdateOne {
	aruo.mutation.AddStaffAccountIDs(ids...)
	return aruo
}

// AddStaffAccounts adds the "staff_accounts" edges to the StaffAccount entity.
func (aruo *AuthRoleUpdateOne) AddStaffAccounts(s ...*StaffAccount) *AuthRoleUpdateOne {
	ids := make([]pulid.PULID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return aruo.AddStaffAccountIDs(ids...)
}

// Mutation returns the AuthRoleMutation object of the builder.
func (aruo *AuthRoleUpdateOne) Mutation() *AuthRoleMutation {
	return aruo.mutation
}

// ClearAccounts clears all "accounts" edges to the Account entity.
func (aruo *AuthRoleUpdateOne) ClearAccounts() *AuthRoleUpdateOne {
	aruo.mutation.ClearAccounts()
	return aruo
}

// RemoveAccountIDs removes the "accounts" edge to Account entities by IDs.
func (aruo *AuthRoleUpdateOne) RemoveAccountIDs(ids ...pulid.PULID) *AuthRoleUpdateOne {
	aruo.mutation.RemoveAccountIDs(ids...)
	return aruo
}

// RemoveAccounts removes "accounts" edges to Account entities.
func (aruo *AuthRoleUpdateOne) RemoveAccounts(a ...*Account) *AuthRoleUpdateOne {
	ids := make([]pulid.PULID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aruo.RemoveAccountIDs(ids...)
}

// ClearStaffAccounts clears all "staff_accounts" edges to the StaffAccount entity.
func (aruo *AuthRoleUpdateOne) ClearStaffAccounts() *AuthRoleUpdateOne {
	aruo.mutation.ClearStaffAccounts()
	return aruo
}

// RemoveStaffAccountIDs removes the "staff_accounts" edge to StaffAccount entities by IDs.
func (aruo *AuthRoleUpdateOne) RemoveStaffAccountIDs(ids ...pulid.PULID) *AuthRoleUpdateOne {
	aruo.mutation.RemoveStaffAccountIDs(ids...)
	return aruo
}

// RemoveStaffAccounts removes "staff_accounts" edges to StaffAccount entities.
func (aruo *AuthRoleUpdateOne) RemoveStaffAccounts(s ...*StaffAccount) *AuthRoleUpdateOne {
	ids := make([]pulid.PULID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return aruo.RemoveStaffAccountIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aruo *AuthRoleUpdateOne) Select(field string, fields ...string) *AuthRoleUpdateOne {
	aruo.fields = append([]string{field}, fields...)
	return aruo
}

// Save executes the query and returns the updated AuthRole entity.
func (aruo *AuthRoleUpdateOne) Save(ctx context.Context) (*AuthRole, error) {
	var (
		err  error
		node *AuthRole
	)
	aruo.defaults()
	if len(aruo.hooks) == 0 {
		if err = aruo.check(); err != nil {
			return nil, err
		}
		node, err = aruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuthRoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aruo.check(); err != nil {
				return nil, err
			}
			aruo.mutation = mutation
			node, err = aruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aruo.hooks) - 1; i >= 0; i-- {
			if aruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, aruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AuthRole)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AuthRoleMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aruo *AuthRoleUpdateOne) SaveX(ctx context.Context) *AuthRole {
	node, err := aruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aruo *AuthRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := aruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aruo *AuthRoleUpdateOne) ExecX(ctx context.Context) {
	if err := aruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aruo *AuthRoleUpdateOne) defaults() {
	if _, ok := aruo.mutation.UpdatedAt(); !ok {
		v := authrole.UpdateDefaultUpdatedAt()
		aruo.mutation.SetUpdatedAt(v)
	}
	if _, ok := aruo.mutation.DeletedAt(); !ok && !aruo.mutation.DeletedAtCleared() {
		v := authrole.UpdateDefaultDeletedAt()
		aruo.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aruo *AuthRoleUpdateOne) check() error {
	if v, ok := aruo.mutation.AuthRole(); ok {
		if err := authrole.AuthRoleValidator(v); err != nil {
			return &ValidationError{Name: "auth_role", err: fmt.Errorf(`ent: validator failed for field "AuthRole.auth_role": %w`, err)}
		}
	}
	if v, ok := aruo.mutation.Description(); ok {
		if err := authrole.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "AuthRole.description": %w`, err)}
		}
	}
	return nil
}

func (aruo *AuthRoleUpdateOne) sqlSave(ctx context.Context) (_node *AuthRole, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   authrole.Table,
			Columns: authrole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: authrole.FieldID,
			},
		},
	}
	id, ok := aruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AuthRole.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, authrole.FieldID)
		for _, f := range fields {
			if !authrole.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != authrole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authrole.FieldUpdatedAt,
		})
	}
	if value, ok := aruo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: authrole.FieldDeletedAt,
		})
	}
	if aruo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: authrole.FieldDeletedAt,
		})
	}
	if value, ok := aruo.mutation.AuthRole(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: authrole.FieldAuthRole,
		})
	}
	if value, ok := aruo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authrole.FieldDescription,
		})
	}
	if aruo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: authrole.FieldDescription,
		})
	}
	if aruo.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   authrole.AccountsTable,
			Columns: authrole.AccountsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: account.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.RemovedAccountsIDs(); len(nodes) > 0 && !aruo.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   authrole.AccountsTable,
			Columns: authrole.AccountsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   authrole.AccountsTable,
			Columns: authrole.AccountsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aruo.mutation.StaffAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   authrole.StaffAccountsTable,
			Columns: authrole.StaffAccountsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: staffaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.RemovedStaffAccountsIDs(); len(nodes) > 0 && !aruo.mutation.StaffAccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   authrole.StaffAccountsTable,
			Columns: authrole.StaffAccountsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: staffaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.StaffAccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   authrole.StaffAccountsTable,
			Columns: authrole.StaffAccountsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: staffaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AuthRole{config: aruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
