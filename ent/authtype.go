// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/chenningg/hermitboard-api/ent/authtype"
	"github.com/chenningg/hermitboard-api/pulid"
)

// AuthType is the model entity for the AuthType schema.
type AuthType struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.PULID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Value holds the value of the "value" field.
	Value authtype.Value `json:"value,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuthType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case authtype.FieldID:
			values[i] = new(pulid.PULID)
		case authtype.FieldValue, authtype.FieldDescription:
			values[i] = new(sql.NullString)
		case authtype.FieldCreatedAt, authtype.FieldUpdatedAt, authtype.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AuthType", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuthType fields.
func (at *AuthType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case authtype.FieldID:
			if value, ok := values[i].(*pulid.PULID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				at.ID = *value
			}
		case authtype.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				at.CreatedAt = value.Time
			}
		case authtype.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				at.UpdatedAt = value.Time
			}
		case authtype.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				at.DeletedAt = new(time.Time)
				*at.DeletedAt = value.Time
			}
		case authtype.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				at.Value = authtype.Value(value.String)
			}
		case authtype.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				at.Description = new(string)
				*at.Description = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AuthType.
// Note that you need to call AuthType.Unwrap() before calling this method if this AuthType
// was returned from a transaction, and the transaction was committed or rolled back.
func (at *AuthType) Update() *AuthTypeUpdateOne {
	return (&AuthTypeClient{config: at.config}).UpdateOne(at)
}

// Unwrap unwraps the AuthType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (at *AuthType) Unwrap() *AuthType {
	_tx, ok := at.config.driver.(*txDriver)
	if !ok {
		panic("ent: AuthType is not a transactional entity")
	}
	at.config.driver = _tx.drv
	return at
}

// String implements the fmt.Stringer.
func (at *AuthType) String() string {
	var builder strings.Builder
	builder.WriteString("AuthType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", at.ID))
	builder.WriteString("created_at=")
	builder.WriteString(at.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(at.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := at.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(fmt.Sprintf("%v", at.Value))
	builder.WriteString(", ")
	if v := at.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// AuthTypes is a parsable slice of AuthType.
type AuthTypes []*AuthType

func (at AuthTypes) config(cfg config) {
	for _i := range at {
		at[_i].config = cfg
	}
}
