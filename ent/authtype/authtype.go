// Code generated by ent, DO NOT EDIT.

package authtype

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/chenningg/hermitboard-api/pulid"
)

const (
	// Label holds the string label denoting the authtype type in the database.
	Label = "auth_type"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldAuthType holds the string denoting the auth_type field in the database.
	FieldAuthType = "auth_type"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// EdgeAccount holds the string denoting the account edge name in mutations.
	EdgeAccount = "account"
	// EdgeStaffAccount holds the string denoting the staff_account edge name in mutations.
	EdgeStaffAccount = "staff_account"
	// Table holds the table name of the authtype in the database.
	Table = "auth_types"
	// AccountTable is the table that holds the account relation/edge.
	AccountTable = "accounts"
	// AccountInverseTable is the table name for the Account entity.
	// It exists in this package in order to avoid circular dependency with the "account" package.
	AccountInverseTable = "accounts"
	// AccountColumn is the table column denoting the account relation/edge.
	AccountColumn = "auth_type_id"
	// StaffAccountTable is the table that holds the staff_account relation/edge.
	StaffAccountTable = "staff_accounts"
	// StaffAccountInverseTable is the table name for the StaffAccount entity.
	// It exists in this package in order to avoid circular dependency with the "staffaccount" package.
	StaffAccountInverseTable = "staff_accounts"
	// StaffAccountColumn is the table column denoting the staff_account relation/edge.
	StaffAccountColumn = "auth_type_id"
)

// Columns holds all SQL columns for authtype fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldAuthType,
	FieldDescription,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// UpdateDefaultDeletedAt holds the default value on update for the "deleted_at" field.
	UpdateDefaultDeletedAt func() time.Time
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.PULID
)

// AuthType defines the type for the "auth_type" enum field.
type AuthType string

// AuthTypeLocal is the default value of the AuthType enum.
const DefaultAuthType = AuthTypeLocal

// AuthType values.
const (
	AuthTypeLocal    AuthType = "LOCAL"
	AuthTypeGoogle   AuthType = "GOOGLE"
	AuthTypeApple    AuthType = "APPLE"
	AuthTypeFacebook AuthType = "FACEBOOK"
)

func (at AuthType) String() string {
	return string(at)
}

// AuthTypeValidator is a validator for the "auth_type" field enum values. It is called by the builders before save.
func AuthTypeValidator(at AuthType) error {
	switch at {
	case AuthTypeLocal, AuthTypeGoogle, AuthTypeApple, AuthTypeFacebook:
		return nil
	default:
		return fmt.Errorf("authtype: invalid enum value for auth_type field: %q", at)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (e AuthType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *AuthType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = AuthType(str)
	if err := AuthTypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid AuthType", str)
	}
	return nil
}
