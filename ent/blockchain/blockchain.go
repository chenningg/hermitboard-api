// Code generated by ent, DO NOT EDIT.

package blockchain

import (
	"time"

	"github.com/chenningg/hermitboard-api/ent/schema/pulid"
)

const (
	// Label holds the string label denoting the blockchain type in the database.
	Label = "blockchain"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSymbol holds the string denoting the symbol field in the database.
	FieldSymbol = "symbol"
	// FieldIcon holds the string denoting the icon field in the database.
	FieldIcon = "icon"
	// FieldChainID holds the string denoting the chain_id field in the database.
	FieldChainID = "chain_id"
	// EdgeCryptocurrencies holds the string denoting the cryptocurrencies edge name in mutations.
	EdgeCryptocurrencies = "cryptocurrencies"
	// EdgeBlockchainCryptocurrencies holds the string denoting the blockchain_cryptocurrencies edge name in mutations.
	EdgeBlockchainCryptocurrencies = "blockchain_cryptocurrencies"
	// Table holds the table name of the blockchain in the database.
	Table = "blockchains"
	// CryptocurrenciesTable is the table that holds the cryptocurrencies relation/edge. The primary key declared below.
	CryptocurrenciesTable = "blockchain_cryptocurrencies"
	// CryptocurrenciesInverseTable is the table name for the Cryptocurrency entity.
	// It exists in this package in order to avoid circular dependency with the "cryptocurrency" package.
	CryptocurrenciesInverseTable = "cryptocurrencies"
	// BlockchainCryptocurrenciesTable is the table that holds the blockchain_cryptocurrencies relation/edge.
	BlockchainCryptocurrenciesTable = "blockchain_cryptocurrencies"
	// BlockchainCryptocurrenciesInverseTable is the table name for the BlockchainCryptocurrency entity.
	// It exists in this package in order to avoid circular dependency with the "blockchaincryptocurrency" package.
	BlockchainCryptocurrenciesInverseTable = "blockchain_cryptocurrencies"
	// BlockchainCryptocurrenciesColumn is the table column denoting the blockchain_cryptocurrencies relation/edge.
	BlockchainCryptocurrenciesColumn = "blockchain_id"
)

// Columns holds all SQL columns for blockchain fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldName,
	FieldSymbol,
	FieldIcon,
	FieldChainID,
}

var (
	// CryptocurrenciesPrimaryKey and CryptocurrenciesColumn2 are the table columns denoting the
	// primary key for the cryptocurrencies relation (M2M).
	CryptocurrenciesPrimaryKey = []string{"blockchain_id", "cryptocurrency_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// UpdateDefaultDeletedAt holds the default value on update for the "deleted_at" field.
	UpdateDefaultDeletedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// SymbolValidator is a validator for the "symbol" field. It is called by the builders before save.
	SymbolValidator func(string) error
	// IconValidator is a validator for the "icon" field. It is called by the builders before save.
	IconValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.PULID
)
