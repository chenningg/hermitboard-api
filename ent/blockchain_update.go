// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chenningg/hermitboard-api/ent/blockchain"
	"github.com/chenningg/hermitboard-api/ent/blockchaincryptocurrency"
	"github.com/chenningg/hermitboard-api/ent/cryptocurrency"
	"github.com/chenningg/hermitboard-api/ent/predicate"
	"github.com/chenningg/hermitboard-api/pulid"
)

// BlockchainUpdate is the builder for updating Blockchain entities.
type BlockchainUpdate struct {
	config
	hooks    []Hook
	mutation *BlockchainMutation
}

// Where appends a list predicates to the BlockchainUpdate builder.
func (bu *BlockchainUpdate) Where(ps ...predicate.Blockchain) *BlockchainUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BlockchainUpdate) SetUpdatedAt(t time.Time) *BlockchainUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// SetDeletedAt sets the "deleted_at" field.
func (bu *BlockchainUpdate) SetDeletedAt(t time.Time) *BlockchainUpdate {
	bu.mutation.SetDeletedAt(t)
	return bu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bu *BlockchainUpdate) ClearDeletedAt() *BlockchainUpdate {
	bu.mutation.ClearDeletedAt()
	return bu
}

// SetName sets the "name" field.
func (bu *BlockchainUpdate) SetName(s string) *BlockchainUpdate {
	bu.mutation.SetName(s)
	return bu
}

// SetSymbol sets the "symbol" field.
func (bu *BlockchainUpdate) SetSymbol(s string) *BlockchainUpdate {
	bu.mutation.SetSymbol(s)
	return bu
}

// SetIcon sets the "icon" field.
func (bu *BlockchainUpdate) SetIcon(s string) *BlockchainUpdate {
	bu.mutation.SetIcon(s)
	return bu
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (bu *BlockchainUpdate) SetNillableIcon(s *string) *BlockchainUpdate {
	if s != nil {
		bu.SetIcon(*s)
	}
	return bu
}

// ClearIcon clears the value of the "icon" field.
func (bu *BlockchainUpdate) ClearIcon() *BlockchainUpdate {
	bu.mutation.ClearIcon()
	return bu
}

// SetChainID sets the "chain_id" field.
func (bu *BlockchainUpdate) SetChainID(i int64) *BlockchainUpdate {
	bu.mutation.ResetChainID()
	bu.mutation.SetChainID(i)
	return bu
}

// SetNillableChainID sets the "chain_id" field if the given value is not nil.
func (bu *BlockchainUpdate) SetNillableChainID(i *int64) *BlockchainUpdate {
	if i != nil {
		bu.SetChainID(*i)
	}
	return bu
}

// AddChainID adds i to the "chain_id" field.
func (bu *BlockchainUpdate) AddChainID(i int64) *BlockchainUpdate {
	bu.mutation.AddChainID(i)
	return bu
}

// ClearChainID clears the value of the "chain_id" field.
func (bu *BlockchainUpdate) ClearChainID() *BlockchainUpdate {
	bu.mutation.ClearChainID()
	return bu
}

// AddCryptocurrencyIDs adds the "cryptocurrencies" edge to the Cryptocurrency entity by IDs.
func (bu *BlockchainUpdate) AddCryptocurrencyIDs(ids ...pulid.PULID) *BlockchainUpdate {
	bu.mutation.AddCryptocurrencyIDs(ids...)
	return bu
}

// AddCryptocurrencies adds the "cryptocurrencies" edges to the Cryptocurrency entity.
func (bu *BlockchainUpdate) AddCryptocurrencies(c ...*Cryptocurrency) *BlockchainUpdate {
	ids := make([]pulid.PULID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bu.AddCryptocurrencyIDs(ids...)
}

// AddBlockchainCryptocurrencyIDs adds the "blockchain_cryptocurrencies" edge to the BlockchainCryptocurrency entity by IDs.
func (bu *BlockchainUpdate) AddBlockchainCryptocurrencyIDs(ids ...pulid.PULID) *BlockchainUpdate {
	bu.mutation.AddBlockchainCryptocurrencyIDs(ids...)
	return bu
}

// AddBlockchainCryptocurrencies adds the "blockchain_cryptocurrencies" edges to the BlockchainCryptocurrency entity.
func (bu *BlockchainUpdate) AddBlockchainCryptocurrencies(b ...*BlockchainCryptocurrency) *BlockchainUpdate {
	ids := make([]pulid.PULID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.AddBlockchainCryptocurrencyIDs(ids...)
}

// Mutation returns the BlockchainMutation object of the builder.
func (bu *BlockchainUpdate) Mutation() *BlockchainMutation {
	return bu.mutation
}

// ClearCryptocurrencies clears all "cryptocurrencies" edges to the Cryptocurrency entity.
func (bu *BlockchainUpdate) ClearCryptocurrencies() *BlockchainUpdate {
	bu.mutation.ClearCryptocurrencies()
	return bu
}

// RemoveCryptocurrencyIDs removes the "cryptocurrencies" edge to Cryptocurrency entities by IDs.
func (bu *BlockchainUpdate) RemoveCryptocurrencyIDs(ids ...pulid.PULID) *BlockchainUpdate {
	bu.mutation.RemoveCryptocurrencyIDs(ids...)
	return bu
}

// RemoveCryptocurrencies removes "cryptocurrencies" edges to Cryptocurrency entities.
func (bu *BlockchainUpdate) RemoveCryptocurrencies(c ...*Cryptocurrency) *BlockchainUpdate {
	ids := make([]pulid.PULID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bu.RemoveCryptocurrencyIDs(ids...)
}

// ClearBlockchainCryptocurrencies clears all "blockchain_cryptocurrencies" edges to the BlockchainCryptocurrency entity.
func (bu *BlockchainUpdate) ClearBlockchainCryptocurrencies() *BlockchainUpdate {
	bu.mutation.ClearBlockchainCryptocurrencies()
	return bu
}

// RemoveBlockchainCryptocurrencyIDs removes the "blockchain_cryptocurrencies" edge to BlockchainCryptocurrency entities by IDs.
func (bu *BlockchainUpdate) RemoveBlockchainCryptocurrencyIDs(ids ...pulid.PULID) *BlockchainUpdate {
	bu.mutation.RemoveBlockchainCryptocurrencyIDs(ids...)
	return bu
}

// RemoveBlockchainCryptocurrencies removes "blockchain_cryptocurrencies" edges to BlockchainCryptocurrency entities.
func (bu *BlockchainUpdate) RemoveBlockchainCryptocurrencies(b ...*BlockchainCryptocurrency) *BlockchainUpdate {
	ids := make([]pulid.PULID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.RemoveBlockchainCryptocurrencyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BlockchainUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	bu.defaults()
	if len(bu.hooks) == 0 {
		if err = bu.check(); err != nil {
			return 0, err
		}
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BlockchainMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bu.check(); err != nil {
				return 0, err
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			if bu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BlockchainUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BlockchainUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BlockchainUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BlockchainUpdate) defaults() {
	if _, ok := bu.mutation.UpdatedAt(); !ok {
		v := blockchain.UpdateDefaultUpdatedAt()
		bu.mutation.SetUpdatedAt(v)
	}
	if _, ok := bu.mutation.DeletedAt(); !ok && !bu.mutation.DeletedAtCleared() {
		v := blockchain.UpdateDefaultDeletedAt()
		bu.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BlockchainUpdate) check() error {
	if v, ok := bu.mutation.Name(); ok {
		if err := blockchain.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Blockchain.name": %w`, err)}
		}
	}
	if v, ok := bu.mutation.Symbol(); ok {
		if err := blockchain.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "Blockchain.symbol": %w`, err)}
		}
	}
	if v, ok := bu.mutation.Icon(); ok {
		if err := blockchain.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf(`ent: validator failed for field "Blockchain.icon": %w`, err)}
		}
	}
	return nil
}

func (bu *BlockchainUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   blockchain.Table,
			Columns: blockchain.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: blockchain.FieldID,
			},
		},
	}
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: blockchain.FieldUpdatedAt,
		})
	}
	if value, ok := bu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: blockchain.FieldDeletedAt,
		})
	}
	if bu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: blockchain.FieldDeletedAt,
		})
	}
	if value, ok := bu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blockchain.FieldName,
		})
	}
	if value, ok := bu.mutation.Symbol(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blockchain.FieldSymbol,
		})
	}
	if value, ok := bu.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blockchain.FieldIcon,
		})
	}
	if bu.mutation.IconCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: blockchain.FieldIcon,
		})
	}
	if value, ok := bu.mutation.ChainID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: blockchain.FieldChainID,
		})
	}
	if value, ok := bu.mutation.AddedChainID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: blockchain.FieldChainID,
		})
	}
	if bu.mutation.ChainIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: blockchain.FieldChainID,
		})
	}
	if bu.mutation.CryptocurrenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   blockchain.CryptocurrenciesTable,
			Columns: blockchain.CryptocurrenciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: cryptocurrency.FieldID,
				},
			},
		}
		createE := &BlockchainCryptocurrencyCreate{config: bu.config, mutation: newBlockchainCryptocurrencyMutation(bu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedCryptocurrenciesIDs(); len(nodes) > 0 && !bu.mutation.CryptocurrenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   blockchain.CryptocurrenciesTable,
			Columns: blockchain.CryptocurrenciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: cryptocurrency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &BlockchainCryptocurrencyCreate{config: bu.config, mutation: newBlockchainCryptocurrencyMutation(bu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.CryptocurrenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   blockchain.CryptocurrenciesTable,
			Columns: blockchain.CryptocurrenciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: cryptocurrency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &BlockchainCryptocurrencyCreate{config: bu.config, mutation: newBlockchainCryptocurrencyMutation(bu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.BlockchainCryptocurrenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   blockchain.BlockchainCryptocurrenciesTable,
			Columns: []string{blockchain.BlockchainCryptocurrenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: blockchaincryptocurrency.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedBlockchainCryptocurrenciesIDs(); len(nodes) > 0 && !bu.mutation.BlockchainCryptocurrenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   blockchain.BlockchainCryptocurrenciesTable,
			Columns: []string{blockchain.BlockchainCryptocurrenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: blockchaincryptocurrency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.BlockchainCryptocurrenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   blockchain.BlockchainCryptocurrenciesTable,
			Columns: []string{blockchain.BlockchainCryptocurrenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: blockchaincryptocurrency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blockchain.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// BlockchainUpdateOne is the builder for updating a single Blockchain entity.
type BlockchainUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlockchainMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BlockchainUpdateOne) SetUpdatedAt(t time.Time) *BlockchainUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// SetDeletedAt sets the "deleted_at" field.
func (buo *BlockchainUpdateOne) SetDeletedAt(t time.Time) *BlockchainUpdateOne {
	buo.mutation.SetDeletedAt(t)
	return buo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (buo *BlockchainUpdateOne) ClearDeletedAt() *BlockchainUpdateOne {
	buo.mutation.ClearDeletedAt()
	return buo
}

// SetName sets the "name" field.
func (buo *BlockchainUpdateOne) SetName(s string) *BlockchainUpdateOne {
	buo.mutation.SetName(s)
	return buo
}

// SetSymbol sets the "symbol" field.
func (buo *BlockchainUpdateOne) SetSymbol(s string) *BlockchainUpdateOne {
	buo.mutation.SetSymbol(s)
	return buo
}

// SetIcon sets the "icon" field.
func (buo *BlockchainUpdateOne) SetIcon(s string) *BlockchainUpdateOne {
	buo.mutation.SetIcon(s)
	return buo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (buo *BlockchainUpdateOne) SetNillableIcon(s *string) *BlockchainUpdateOne {
	if s != nil {
		buo.SetIcon(*s)
	}
	return buo
}

// ClearIcon clears the value of the "icon" field.
func (buo *BlockchainUpdateOne) ClearIcon() *BlockchainUpdateOne {
	buo.mutation.ClearIcon()
	return buo
}

// SetChainID sets the "chain_id" field.
func (buo *BlockchainUpdateOne) SetChainID(i int64) *BlockchainUpdateOne {
	buo.mutation.ResetChainID()
	buo.mutation.SetChainID(i)
	return buo
}

// SetNillableChainID sets the "chain_id" field if the given value is not nil.
func (buo *BlockchainUpdateOne) SetNillableChainID(i *int64) *BlockchainUpdateOne {
	if i != nil {
		buo.SetChainID(*i)
	}
	return buo
}

// AddChainID adds i to the "chain_id" field.
func (buo *BlockchainUpdateOne) AddChainID(i int64) *BlockchainUpdateOne {
	buo.mutation.AddChainID(i)
	return buo
}

// ClearChainID clears the value of the "chain_id" field.
func (buo *BlockchainUpdateOne) ClearChainID() *BlockchainUpdateOne {
	buo.mutation.ClearChainID()
	return buo
}

// AddCryptocurrencyIDs adds the "cryptocurrencies" edge to the Cryptocurrency entity by IDs.
func (buo *BlockchainUpdateOne) AddCryptocurrencyIDs(ids ...pulid.PULID) *BlockchainUpdateOne {
	buo.mutation.AddCryptocurrencyIDs(ids...)
	return buo
}

// AddCryptocurrencies adds the "cryptocurrencies" edges to the Cryptocurrency entity.
func (buo *BlockchainUpdateOne) AddCryptocurrencies(c ...*Cryptocurrency) *BlockchainUpdateOne {
	ids := make([]pulid.PULID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return buo.AddCryptocurrencyIDs(ids...)
}

// AddBlockchainCryptocurrencyIDs adds the "blockchain_cryptocurrencies" edge to the BlockchainCryptocurrency entity by IDs.
func (buo *BlockchainUpdateOne) AddBlockchainCryptocurrencyIDs(ids ...pulid.PULID) *BlockchainUpdateOne {
	buo.mutation.AddBlockchainCryptocurrencyIDs(ids...)
	return buo
}

// AddBlockchainCryptocurrencies adds the "blockchain_cryptocurrencies" edges to the BlockchainCryptocurrency entity.
func (buo *BlockchainUpdateOne) AddBlockchainCryptocurrencies(b ...*BlockchainCryptocurrency) *BlockchainUpdateOne {
	ids := make([]pulid.PULID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.AddBlockchainCryptocurrencyIDs(ids...)
}

// Mutation returns the BlockchainMutation object of the builder.
func (buo *BlockchainUpdateOne) Mutation() *BlockchainMutation {
	return buo.mutation
}

// ClearCryptocurrencies clears all "cryptocurrencies" edges to the Cryptocurrency entity.
func (buo *BlockchainUpdateOne) ClearCryptocurrencies() *BlockchainUpdateOne {
	buo.mutation.ClearCryptocurrencies()
	return buo
}

// RemoveCryptocurrencyIDs removes the "cryptocurrencies" edge to Cryptocurrency entities by IDs.
func (buo *BlockchainUpdateOne) RemoveCryptocurrencyIDs(ids ...pulid.PULID) *BlockchainUpdateOne {
	buo.mutation.RemoveCryptocurrencyIDs(ids...)
	return buo
}

// RemoveCryptocurrencies removes "cryptocurrencies" edges to Cryptocurrency entities.
func (buo *BlockchainUpdateOne) RemoveCryptocurrencies(c ...*Cryptocurrency) *BlockchainUpdateOne {
	ids := make([]pulid.PULID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return buo.RemoveCryptocurrencyIDs(ids...)
}

// ClearBlockchainCryptocurrencies clears all "blockchain_cryptocurrencies" edges to the BlockchainCryptocurrency entity.
func (buo *BlockchainUpdateOne) ClearBlockchainCryptocurrencies() *BlockchainUpdateOne {
	buo.mutation.ClearBlockchainCryptocurrencies()
	return buo
}

// RemoveBlockchainCryptocurrencyIDs removes the "blockchain_cryptocurrencies" edge to BlockchainCryptocurrency entities by IDs.
func (buo *BlockchainUpdateOne) RemoveBlockchainCryptocurrencyIDs(ids ...pulid.PULID) *BlockchainUpdateOne {
	buo.mutation.RemoveBlockchainCryptocurrencyIDs(ids...)
	return buo
}

// RemoveBlockchainCryptocurrencies removes "blockchain_cryptocurrencies" edges to BlockchainCryptocurrency entities.
func (buo *BlockchainUpdateOne) RemoveBlockchainCryptocurrencies(b ...*BlockchainCryptocurrency) *BlockchainUpdateOne {
	ids := make([]pulid.PULID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.RemoveBlockchainCryptocurrencyIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BlockchainUpdateOne) Select(field string, fields ...string) *BlockchainUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Blockchain entity.
func (buo *BlockchainUpdateOne) Save(ctx context.Context) (*Blockchain, error) {
	var (
		err  error
		node *Blockchain
	)
	buo.defaults()
	if len(buo.hooks) == 0 {
		if err = buo.check(); err != nil {
			return nil, err
		}
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BlockchainMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = buo.check(); err != nil {
				return nil, err
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			if buo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = buo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, buo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Blockchain)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from BlockchainMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BlockchainUpdateOne) SaveX(ctx context.Context) *Blockchain {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BlockchainUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BlockchainUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BlockchainUpdateOne) defaults() {
	if _, ok := buo.mutation.UpdatedAt(); !ok {
		v := blockchain.UpdateDefaultUpdatedAt()
		buo.mutation.SetUpdatedAt(v)
	}
	if _, ok := buo.mutation.DeletedAt(); !ok && !buo.mutation.DeletedAtCleared() {
		v := blockchain.UpdateDefaultDeletedAt()
		buo.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BlockchainUpdateOne) check() error {
	if v, ok := buo.mutation.Name(); ok {
		if err := blockchain.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Blockchain.name": %w`, err)}
		}
	}
	if v, ok := buo.mutation.Symbol(); ok {
		if err := blockchain.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "Blockchain.symbol": %w`, err)}
		}
	}
	if v, ok := buo.mutation.Icon(); ok {
		if err := blockchain.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf(`ent: validator failed for field "Blockchain.icon": %w`, err)}
		}
	}
	return nil
}

func (buo *BlockchainUpdateOne) sqlSave(ctx context.Context) (_node *Blockchain, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   blockchain.Table,
			Columns: blockchain.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: blockchain.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Blockchain.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blockchain.FieldID)
		for _, f := range fields {
			if !blockchain.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blockchain.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: blockchain.FieldUpdatedAt,
		})
	}
	if value, ok := buo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: blockchain.FieldDeletedAt,
		})
	}
	if buo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: blockchain.FieldDeletedAt,
		})
	}
	if value, ok := buo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blockchain.FieldName,
		})
	}
	if value, ok := buo.mutation.Symbol(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blockchain.FieldSymbol,
		})
	}
	if value, ok := buo.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blockchain.FieldIcon,
		})
	}
	if buo.mutation.IconCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: blockchain.FieldIcon,
		})
	}
	if value, ok := buo.mutation.ChainID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: blockchain.FieldChainID,
		})
	}
	if value, ok := buo.mutation.AddedChainID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: blockchain.FieldChainID,
		})
	}
	if buo.mutation.ChainIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: blockchain.FieldChainID,
		})
	}
	if buo.mutation.CryptocurrenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   blockchain.CryptocurrenciesTable,
			Columns: blockchain.CryptocurrenciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: cryptocurrency.FieldID,
				},
			},
		}
		createE := &BlockchainCryptocurrencyCreate{config: buo.config, mutation: newBlockchainCryptocurrencyMutation(buo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedCryptocurrenciesIDs(); len(nodes) > 0 && !buo.mutation.CryptocurrenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   blockchain.CryptocurrenciesTable,
			Columns: blockchain.CryptocurrenciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: cryptocurrency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &BlockchainCryptocurrencyCreate{config: buo.config, mutation: newBlockchainCryptocurrencyMutation(buo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.CryptocurrenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   blockchain.CryptocurrenciesTable,
			Columns: blockchain.CryptocurrenciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: cryptocurrency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &BlockchainCryptocurrencyCreate{config: buo.config, mutation: newBlockchainCryptocurrencyMutation(buo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.BlockchainCryptocurrenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   blockchain.BlockchainCryptocurrenciesTable,
			Columns: []string{blockchain.BlockchainCryptocurrenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: blockchaincryptocurrency.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedBlockchainCryptocurrenciesIDs(); len(nodes) > 0 && !buo.mutation.BlockchainCryptocurrenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   blockchain.BlockchainCryptocurrenciesTable,
			Columns: []string{blockchain.BlockchainCryptocurrenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: blockchaincryptocurrency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.BlockchainCryptocurrenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   blockchain.BlockchainCryptocurrenciesTable,
			Columns: []string{blockchain.BlockchainCryptocurrenciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: blockchaincryptocurrency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Blockchain{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blockchain.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
