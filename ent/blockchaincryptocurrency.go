// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/chenningg/hermitboard-api/ent/blockchain"
	"github.com/chenningg/hermitboard-api/ent/blockchaincryptocurrency"
	"github.com/chenningg/hermitboard-api/ent/cryptocurrency"
	"github.com/chenningg/hermitboard-api/pulid"
)

// BlockchainCryptocurrency is the model entity for the BlockchainCryptocurrency schema.
type BlockchainCryptocurrency struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.PULID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// BlockchainID holds the value of the "blockchain_id" field.
	BlockchainID pulid.PULID `json:"blockchain_id,omitempty"`
	// CryptocurrencyID holds the value of the "cryptocurrency_id" field.
	CryptocurrencyID pulid.PULID `json:"cryptocurrency_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BlockchainCryptocurrencyQuery when eager-loading is set.
	Edges BlockchainCryptocurrencyEdges `json:"edges"`
}

// BlockchainCryptocurrencyEdges holds the relations/edges for other nodes in the graph.
type BlockchainCryptocurrencyEdges struct {
	// Blockchain holds the value of the blockchain edge.
	Blockchain *Blockchain `json:"blockchain,omitempty"`
	// Cryptocurrency holds the value of the cryptocurrency edge.
	Cryptocurrency *Cryptocurrency `json:"cryptocurrency,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// BlockchainOrErr returns the Blockchain value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BlockchainCryptocurrencyEdges) BlockchainOrErr() (*Blockchain, error) {
	if e.loadedTypes[0] {
		if e.Blockchain == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: blockchain.Label}
		}
		return e.Blockchain, nil
	}
	return nil, &NotLoadedError{edge: "blockchain"}
}

// CryptocurrencyOrErr returns the Cryptocurrency value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BlockchainCryptocurrencyEdges) CryptocurrencyOrErr() (*Cryptocurrency, error) {
	if e.loadedTypes[1] {
		if e.Cryptocurrency == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: cryptocurrency.Label}
		}
		return e.Cryptocurrency, nil
	}
	return nil, &NotLoadedError{edge: "cryptocurrency"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BlockchainCryptocurrency) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case blockchaincryptocurrency.FieldID, blockchaincryptocurrency.FieldBlockchainID, blockchaincryptocurrency.FieldCryptocurrencyID:
			values[i] = new(pulid.PULID)
		case blockchaincryptocurrency.FieldCreatedAt, blockchaincryptocurrency.FieldUpdatedAt, blockchaincryptocurrency.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type BlockchainCryptocurrency", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BlockchainCryptocurrency fields.
func (bc *BlockchainCryptocurrency) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case blockchaincryptocurrency.FieldID:
			if value, ok := values[i].(*pulid.PULID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				bc.ID = *value
			}
		case blockchaincryptocurrency.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bc.CreatedAt = value.Time
			}
		case blockchaincryptocurrency.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bc.UpdatedAt = value.Time
			}
		case blockchaincryptocurrency.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				bc.DeletedAt = new(time.Time)
				*bc.DeletedAt = value.Time
			}
		case blockchaincryptocurrency.FieldBlockchainID:
			if value, ok := values[i].(*pulid.PULID); !ok {
				return fmt.Errorf("unexpected type %T for field blockchain_id", values[i])
			} else if value != nil {
				bc.BlockchainID = *value
			}
		case blockchaincryptocurrency.FieldCryptocurrencyID:
			if value, ok := values[i].(*pulid.PULID); !ok {
				return fmt.Errorf("unexpected type %T for field cryptocurrency_id", values[i])
			} else if value != nil {
				bc.CryptocurrencyID = *value
			}
		}
	}
	return nil
}

// QueryBlockchain queries the "blockchain" edge of the BlockchainCryptocurrency entity.
func (bc *BlockchainCryptocurrency) QueryBlockchain() *BlockchainQuery {
	return (&BlockchainCryptocurrencyClient{config: bc.config}).QueryBlockchain(bc)
}

// QueryCryptocurrency queries the "cryptocurrency" edge of the BlockchainCryptocurrency entity.
func (bc *BlockchainCryptocurrency) QueryCryptocurrency() *CryptocurrencyQuery {
	return (&BlockchainCryptocurrencyClient{config: bc.config}).QueryCryptocurrency(bc)
}

// Update returns a builder for updating this BlockchainCryptocurrency.
// Note that you need to call BlockchainCryptocurrency.Unwrap() before calling this method if this BlockchainCryptocurrency
// was returned from a transaction, and the transaction was committed or rolled back.
func (bc *BlockchainCryptocurrency) Update() *BlockchainCryptocurrencyUpdateOne {
	return (&BlockchainCryptocurrencyClient{config: bc.config}).UpdateOne(bc)
}

// Unwrap unwraps the BlockchainCryptocurrency entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bc *BlockchainCryptocurrency) Unwrap() *BlockchainCryptocurrency {
	_tx, ok := bc.config.driver.(*txDriver)
	if !ok {
		panic("ent: BlockchainCryptocurrency is not a transactional entity")
	}
	bc.config.driver = _tx.drv
	return bc
}

// String implements the fmt.Stringer.
func (bc *BlockchainCryptocurrency) String() string {
	var builder strings.Builder
	builder.WriteString("BlockchainCryptocurrency(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bc.ID))
	builder.WriteString("created_at=")
	builder.WriteString(bc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(bc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := bc.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("blockchain_id=")
	builder.WriteString(fmt.Sprintf("%v", bc.BlockchainID))
	builder.WriteString(", ")
	builder.WriteString("cryptocurrency_id=")
	builder.WriteString(fmt.Sprintf("%v", bc.CryptocurrencyID))
	builder.WriteByte(')')
	return builder.String()
}

// BlockchainCryptocurrencies is a parsable slice of BlockchainCryptocurrency.
type BlockchainCryptocurrencies []*BlockchainCryptocurrency

func (bc BlockchainCryptocurrencies) config(cfg config) {
	for _i := range bc {
		bc[_i].config = cfg
	}
}
