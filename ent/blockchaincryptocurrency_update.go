// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chenningg/hermitboard-api/ent/blockchain"
	"github.com/chenningg/hermitboard-api/ent/blockchaincryptocurrency"
	"github.com/chenningg/hermitboard-api/ent/cryptocurrency"
	"github.com/chenningg/hermitboard-api/ent/predicate"
	"github.com/chenningg/hermitboard-api/ent/schema/pulid"
)

// BlockchainCryptocurrencyUpdate is the builder for updating BlockchainCryptocurrency entities.
type BlockchainCryptocurrencyUpdate struct {
	config
	hooks    []Hook
	mutation *BlockchainCryptocurrencyMutation
}

// Where appends a list predicates to the BlockchainCryptocurrencyUpdate builder.
func (bcu *BlockchainCryptocurrencyUpdate) Where(ps ...predicate.BlockchainCryptocurrency) *BlockchainCryptocurrencyUpdate {
	bcu.mutation.Where(ps...)
	return bcu
}

// SetUpdatedAt sets the "updated_at" field.
func (bcu *BlockchainCryptocurrencyUpdate) SetUpdatedAt(t time.Time) *BlockchainCryptocurrencyUpdate {
	bcu.mutation.SetUpdatedAt(t)
	return bcu
}

// SetDeletedAt sets the "deleted_at" field.
func (bcu *BlockchainCryptocurrencyUpdate) SetDeletedAt(t time.Time) *BlockchainCryptocurrencyUpdate {
	bcu.mutation.SetDeletedAt(t)
	return bcu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bcu *BlockchainCryptocurrencyUpdate) ClearDeletedAt() *BlockchainCryptocurrencyUpdate {
	bcu.mutation.ClearDeletedAt()
	return bcu
}

// SetBlockchainID sets the "blockchain_id" field.
func (bcu *BlockchainCryptocurrencyUpdate) SetBlockchainID(pu pulid.PULID) *BlockchainCryptocurrencyUpdate {
	bcu.mutation.SetBlockchainID(pu)
	return bcu
}

// SetCryptocurrencyID sets the "cryptocurrency_id" field.
func (bcu *BlockchainCryptocurrencyUpdate) SetCryptocurrencyID(pu pulid.PULID) *BlockchainCryptocurrencyUpdate {
	bcu.mutation.SetCryptocurrencyID(pu)
	return bcu
}

// SetBlockchain sets the "blockchain" edge to the Blockchain entity.
func (bcu *BlockchainCryptocurrencyUpdate) SetBlockchain(b *Blockchain) *BlockchainCryptocurrencyUpdate {
	return bcu.SetBlockchainID(b.ID)
}

// SetCryptocurrency sets the "cryptocurrency" edge to the Cryptocurrency entity.
func (bcu *BlockchainCryptocurrencyUpdate) SetCryptocurrency(c *Cryptocurrency) *BlockchainCryptocurrencyUpdate {
	return bcu.SetCryptocurrencyID(c.ID)
}

// Mutation returns the BlockchainCryptocurrencyMutation object of the builder.
func (bcu *BlockchainCryptocurrencyUpdate) Mutation() *BlockchainCryptocurrencyMutation {
	return bcu.mutation
}

// ClearBlockchain clears the "blockchain" edge to the Blockchain entity.
func (bcu *BlockchainCryptocurrencyUpdate) ClearBlockchain() *BlockchainCryptocurrencyUpdate {
	bcu.mutation.ClearBlockchain()
	return bcu
}

// ClearCryptocurrency clears the "cryptocurrency" edge to the Cryptocurrency entity.
func (bcu *BlockchainCryptocurrencyUpdate) ClearCryptocurrency() *BlockchainCryptocurrencyUpdate {
	bcu.mutation.ClearCryptocurrency()
	return bcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bcu *BlockchainCryptocurrencyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	bcu.defaults()
	if len(bcu.hooks) == 0 {
		if err = bcu.check(); err != nil {
			return 0, err
		}
		affected, err = bcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BlockchainCryptocurrencyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bcu.check(); err != nil {
				return 0, err
			}
			bcu.mutation = mutation
			affected, err = bcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bcu.hooks) - 1; i >= 0; i-- {
			if bcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bcu *BlockchainCryptocurrencyUpdate) SaveX(ctx context.Context) int {
	affected, err := bcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bcu *BlockchainCryptocurrencyUpdate) Exec(ctx context.Context) error {
	_, err := bcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcu *BlockchainCryptocurrencyUpdate) ExecX(ctx context.Context) {
	if err := bcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bcu *BlockchainCryptocurrencyUpdate) defaults() {
	if _, ok := bcu.mutation.UpdatedAt(); !ok {
		v := blockchaincryptocurrency.UpdateDefaultUpdatedAt()
		bcu.mutation.SetUpdatedAt(v)
	}
	if _, ok := bcu.mutation.DeletedAt(); !ok && !bcu.mutation.DeletedAtCleared() {
		v := blockchaincryptocurrency.UpdateDefaultDeletedAt()
		bcu.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bcu *BlockchainCryptocurrencyUpdate) check() error {
	if _, ok := bcu.mutation.BlockchainID(); bcu.mutation.BlockchainCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "BlockchainCryptocurrency.blockchain"`)
	}
	if _, ok := bcu.mutation.CryptocurrencyID(); bcu.mutation.CryptocurrencyCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "BlockchainCryptocurrency.cryptocurrency"`)
	}
	return nil
}

func (bcu *BlockchainCryptocurrencyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   blockchaincryptocurrency.Table,
			Columns: blockchaincryptocurrency.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: blockchaincryptocurrency.FieldID,
			},
		},
	}
	if ps := bcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bcu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: blockchaincryptocurrency.FieldUpdatedAt,
		})
	}
	if value, ok := bcu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: blockchaincryptocurrency.FieldDeletedAt,
		})
	}
	if bcu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: blockchaincryptocurrency.FieldDeletedAt,
		})
	}
	if bcu.mutation.BlockchainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   blockchaincryptocurrency.BlockchainTable,
			Columns: []string{blockchaincryptocurrency.BlockchainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: blockchain.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bcu.mutation.BlockchainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   blockchaincryptocurrency.BlockchainTable,
			Columns: []string{blockchaincryptocurrency.BlockchainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: blockchain.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bcu.mutation.CryptocurrencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   blockchaincryptocurrency.CryptocurrencyTable,
			Columns: []string{blockchaincryptocurrency.CryptocurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: cryptocurrency.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bcu.mutation.CryptocurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   blockchaincryptocurrency.CryptocurrencyTable,
			Columns: []string{blockchaincryptocurrency.CryptocurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: cryptocurrency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blockchaincryptocurrency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// BlockchainCryptocurrencyUpdateOne is the builder for updating a single BlockchainCryptocurrency entity.
type BlockchainCryptocurrencyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlockchainCryptocurrencyMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (bcuo *BlockchainCryptocurrencyUpdateOne) SetUpdatedAt(t time.Time) *BlockchainCryptocurrencyUpdateOne {
	bcuo.mutation.SetUpdatedAt(t)
	return bcuo
}

// SetDeletedAt sets the "deleted_at" field.
func (bcuo *BlockchainCryptocurrencyUpdateOne) SetDeletedAt(t time.Time) *BlockchainCryptocurrencyUpdateOne {
	bcuo.mutation.SetDeletedAt(t)
	return bcuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bcuo *BlockchainCryptocurrencyUpdateOne) ClearDeletedAt() *BlockchainCryptocurrencyUpdateOne {
	bcuo.mutation.ClearDeletedAt()
	return bcuo
}

// SetBlockchainID sets the "blockchain_id" field.
func (bcuo *BlockchainCryptocurrencyUpdateOne) SetBlockchainID(pu pulid.PULID) *BlockchainCryptocurrencyUpdateOne {
	bcuo.mutation.SetBlockchainID(pu)
	return bcuo
}

// SetCryptocurrencyID sets the "cryptocurrency_id" field.
func (bcuo *BlockchainCryptocurrencyUpdateOne) SetCryptocurrencyID(pu pulid.PULID) *BlockchainCryptocurrencyUpdateOne {
	bcuo.mutation.SetCryptocurrencyID(pu)
	return bcuo
}

// SetBlockchain sets the "blockchain" edge to the Blockchain entity.
func (bcuo *BlockchainCryptocurrencyUpdateOne) SetBlockchain(b *Blockchain) *BlockchainCryptocurrencyUpdateOne {
	return bcuo.SetBlockchainID(b.ID)
}

// SetCryptocurrency sets the "cryptocurrency" edge to the Cryptocurrency entity.
func (bcuo *BlockchainCryptocurrencyUpdateOne) SetCryptocurrency(c *Cryptocurrency) *BlockchainCryptocurrencyUpdateOne {
	return bcuo.SetCryptocurrencyID(c.ID)
}

// Mutation returns the BlockchainCryptocurrencyMutation object of the builder.
func (bcuo *BlockchainCryptocurrencyUpdateOne) Mutation() *BlockchainCryptocurrencyMutation {
	return bcuo.mutation
}

// ClearBlockchain clears the "blockchain" edge to the Blockchain entity.
func (bcuo *BlockchainCryptocurrencyUpdateOne) ClearBlockchain() *BlockchainCryptocurrencyUpdateOne {
	bcuo.mutation.ClearBlockchain()
	return bcuo
}

// ClearCryptocurrency clears the "cryptocurrency" edge to the Cryptocurrency entity.
func (bcuo *BlockchainCryptocurrencyUpdateOne) ClearCryptocurrency() *BlockchainCryptocurrencyUpdateOne {
	bcuo.mutation.ClearCryptocurrency()
	return bcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bcuo *BlockchainCryptocurrencyUpdateOne) Select(field string, fields ...string) *BlockchainCryptocurrencyUpdateOne {
	bcuo.fields = append([]string{field}, fields...)
	return bcuo
}

// Save executes the query and returns the updated BlockchainCryptocurrency entity.
func (bcuo *BlockchainCryptocurrencyUpdateOne) Save(ctx context.Context) (*BlockchainCryptocurrency, error) {
	var (
		err  error
		node *BlockchainCryptocurrency
	)
	bcuo.defaults()
	if len(bcuo.hooks) == 0 {
		if err = bcuo.check(); err != nil {
			return nil, err
		}
		node, err = bcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BlockchainCryptocurrencyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bcuo.check(); err != nil {
				return nil, err
			}
			bcuo.mutation = mutation
			node, err = bcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(bcuo.hooks) - 1; i >= 0; i-- {
			if bcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bcuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, bcuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*BlockchainCryptocurrency)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from BlockchainCryptocurrencyMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (bcuo *BlockchainCryptocurrencyUpdateOne) SaveX(ctx context.Context) *BlockchainCryptocurrency {
	node, err := bcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bcuo *BlockchainCryptocurrencyUpdateOne) Exec(ctx context.Context) error {
	_, err := bcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcuo *BlockchainCryptocurrencyUpdateOne) ExecX(ctx context.Context) {
	if err := bcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bcuo *BlockchainCryptocurrencyUpdateOne) defaults() {
	if _, ok := bcuo.mutation.UpdatedAt(); !ok {
		v := blockchaincryptocurrency.UpdateDefaultUpdatedAt()
		bcuo.mutation.SetUpdatedAt(v)
	}
	if _, ok := bcuo.mutation.DeletedAt(); !ok && !bcuo.mutation.DeletedAtCleared() {
		v := blockchaincryptocurrency.UpdateDefaultDeletedAt()
		bcuo.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bcuo *BlockchainCryptocurrencyUpdateOne) check() error {
	if _, ok := bcuo.mutation.BlockchainID(); bcuo.mutation.BlockchainCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "BlockchainCryptocurrency.blockchain"`)
	}
	if _, ok := bcuo.mutation.CryptocurrencyID(); bcuo.mutation.CryptocurrencyCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "BlockchainCryptocurrency.cryptocurrency"`)
	}
	return nil
}

func (bcuo *BlockchainCryptocurrencyUpdateOne) sqlSave(ctx context.Context) (_node *BlockchainCryptocurrency, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   blockchaincryptocurrency.Table,
			Columns: blockchaincryptocurrency.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: blockchaincryptocurrency.FieldID,
			},
		},
	}
	id, ok := bcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BlockchainCryptocurrency.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blockchaincryptocurrency.FieldID)
		for _, f := range fields {
			if !blockchaincryptocurrency.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blockchaincryptocurrency.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bcuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: blockchaincryptocurrency.FieldUpdatedAt,
		})
	}
	if value, ok := bcuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: blockchaincryptocurrency.FieldDeletedAt,
		})
	}
	if bcuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: blockchaincryptocurrency.FieldDeletedAt,
		})
	}
	if bcuo.mutation.BlockchainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   blockchaincryptocurrency.BlockchainTable,
			Columns: []string{blockchaincryptocurrency.BlockchainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: blockchain.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bcuo.mutation.BlockchainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   blockchaincryptocurrency.BlockchainTable,
			Columns: []string{blockchaincryptocurrency.BlockchainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: blockchain.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bcuo.mutation.CryptocurrencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   blockchaincryptocurrency.CryptocurrencyTable,
			Columns: []string{blockchaincryptocurrency.CryptocurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: cryptocurrency.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bcuo.mutation.CryptocurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   blockchaincryptocurrency.CryptocurrencyTable,
			Columns: []string{blockchaincryptocurrency.CryptocurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: cryptocurrency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BlockchainCryptocurrency{config: bcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blockchaincryptocurrency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
