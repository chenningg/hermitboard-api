// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/chenningg/hermitboard-api/ent/asset"
	"github.com/chenningg/hermitboard-api/ent/cryptocurrency"
	"github.com/chenningg/hermitboard-api/pulid"
)

// Cryptocurrency is the model entity for the Cryptocurrency schema.
type Cryptocurrency struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.PULID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Symbol holds the value of the "symbol" field.
	Symbol string `json:"symbol,omitempty"`
	// A url to the image icon for this cryptocurrency.
	Icon *string `json:"icon,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// AssetID holds the value of the "asset_id" field.
	AssetID pulid.PULID `json:"asset_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CryptocurrencyQuery when eager-loading is set.
	Edges CryptocurrencyEdges `json:"edges"`
}

// CryptocurrencyEdges holds the relations/edges for other nodes in the graph.
type CryptocurrencyEdges struct {
	// Asset holds the value of the asset edge.
	Asset *Asset `json:"asset,omitempty"`
	// Blockchains holds the value of the blockchains edge.
	Blockchains []*Blockchain `json:"blockchains,omitempty"`
	// BlockchainCryptocurrencies holds the value of the blockchain_cryptocurrencies edge.
	BlockchainCryptocurrencies []*BlockchainCryptocurrency `json:"blockchain_cryptocurrencies,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedBlockchains                map[string][]*Blockchain
	namedBlockchainCryptocurrencies map[string][]*BlockchainCryptocurrency
}

// AssetOrErr returns the Asset value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CryptocurrencyEdges) AssetOrErr() (*Asset, error) {
	if e.loadedTypes[0] {
		if e.Asset == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: asset.Label}
		}
		return e.Asset, nil
	}
	return nil, &NotLoadedError{edge: "asset"}
}

// BlockchainsOrErr returns the Blockchains value or an error if the edge
// was not loaded in eager-loading.
func (e CryptocurrencyEdges) BlockchainsOrErr() ([]*Blockchain, error) {
	if e.loadedTypes[1] {
		return e.Blockchains, nil
	}
	return nil, &NotLoadedError{edge: "blockchains"}
}

// BlockchainCryptocurrenciesOrErr returns the BlockchainCryptocurrencies value or an error if the edge
// was not loaded in eager-loading.
func (e CryptocurrencyEdges) BlockchainCryptocurrenciesOrErr() ([]*BlockchainCryptocurrency, error) {
	if e.loadedTypes[2] {
		return e.BlockchainCryptocurrencies, nil
	}
	return nil, &NotLoadedError{edge: "blockchain_cryptocurrencies"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Cryptocurrency) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cryptocurrency.FieldID, cryptocurrency.FieldAssetID:
			values[i] = new(pulid.PULID)
		case cryptocurrency.FieldSymbol, cryptocurrency.FieldIcon, cryptocurrency.FieldName:
			values[i] = new(sql.NullString)
		case cryptocurrency.FieldCreatedAt, cryptocurrency.FieldUpdatedAt, cryptocurrency.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Cryptocurrency", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Cryptocurrency fields.
func (c *Cryptocurrency) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cryptocurrency.FieldID:
			if value, ok := values[i].(*pulid.PULID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case cryptocurrency.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case cryptocurrency.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case cryptocurrency.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				c.DeletedAt = new(time.Time)
				*c.DeletedAt = value.Time
			}
		case cryptocurrency.FieldSymbol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field symbol", values[i])
			} else if value.Valid {
				c.Symbol = value.String
			}
		case cryptocurrency.FieldIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon", values[i])
			} else if value.Valid {
				c.Icon = new(string)
				*c.Icon = value.String
			}
		case cryptocurrency.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case cryptocurrency.FieldAssetID:
			if value, ok := values[i].(*pulid.PULID); !ok {
				return fmt.Errorf("unexpected type %T for field asset_id", values[i])
			} else if value != nil {
				c.AssetID = *value
			}
		}
	}
	return nil
}

// QueryAsset queries the "asset" edge of the Cryptocurrency entity.
func (c *Cryptocurrency) QueryAsset() *AssetQuery {
	return (&CryptocurrencyClient{config: c.config}).QueryAsset(c)
}

// QueryBlockchains queries the "blockchains" edge of the Cryptocurrency entity.
func (c *Cryptocurrency) QueryBlockchains() *BlockchainQuery {
	return (&CryptocurrencyClient{config: c.config}).QueryBlockchains(c)
}

// QueryBlockchainCryptocurrencies queries the "blockchain_cryptocurrencies" edge of the Cryptocurrency entity.
func (c *Cryptocurrency) QueryBlockchainCryptocurrencies() *BlockchainCryptocurrencyQuery {
	return (&CryptocurrencyClient{config: c.config}).QueryBlockchainCryptocurrencies(c)
}

// Update returns a builder for updating this Cryptocurrency.
// Note that you need to call Cryptocurrency.Unwrap() before calling this method if this Cryptocurrency
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Cryptocurrency) Update() *CryptocurrencyUpdateOne {
	return (&CryptocurrencyClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Cryptocurrency entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Cryptocurrency) Unwrap() *Cryptocurrency {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Cryptocurrency is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Cryptocurrency) String() string {
	var builder strings.Builder
	builder.WriteString("Cryptocurrency(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := c.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("symbol=")
	builder.WriteString(c.Symbol)
	builder.WriteString(", ")
	if v := c.Icon; v != nil {
		builder.WriteString("icon=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("asset_id=")
	builder.WriteString(fmt.Sprintf("%v", c.AssetID))
	builder.WriteByte(')')
	return builder.String()
}

// NamedBlockchains returns the Blockchains named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Cryptocurrency) NamedBlockchains(name string) ([]*Blockchain, error) {
	if c.Edges.namedBlockchains == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedBlockchains[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Cryptocurrency) appendNamedBlockchains(name string, edges ...*Blockchain) {
	if c.Edges.namedBlockchains == nil {
		c.Edges.namedBlockchains = make(map[string][]*Blockchain)
	}
	if len(edges) == 0 {
		c.Edges.namedBlockchains[name] = []*Blockchain{}
	} else {
		c.Edges.namedBlockchains[name] = append(c.Edges.namedBlockchains[name], edges...)
	}
}

// NamedBlockchainCryptocurrencies returns the BlockchainCryptocurrencies named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Cryptocurrency) NamedBlockchainCryptocurrencies(name string) ([]*BlockchainCryptocurrency, error) {
	if c.Edges.namedBlockchainCryptocurrencies == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedBlockchainCryptocurrencies[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Cryptocurrency) appendNamedBlockchainCryptocurrencies(name string, edges ...*BlockchainCryptocurrency) {
	if c.Edges.namedBlockchainCryptocurrencies == nil {
		c.Edges.namedBlockchainCryptocurrencies = make(map[string][]*BlockchainCryptocurrency)
	}
	if len(edges) == 0 {
		c.Edges.namedBlockchainCryptocurrencies[name] = []*BlockchainCryptocurrency{}
	} else {
		c.Edges.namedBlockchainCryptocurrencies[name] = append(c.Edges.namedBlockchainCryptocurrencies[name], edges...)
	}
}

// Cryptocurrencies is a parsable slice of Cryptocurrency.
type Cryptocurrencies []*Cryptocurrency

func (c Cryptocurrencies) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
