// Code generated by ent, DO NOT EDIT.

package cryptocurrency

import (
	"time"

	"github.com/oklog/ulid/v2"
	ulid "github.com/oklog/ulid/v2"
)

const (
	// Label holds the string label denoting the cryptocurrency type in the database.
	Label = "cryptocurrency"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldSymbol holds the string denoting the symbol field in the database.
	FieldSymbol = "symbol"
	// FieldIcon holds the string denoting the icon field in the database.
	FieldIcon = "icon"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeAsset holds the string denoting the asset edge name in mutations.
	EdgeAsset = "asset"
	// EdgeBlockchains holds the string denoting the blockchains edge name in mutations.
	EdgeBlockchains = "blockchains"
	// Table holds the table name of the cryptocurrency in the database.
	Table = "cryptocurrencies"
	// AssetTable is the table that holds the asset relation/edge.
	AssetTable = "cryptocurrencies"
	// AssetInverseTable is the table name for the Asset entity.
	// It exists in this package in order to avoid circular dependency with the "asset" package.
	AssetInverseTable = "assets"
	// AssetColumn is the table column denoting the asset relation/edge.
	AssetColumn = "asset_cryptocurrency"
	// BlockchainsTable is the table that holds the blockchains relation/edge. The primary key declared below.
	BlockchainsTable = "blockchain_cryptocurrencies"
	// BlockchainsInverseTable is the table name for the Blockchain entity.
	// It exists in this package in order to avoid circular dependency with the "blockchain" package.
	BlockchainsInverseTable = "blockchains"
)

// Columns holds all SQL columns for cryptocurrency fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldSymbol,
	FieldIcon,
	FieldName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "cryptocurrencies"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"asset_cryptocurrency",
}

var (
	// BlockchainsPrimaryKey and BlockchainsColumn2 are the table columns denoting the
	// primary key for the blockchains relation (M2M).
	BlockchainsPrimaryKey = []string{"blockchain_id", "cryptocurrency_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// SymbolValidator is a validator for the "symbol" field. It is called by the builders before save.
	SymbolValidator func(string) error
	// IconValidator is a validator for the "icon" field. It is called by the builders before save.
	IconValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() ulid.ULID
)
