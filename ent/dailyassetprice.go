// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/chenningg/hermitboard-api/ent/asset"
	"github.com/chenningg/hermitboard-api/ent/dailyassetprice"
	"github.com/chenningg/hermitboard-api/ent/schema/pulid"
)

// DailyAssetPrice is the model entity for the DailyAssetPrice schema.
type DailyAssetPrice struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.PULID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Time holds the value of the "time" field.
	Time time.Time `json:"time,omitempty"`
	// Open holds the value of the "open" field.
	Open *float64 `json:"open,omitempty"`
	// High holds the value of the "high" field.
	High *float64 `json:"high,omitempty"`
	// Low holds the value of the "low" field.
	Low *float64 `json:"low,omitempty"`
	// Close holds the value of the "close" field.
	Close *float64 `json:"close,omitempty"`
	// AdjustedClose holds the value of the "adjusted_close" field.
	AdjustedClose float64 `json:"adjusted_close,omitempty"`
	// BaseAssetID holds the value of the "base_asset_id" field.
	BaseAssetID pulid.PULID `json:"base_asset_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DailyAssetPriceQuery when eager-loading is set.
	Edges DailyAssetPriceEdges `json:"edges"`
}

// DailyAssetPriceEdges holds the relations/edges for other nodes in the graph.
type DailyAssetPriceEdges struct {
	// BaseAsset holds the value of the base_asset edge.
	BaseAsset *Asset `json:"base_asset,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// BaseAssetOrErr returns the BaseAsset value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DailyAssetPriceEdges) BaseAssetOrErr() (*Asset, error) {
	if e.loadedTypes[0] {
		if e.BaseAsset == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: asset.Label}
		}
		return e.BaseAsset, nil
	}
	return nil, &NotLoadedError{edge: "base_asset"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DailyAssetPrice) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dailyassetprice.FieldID, dailyassetprice.FieldBaseAssetID:
			values[i] = new(pulid.PULID)
		case dailyassetprice.FieldOpen, dailyassetprice.FieldHigh, dailyassetprice.FieldLow, dailyassetprice.FieldClose, dailyassetprice.FieldAdjustedClose:
			values[i] = new(sql.NullFloat64)
		case dailyassetprice.FieldCreatedAt, dailyassetprice.FieldUpdatedAt, dailyassetprice.FieldDeletedAt, dailyassetprice.FieldTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DailyAssetPrice", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DailyAssetPrice fields.
func (dap *DailyAssetPrice) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dailyassetprice.FieldID:
			if value, ok := values[i].(*pulid.PULID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				dap.ID = *value
			}
		case dailyassetprice.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				dap.CreatedAt = value.Time
			}
		case dailyassetprice.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				dap.UpdatedAt = value.Time
			}
		case dailyassetprice.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				dap.DeletedAt = new(time.Time)
				*dap.DeletedAt = value.Time
			}
		case dailyassetprice.FieldTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				dap.Time = value.Time
			}
		case dailyassetprice.FieldOpen:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field open", values[i])
			} else if value.Valid {
				dap.Open = new(float64)
				*dap.Open = value.Float64
			}
		case dailyassetprice.FieldHigh:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field high", values[i])
			} else if value.Valid {
				dap.High = new(float64)
				*dap.High = value.Float64
			}
		case dailyassetprice.FieldLow:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field low", values[i])
			} else if value.Valid {
				dap.Low = new(float64)
				*dap.Low = value.Float64
			}
		case dailyassetprice.FieldClose:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field close", values[i])
			} else if value.Valid {
				dap.Close = new(float64)
				*dap.Close = value.Float64
			}
		case dailyassetprice.FieldAdjustedClose:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field adjusted_close", values[i])
			} else if value.Valid {
				dap.AdjustedClose = value.Float64
			}
		case dailyassetprice.FieldBaseAssetID:
			if value, ok := values[i].(*pulid.PULID); !ok {
				return fmt.Errorf("unexpected type %T for field base_asset_id", values[i])
			} else if value != nil {
				dap.BaseAssetID = *value
			}
		}
	}
	return nil
}

// QueryBaseAsset queries the "base_asset" edge of the DailyAssetPrice entity.
func (dap *DailyAssetPrice) QueryBaseAsset() *AssetQuery {
	return (&DailyAssetPriceClient{config: dap.config}).QueryBaseAsset(dap)
}

// Update returns a builder for updating this DailyAssetPrice.
// Note that you need to call DailyAssetPrice.Unwrap() before calling this method if this DailyAssetPrice
// was returned from a transaction, and the transaction was committed or rolled back.
func (dap *DailyAssetPrice) Update() *DailyAssetPriceUpdateOne {
	return (&DailyAssetPriceClient{config: dap.config}).UpdateOne(dap)
}

// Unwrap unwraps the DailyAssetPrice entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dap *DailyAssetPrice) Unwrap() *DailyAssetPrice {
	_tx, ok := dap.config.driver.(*txDriver)
	if !ok {
		panic("ent: DailyAssetPrice is not a transactional entity")
	}
	dap.config.driver = _tx.drv
	return dap
}

// String implements the fmt.Stringer.
func (dap *DailyAssetPrice) String() string {
	var builder strings.Builder
	builder.WriteString("DailyAssetPrice(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dap.ID))
	builder.WriteString("created_at=")
	builder.WriteString(dap.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(dap.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := dap.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("time=")
	builder.WriteString(dap.Time.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := dap.Open; v != nil {
		builder.WriteString("open=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := dap.High; v != nil {
		builder.WriteString("high=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := dap.Low; v != nil {
		builder.WriteString("low=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := dap.Close; v != nil {
		builder.WriteString("close=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("adjusted_close=")
	builder.WriteString(fmt.Sprintf("%v", dap.AdjustedClose))
	builder.WriteString(", ")
	builder.WriteString("base_asset_id=")
	builder.WriteString(fmt.Sprintf("%v", dap.BaseAssetID))
	builder.WriteByte(')')
	return builder.String()
}

// DailyAssetPrices is a parsable slice of DailyAssetPrice.
type DailyAssetPrices []*DailyAssetPrice

func (dap DailyAssetPrices) config(cfg config) {
	for _i := range dap {
		dap[_i].config = cfg
	}
}
