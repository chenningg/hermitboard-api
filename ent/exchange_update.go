// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chenningg/hermitboard-api/ent/exchange"
	"github.com/chenningg/hermitboard-api/ent/predicate"
	"github.com/chenningg/hermitboard-api/ent/transaction"
	"github.com/chenningg/hermitboard-api/pulid"
)

// ExchangeUpdate is the builder for updating Exchange entities.
type ExchangeUpdate struct {
	config
	hooks    []Hook
	mutation *ExchangeMutation
}

// Where appends a list predicates to the ExchangeUpdate builder.
func (eu *ExchangeUpdate) Where(ps ...predicate.Exchange) *ExchangeUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *ExchangeUpdate) SetUpdatedAt(t time.Time) *ExchangeUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetDeletedAt sets the "deleted_at" field.
func (eu *ExchangeUpdate) SetDeletedAt(t time.Time) *ExchangeUpdate {
	eu.mutation.SetDeletedAt(t)
	return eu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (eu *ExchangeUpdate) ClearDeletedAt() *ExchangeUpdate {
	eu.mutation.ClearDeletedAt()
	return eu
}

// SetName sets the "name" field.
func (eu *ExchangeUpdate) SetName(s string) *ExchangeUpdate {
	eu.mutation.SetName(s)
	return eu
}

// SetIcon sets the "icon" field.
func (eu *ExchangeUpdate) SetIcon(s string) *ExchangeUpdate {
	eu.mutation.SetIcon(s)
	return eu
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableIcon(s *string) *ExchangeUpdate {
	if s != nil {
		eu.SetIcon(*s)
	}
	return eu
}

// ClearIcon clears the value of the "icon" field.
func (eu *ExchangeUpdate) ClearIcon() *ExchangeUpdate {
	eu.mutation.ClearIcon()
	return eu
}

// SetURL sets the "url" field.
func (eu *ExchangeUpdate) SetURL(s string) *ExchangeUpdate {
	eu.mutation.SetURL(s)
	return eu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableURL(s *string) *ExchangeUpdate {
	if s != nil {
		eu.SetURL(*s)
	}
	return eu
}

// ClearURL clears the value of the "url" field.
func (eu *ExchangeUpdate) ClearURL() *ExchangeUpdate {
	eu.mutation.ClearURL()
	return eu
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (eu *ExchangeUpdate) AddTransactionIDs(ids ...pulid.PULID) *ExchangeUpdate {
	eu.mutation.AddTransactionIDs(ids...)
	return eu
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (eu *ExchangeUpdate) AddTransactions(t ...*Transaction) *ExchangeUpdate {
	ids := make([]pulid.PULID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return eu.AddTransactionIDs(ids...)
}

// Mutation returns the ExchangeMutation object of the builder.
func (eu *ExchangeUpdate) Mutation() *ExchangeMutation {
	return eu.mutation
}

// ClearTransactions clears all "transactions" edges to the Transaction entity.
func (eu *ExchangeUpdate) ClearTransactions() *ExchangeUpdate {
	eu.mutation.ClearTransactions()
	return eu
}

// RemoveTransactionIDs removes the "transactions" edge to Transaction entities by IDs.
func (eu *ExchangeUpdate) RemoveTransactionIDs(ids ...pulid.PULID) *ExchangeUpdate {
	eu.mutation.RemoveTransactionIDs(ids...)
	return eu
}

// RemoveTransactions removes "transactions" edges to Transaction entities.
func (eu *ExchangeUpdate) RemoveTransactions(t ...*Transaction) *ExchangeUpdate {
	ids := make([]pulid.PULID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return eu.RemoveTransactionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *ExchangeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	eu.defaults()
	if len(eu.hooks) == 0 {
		if err = eu.check(); err != nil {
			return 0, err
		}
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExchangeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = eu.check(); err != nil {
				return 0, err
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			if eu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *ExchangeUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *ExchangeUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *ExchangeUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *ExchangeUpdate) defaults() {
	if _, ok := eu.mutation.UpdatedAt(); !ok {
		v := exchange.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
	if _, ok := eu.mutation.DeletedAt(); !ok && !eu.mutation.DeletedAtCleared() {
		v := exchange.UpdateDefaultDeletedAt()
		eu.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *ExchangeUpdate) check() error {
	if v, ok := eu.mutation.Name(); ok {
		if err := exchange.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Exchange.name": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Icon(); ok {
		if err := exchange.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf(`ent: validator failed for field "Exchange.icon": %w`, err)}
		}
	}
	if v, ok := eu.mutation.URL(); ok {
		if err := exchange.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Exchange.url": %w`, err)}
		}
	}
	return nil
}

func (eu *ExchangeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   exchange.Table,
			Columns: exchange.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: exchange.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: exchange.FieldUpdatedAt,
		})
	}
	if value, ok := eu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: exchange.FieldDeletedAt,
		})
	}
	if eu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: exchange.FieldDeletedAt,
		})
	}
	if value, ok := eu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exchange.FieldName,
		})
	}
	if value, ok := eu.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exchange.FieldIcon,
		})
	}
	if eu.mutation.IconCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: exchange.FieldIcon,
		})
	}
	if value, ok := eu.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exchange.FieldURL,
		})
	}
	if eu.mutation.URLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: exchange.FieldURL,
		})
	}
	if eu.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exchange.TransactionsTable,
			Columns: []string{exchange.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !eu.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exchange.TransactionsTable,
			Columns: []string{exchange.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exchange.TransactionsTable,
			Columns: []string{exchange.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exchange.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ExchangeUpdateOne is the builder for updating a single Exchange entity.
type ExchangeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExchangeMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *ExchangeUpdateOne) SetUpdatedAt(t time.Time) *ExchangeUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetDeletedAt sets the "deleted_at" field.
func (euo *ExchangeUpdateOne) SetDeletedAt(t time.Time) *ExchangeUpdateOne {
	euo.mutation.SetDeletedAt(t)
	return euo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (euo *ExchangeUpdateOne) ClearDeletedAt() *ExchangeUpdateOne {
	euo.mutation.ClearDeletedAt()
	return euo
}

// SetName sets the "name" field.
func (euo *ExchangeUpdateOne) SetName(s string) *ExchangeUpdateOne {
	euo.mutation.SetName(s)
	return euo
}

// SetIcon sets the "icon" field.
func (euo *ExchangeUpdateOne) SetIcon(s string) *ExchangeUpdateOne {
	euo.mutation.SetIcon(s)
	return euo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableIcon(s *string) *ExchangeUpdateOne {
	if s != nil {
		euo.SetIcon(*s)
	}
	return euo
}

// ClearIcon clears the value of the "icon" field.
func (euo *ExchangeUpdateOne) ClearIcon() *ExchangeUpdateOne {
	euo.mutation.ClearIcon()
	return euo
}

// SetURL sets the "url" field.
func (euo *ExchangeUpdateOne) SetURL(s string) *ExchangeUpdateOne {
	euo.mutation.SetURL(s)
	return euo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableURL(s *string) *ExchangeUpdateOne {
	if s != nil {
		euo.SetURL(*s)
	}
	return euo
}

// ClearURL clears the value of the "url" field.
func (euo *ExchangeUpdateOne) ClearURL() *ExchangeUpdateOne {
	euo.mutation.ClearURL()
	return euo
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (euo *ExchangeUpdateOne) AddTransactionIDs(ids ...pulid.PULID) *ExchangeUpdateOne {
	euo.mutation.AddTransactionIDs(ids...)
	return euo
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (euo *ExchangeUpdateOne) AddTransactions(t ...*Transaction) *ExchangeUpdateOne {
	ids := make([]pulid.PULID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euo.AddTransactionIDs(ids...)
}

// Mutation returns the ExchangeMutation object of the builder.
func (euo *ExchangeUpdateOne) Mutation() *ExchangeMutation {
	return euo.mutation
}

// ClearTransactions clears all "transactions" edges to the Transaction entity.
func (euo *ExchangeUpdateOne) ClearTransactions() *ExchangeUpdateOne {
	euo.mutation.ClearTransactions()
	return euo
}

// RemoveTransactionIDs removes the "transactions" edge to Transaction entities by IDs.
func (euo *ExchangeUpdateOne) RemoveTransactionIDs(ids ...pulid.PULID) *ExchangeUpdateOne {
	euo.mutation.RemoveTransactionIDs(ids...)
	return euo
}

// RemoveTransactions removes "transactions" edges to Transaction entities.
func (euo *ExchangeUpdateOne) RemoveTransactions(t ...*Transaction) *ExchangeUpdateOne {
	ids := make([]pulid.PULID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euo.RemoveTransactionIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *ExchangeUpdateOne) Select(field string, fields ...string) *ExchangeUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Exchange entity.
func (euo *ExchangeUpdateOne) Save(ctx context.Context) (*Exchange, error) {
	var (
		err  error
		node *Exchange
	)
	euo.defaults()
	if len(euo.hooks) == 0 {
		if err = euo.check(); err != nil {
			return nil, err
		}
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExchangeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = euo.check(); err != nil {
				return nil, err
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			if euo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, euo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Exchange)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ExchangeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *ExchangeUpdateOne) SaveX(ctx context.Context) *Exchange {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *ExchangeUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *ExchangeUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *ExchangeUpdateOne) defaults() {
	if _, ok := euo.mutation.UpdatedAt(); !ok {
		v := exchange.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
	if _, ok := euo.mutation.DeletedAt(); !ok && !euo.mutation.DeletedAtCleared() {
		v := exchange.UpdateDefaultDeletedAt()
		euo.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *ExchangeUpdateOne) check() error {
	if v, ok := euo.mutation.Name(); ok {
		if err := exchange.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Exchange.name": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Icon(); ok {
		if err := exchange.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf(`ent: validator failed for field "Exchange.icon": %w`, err)}
		}
	}
	if v, ok := euo.mutation.URL(); ok {
		if err := exchange.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Exchange.url": %w`, err)}
		}
	}
	return nil
}

func (euo *ExchangeUpdateOne) sqlSave(ctx context.Context) (_node *Exchange, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   exchange.Table,
			Columns: exchange.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: exchange.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Exchange.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exchange.FieldID)
		for _, f := range fields {
			if !exchange.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != exchange.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: exchange.FieldUpdatedAt,
		})
	}
	if value, ok := euo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: exchange.FieldDeletedAt,
		})
	}
	if euo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: exchange.FieldDeletedAt,
		})
	}
	if value, ok := euo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exchange.FieldName,
		})
	}
	if value, ok := euo.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exchange.FieldIcon,
		})
	}
	if euo.mutation.IconCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: exchange.FieldIcon,
		})
	}
	if value, ok := euo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exchange.FieldURL,
		})
	}
	if euo.mutation.URLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: exchange.FieldURL,
		})
	}
	if euo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exchange.TransactionsTable,
			Columns: []string{exchange.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !euo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exchange.TransactionsTable,
			Columns: []string{exchange.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exchange.TransactionsTable,
			Columns: []string{exchange.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Exchange{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exchange.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
