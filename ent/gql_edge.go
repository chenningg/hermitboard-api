// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (a *Account) AuthRoles(ctx context.Context) ([]*AuthRole, error) {
	result, err := a.NamedAuthRoles(graphql.GetFieldContext(ctx).Field.Alias)
	if IsNotLoaded(err) {
		result, err = a.QueryAuthRoles().All(ctx)
	}
	return result, err
}

func (a *Account) Portfolios(ctx context.Context) ([]*Portfolio, error) {
	result, err := a.NamedPortfolios(graphql.GetFieldContext(ctx).Field.Alias)
	if IsNotLoaded(err) {
		result, err = a.QueryPortfolios().All(ctx)
	}
	return result, err
}

func (a *Account) AuthType(ctx context.Context) (*AuthType, error) {
	result, err := a.Edges.AuthTypeOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryAuthType().Only(ctx)
	}
	return result, err
}

func (a *Asset) AssetClass(ctx context.Context) (*AssetClass, error) {
	result, err := a.Edges.AssetClassOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryAssetClass().Only(ctx)
	}
	return result, err
}

func (a *Asset) Cryptocurrency(ctx context.Context) (*Cryptocurrency, error) {
	result, err := a.Edges.CryptocurrencyOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryCryptocurrency().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (a *Asset) TransactionBase(ctx context.Context) ([]*Transaction, error) {
	result, err := a.NamedTransactionBase(graphql.GetFieldContext(ctx).Field.Alias)
	if IsNotLoaded(err) {
		result, err = a.QueryTransactionBase().All(ctx)
	}
	return result, err
}

func (a *Asset) TransactionQuote(ctx context.Context) ([]*Transaction, error) {
	result, err := a.NamedTransactionQuote(graphql.GetFieldContext(ctx).Field.Alias)
	if IsNotLoaded(err) {
		result, err = a.QueryTransactionQuote().All(ctx)
	}
	return result, err
}

func (a *Asset) DailyAssetPrices(ctx context.Context) ([]*DailyAssetPrice, error) {
	result, err := a.NamedDailyAssetPrices(graphql.GetFieldContext(ctx).Field.Alias)
	if IsNotLoaded(err) {
		result, err = a.QueryDailyAssetPrices().All(ctx)
	}
	return result, err
}

func (ac *AssetClass) Assets(ctx context.Context) ([]*Asset, error) {
	result, err := ac.NamedAssets(graphql.GetFieldContext(ctx).Field.Alias)
	if IsNotLoaded(err) {
		result, err = ac.QueryAssets().All(ctx)
	}
	return result, err
}

func (ar *AuthRole) Accounts(ctx context.Context) ([]*Account, error) {
	result, err := ar.NamedAccounts(graphql.GetFieldContext(ctx).Field.Alias)
	if IsNotLoaded(err) {
		result, err = ar.QueryAccounts().All(ctx)
	}
	return result, err
}

func (ar *AuthRole) StaffAccounts(ctx context.Context) ([]*StaffAccount, error) {
	result, err := ar.NamedStaffAccounts(graphql.GetFieldContext(ctx).Field.Alias)
	if IsNotLoaded(err) {
		result, err = ar.QueryStaffAccounts().All(ctx)
	}
	return result, err
}

func (at *AuthType) Accounts(ctx context.Context) ([]*Account, error) {
	result, err := at.NamedAccounts(graphql.GetFieldContext(ctx).Field.Alias)
	if IsNotLoaded(err) {
		result, err = at.QueryAccounts().All(ctx)
	}
	return result, err
}

func (at *AuthType) StaffAccounts(ctx context.Context) ([]*StaffAccount, error) {
	result, err := at.NamedStaffAccounts(graphql.GetFieldContext(ctx).Field.Alias)
	if IsNotLoaded(err) {
		result, err = at.QueryStaffAccounts().All(ctx)
	}
	return result, err
}

func (b *Blockchain) Cryptocurrencies(ctx context.Context) ([]*Cryptocurrency, error) {
	result, err := b.NamedCryptocurrencies(graphql.GetFieldContext(ctx).Field.Alias)
	if IsNotLoaded(err) {
		result, err = b.QueryCryptocurrencies().All(ctx)
	}
	return result, err
}

func (c *Cryptocurrency) Asset(ctx context.Context) (*Asset, error) {
	result, err := c.Edges.AssetOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryAsset().Only(ctx)
	}
	return result, err
}

func (c *Cryptocurrency) Blockchains(ctx context.Context) ([]*Blockchain, error) {
	result, err := c.NamedBlockchains(graphql.GetFieldContext(ctx).Field.Alias)
	if IsNotLoaded(err) {
		result, err = c.QueryBlockchains().All(ctx)
	}
	return result, err
}

func (dap *DailyAssetPrice) Asset(ctx context.Context) (*Asset, error) {
	result, err := dap.Edges.AssetOrErr()
	if IsNotLoaded(err) {
		result, err = dap.QueryAsset().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Exchange) Transactions(ctx context.Context) ([]*Transaction, error) {
	result, err := e.NamedTransactions(graphql.GetFieldContext(ctx).Field.Alias)
	if IsNotLoaded(err) {
		result, err = e.QueryTransactions().All(ctx)
	}
	return result, err
}

func (po *Portfolio) Account(ctx context.Context) (*Account, error) {
	result, err := po.Edges.AccountOrErr()
	if IsNotLoaded(err) {
		result, err = po.QueryAccount().Only(ctx)
	}
	return result, err
}

func (po *Portfolio) Transactions(ctx context.Context) ([]*Transaction, error) {
	result, err := po.NamedTransactions(graphql.GetFieldContext(ctx).Field.Alias)
	if IsNotLoaded(err) {
		result, err = po.QueryTransactions().All(ctx)
	}
	return result, err
}

func (sa *StaffAccount) AuthRoles(ctx context.Context) ([]*AuthRole, error) {
	result, err := sa.NamedAuthRoles(graphql.GetFieldContext(ctx).Field.Alias)
	if IsNotLoaded(err) {
		result, err = sa.QueryAuthRoles().All(ctx)
	}
	return result, err
}

func (sa *StaffAccount) AuthType(ctx context.Context) (*AuthType, error) {
	result, err := sa.Edges.AuthTypeOrErr()
	if IsNotLoaded(err) {
		result, err = sa.QueryAuthType().Only(ctx)
	}
	return result, err
}

func (saar *StaffAccountAuthRole) StaffAccount(ctx context.Context) (*StaffAccount, error) {
	result, err := saar.Edges.StaffAccountOrErr()
	if IsNotLoaded(err) {
		result, err = saar.QueryStaffAccount().Only(ctx)
	}
	return result, err
}

func (saar *StaffAccountAuthRole) AuthRole(ctx context.Context) (*AuthRole, error) {
	result, err := saar.Edges.AuthRoleOrErr()
	if IsNotLoaded(err) {
		result, err = saar.QueryAuthRole().Only(ctx)
	}
	return result, err
}

func (t *Transaction) TransactionType(ctx context.Context) (*TransactionType, error) {
	result, err := t.Edges.TransactionTypeOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryTransactionType().Only(ctx)
	}
	return result, err
}

func (t *Transaction) BaseAsset(ctx context.Context) (*Asset, error) {
	result, err := t.Edges.BaseAssetOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryBaseAsset().Only(ctx)
	}
	return result, err
}

func (t *Transaction) QuoteAsset(ctx context.Context) (*Asset, error) {
	result, err := t.Edges.QuoteAssetOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryQuoteAsset().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Transaction) Portfolio(ctx context.Context) (*Portfolio, error) {
	result, err := t.Edges.PortfolioOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryPortfolio().Only(ctx)
	}
	return result, err
}

func (t *Transaction) Exchange(ctx context.Context) (*Exchange, error) {
	result, err := t.Edges.ExchangeOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryExchange().Only(ctx)
	}
	return result, err
}

func (tt *TransactionType) Transactions(ctx context.Context) ([]*Transaction, error) {
	result, err := tt.NamedTransactions(graphql.GetFieldContext(ctx).Field.Alias)
	if IsNotLoaded(err) {
		result, err = tt.QueryTransactions().All(ctx)
	}
	return result, err
}
