// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/chenningg/hermitboard-api/ent/assetclass"
	"github.com/chenningg/hermitboard-api/ent/authrole"
	"github.com/chenningg/hermitboard-api/ent/authtype"
	"github.com/chenningg/hermitboard-api/ent/sourcetype"
	"github.com/chenningg/hermitboard-api/ent/transactiontype"
	"github.com/chenningg/hermitboard-api/pulid"
)

// CreateAccountInput represents a mutation input for creating accounts.
type CreateAccountInput struct {
	Nickname    string
	Email       string
	Password    *string
	AuthRoleIDs []pulid.PULID
	AuthTypeID  pulid.PULID
}

// Mutate applies the CreateAccountInput on the AccountMutation builder.
func (i *CreateAccountInput) Mutate(m *AccountMutation) {
	m.SetNickname(i.Nickname)
	m.SetEmail(i.Email)
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if v := i.AuthRoleIDs; len(v) > 0 {
		m.AddAuthRoleIDs(v...)
	}
	m.SetAuthTypeID(i.AuthTypeID)
}

// SetInput applies the change-set in the CreateAccountInput on the AccountCreate builder.
func (c *AccountCreate) SetInput(i CreateAccountInput) *AccountCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateAccountInput represents a mutation input for updating accounts.
type UpdateAccountInput struct {
	ClearDeletedAt    bool
	DeletedAt         *time.Time
	Nickname          *string
	Email             *string
	EmailConfirmed    *bool
	ClearPassword     bool
	Password          *string
	AddFriendIDs      []pulid.PULID
	RemoveFriendIDs   []pulid.PULID
	AddAuthRoleIDs    []pulid.PULID
	RemoveAuthRoleIDs []pulid.PULID
	ClearAuthType     bool
	AuthTypeID        *pulid.PULID
}

// Mutate applies the UpdateAccountInput on the AccountMutation builder.
func (i *UpdateAccountInput) Mutate(m *AccountMutation) {
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Nickname; v != nil {
		m.SetNickname(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.EmailConfirmed; v != nil {
		m.SetEmailConfirmed(*v)
	}
	if i.ClearPassword {
		m.ClearPassword()
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if v := i.AddFriendIDs; len(v) > 0 {
		m.AddFriendIDs(v...)
	}
	if v := i.RemoveFriendIDs; len(v) > 0 {
		m.RemoveFriendIDs(v...)
	}
	if v := i.AddAuthRoleIDs; len(v) > 0 {
		m.AddAuthRoleIDs(v...)
	}
	if v := i.RemoveAuthRoleIDs; len(v) > 0 {
		m.RemoveAuthRoleIDs(v...)
	}
	if i.ClearAuthType {
		m.ClearAuthType()
	}
	if v := i.AuthTypeID; v != nil {
		m.SetAuthTypeID(*v)
	}
}

// SetInput applies the change-set in the UpdateAccountInput on the AccountUpdate builder.
func (c *AccountUpdate) SetInput(i UpdateAccountInput) *AccountUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateAccountInput on the AccountUpdateOne builder.
func (c *AccountUpdateOne) SetInput(i UpdateAccountInput) *AccountUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// UpdateAssetInput represents a mutation input for updating assets.
type UpdateAssetInput struct {
	ClearDeletedAt  bool
	DeletedAt       *time.Time
	ClearAssetClass bool
	AssetClassID    *pulid.PULID
}

// Mutate applies the UpdateAssetInput on the AssetMutation builder.
func (i *UpdateAssetInput) Mutate(m *AssetMutation) {
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if i.ClearAssetClass {
		m.ClearAssetClass()
	}
	if v := i.AssetClassID; v != nil {
		m.SetAssetClassID(*v)
	}
}

// SetInput applies the change-set in the UpdateAssetInput on the AssetUpdate builder.
func (c *AssetUpdate) SetInput(i UpdateAssetInput) *AssetUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateAssetInput on the AssetUpdateOne builder.
func (c *AssetUpdateOne) SetInput(i UpdateAssetInput) *AssetUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateAssetClassInput represents a mutation input for creating assetclasses.
type CreateAssetClassInput struct {
	Value       assetclass.Value
	Description *string
}

// Mutate applies the CreateAssetClassInput on the AssetClassMutation builder.
func (i *CreateAssetClassInput) Mutate(m *AssetClassMutation) {
	m.SetValue(i.Value)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
}

// SetInput applies the change-set in the CreateAssetClassInput on the AssetClassCreate builder.
func (c *AssetClassCreate) SetInput(i CreateAssetClassInput) *AssetClassCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateAssetClassInput represents a mutation input for updating assetclasses.
type UpdateAssetClassInput struct {
	ClearDeletedAt   bool
	DeletedAt        *time.Time
	Value            *assetclass.Value
	ClearDescription bool
	Description      *string
}

// Mutate applies the UpdateAssetClassInput on the AssetClassMutation builder.
func (i *UpdateAssetClassInput) Mutate(m *AssetClassMutation) {
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Value; v != nil {
		m.SetValue(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
}

// SetInput applies the change-set in the UpdateAssetClassInput on the AssetClassUpdate builder.
func (c *AssetClassUpdate) SetInput(i UpdateAssetClassInput) *AssetClassUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateAssetClassInput on the AssetClassUpdateOne builder.
func (c *AssetClassUpdateOne) SetInput(i UpdateAssetClassInput) *AssetClassUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateAuthRoleInput represents a mutation input for creating authroles.
type CreateAuthRoleInput struct {
	Value       authrole.Value
	Description *string
}

// Mutate applies the CreateAuthRoleInput on the AuthRoleMutation builder.
func (i *CreateAuthRoleInput) Mutate(m *AuthRoleMutation) {
	m.SetValue(i.Value)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
}

// SetInput applies the change-set in the CreateAuthRoleInput on the AuthRoleCreate builder.
func (c *AuthRoleCreate) SetInput(i CreateAuthRoleInput) *AuthRoleCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateAuthRoleInput represents a mutation input for updating authroles.
type UpdateAuthRoleInput struct {
	ClearDeletedAt   bool
	DeletedAt        *time.Time
	Value            *authrole.Value
	ClearDescription bool
	Description      *string
}

// Mutate applies the UpdateAuthRoleInput on the AuthRoleMutation builder.
func (i *UpdateAuthRoleInput) Mutate(m *AuthRoleMutation) {
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Value; v != nil {
		m.SetValue(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
}

// SetInput applies the change-set in the UpdateAuthRoleInput on the AuthRoleUpdate builder.
func (c *AuthRoleUpdate) SetInput(i UpdateAuthRoleInput) *AuthRoleUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateAuthRoleInput on the AuthRoleUpdateOne builder.
func (c *AuthRoleUpdateOne) SetInput(i UpdateAuthRoleInput) *AuthRoleUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateAuthTypeInput represents a mutation input for creating authtypes.
type CreateAuthTypeInput struct {
	Value       authtype.Value
	Description *string
}

// Mutate applies the CreateAuthTypeInput on the AuthTypeMutation builder.
func (i *CreateAuthTypeInput) Mutate(m *AuthTypeMutation) {
	m.SetValue(i.Value)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
}

// SetInput applies the change-set in the CreateAuthTypeInput on the AuthTypeCreate builder.
func (c *AuthTypeCreate) SetInput(i CreateAuthTypeInput) *AuthTypeCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateAuthTypeInput represents a mutation input for updating authtypes.
type UpdateAuthTypeInput struct {
	ClearDeletedAt   bool
	DeletedAt        *time.Time
	Value            *authtype.Value
	ClearDescription bool
	Description      *string
}

// Mutate applies the UpdateAuthTypeInput on the AuthTypeMutation builder.
func (i *UpdateAuthTypeInput) Mutate(m *AuthTypeMutation) {
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Value; v != nil {
		m.SetValue(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
}

// SetInput applies the change-set in the UpdateAuthTypeInput on the AuthTypeUpdate builder.
func (c *AuthTypeUpdate) SetInput(i UpdateAuthTypeInput) *AuthTypeUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateAuthTypeInput on the AuthTypeUpdateOne builder.
func (c *AuthTypeUpdateOne) SetInput(i UpdateAuthTypeInput) *AuthTypeUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateBlockchainInput represents a mutation input for creating blockchains.
type CreateBlockchainInput struct {
	Name    string
	Symbol  string
	Icon    *string
	ChainID *int64
}

// Mutate applies the CreateBlockchainInput on the BlockchainMutation builder.
func (i *CreateBlockchainInput) Mutate(m *BlockchainMutation) {
	m.SetName(i.Name)
	m.SetSymbol(i.Symbol)
	if v := i.Icon; v != nil {
		m.SetIcon(*v)
	}
	if v := i.ChainID; v != nil {
		m.SetChainID(*v)
	}
}

// SetInput applies the change-set in the CreateBlockchainInput on the BlockchainCreate builder.
func (c *BlockchainCreate) SetInput(i CreateBlockchainInput) *BlockchainCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateBlockchainInput represents a mutation input for updating blockchains.
type UpdateBlockchainInput struct {
	ClearDeletedAt bool
	DeletedAt      *time.Time
	Name           *string
	Symbol         *string
	ClearIcon      bool
	Icon           *string
	ClearChainID   bool
	ChainID        *int64
}

// Mutate applies the UpdateBlockchainInput on the BlockchainMutation builder.
func (i *UpdateBlockchainInput) Mutate(m *BlockchainMutation) {
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Symbol; v != nil {
		m.SetSymbol(*v)
	}
	if i.ClearIcon {
		m.ClearIcon()
	}
	if v := i.Icon; v != nil {
		m.SetIcon(*v)
	}
	if i.ClearChainID {
		m.ClearChainID()
	}
	if v := i.ChainID; v != nil {
		m.SetChainID(*v)
	}
}

// SetInput applies the change-set in the UpdateBlockchainInput on the BlockchainUpdate builder.
func (c *BlockchainUpdate) SetInput(i UpdateBlockchainInput) *BlockchainUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateBlockchainInput on the BlockchainUpdateOne builder.
func (c *BlockchainUpdateOne) SetInput(i UpdateBlockchainInput) *BlockchainUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateConnectionInput represents a mutation input for creating connections.
type CreateConnectionInput struct {
	Name         string
	AccessToken  string
	RefreshToken *string
	PortfolioIDs []pulid.PULID
}

// Mutate applies the CreateConnectionInput on the ConnectionMutation builder.
func (i *CreateConnectionInput) Mutate(m *ConnectionMutation) {
	m.SetName(i.Name)
	m.SetAccessToken(i.AccessToken)
	if v := i.RefreshToken; v != nil {
		m.SetRefreshToken(*v)
	}
	if v := i.PortfolioIDs; len(v) > 0 {
		m.AddPortfolioIDs(v...)
	}
}

// SetInput applies the change-set in the CreateConnectionInput on the ConnectionCreate builder.
func (c *ConnectionCreate) SetInput(i CreateConnectionInput) *ConnectionCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateConnectionInput represents a mutation input for updating connections.
type UpdateConnectionInput struct {
	ClearDeletedAt     bool
	DeletedAt          *time.Time
	Name               *string
	AccessToken        *string
	ClearRefreshToken  bool
	RefreshToken       *string
	AddPortfolioIDs    []pulid.PULID
	RemovePortfolioIDs []pulid.PULID
}

// Mutate applies the UpdateConnectionInput on the ConnectionMutation builder.
func (i *UpdateConnectionInput) Mutate(m *ConnectionMutation) {
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.AccessToken; v != nil {
		m.SetAccessToken(*v)
	}
	if i.ClearRefreshToken {
		m.ClearRefreshToken()
	}
	if v := i.RefreshToken; v != nil {
		m.SetRefreshToken(*v)
	}
	if v := i.AddPortfolioIDs; len(v) > 0 {
		m.AddPortfolioIDs(v...)
	}
	if v := i.RemovePortfolioIDs; len(v) > 0 {
		m.RemovePortfolioIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateConnectionInput on the ConnectionUpdate builder.
func (c *ConnectionUpdate) SetInput(i UpdateConnectionInput) *ConnectionUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateConnectionInput on the ConnectionUpdateOne builder.
func (c *ConnectionUpdateOne) SetInput(i UpdateConnectionInput) *ConnectionUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCryptocurrencyInput represents a mutation input for creating cryptocurrencies.
type CreateCryptocurrencyInput struct {
	Symbol        string
	Icon          *string
	Name          string
	AssetID       pulid.PULID
	BlockchainIDs []pulid.PULID
}

// Mutate applies the CreateCryptocurrencyInput on the CryptocurrencyMutation builder.
func (i *CreateCryptocurrencyInput) Mutate(m *CryptocurrencyMutation) {
	m.SetSymbol(i.Symbol)
	if v := i.Icon; v != nil {
		m.SetIcon(*v)
	}
	m.SetName(i.Name)
	m.SetAssetID(i.AssetID)
	if v := i.BlockchainIDs; len(v) > 0 {
		m.AddBlockchainIDs(v...)
	}
}

// SetInput applies the change-set in the CreateCryptocurrencyInput on the CryptocurrencyCreate builder.
func (c *CryptocurrencyCreate) SetInput(i CreateCryptocurrencyInput) *CryptocurrencyCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCryptocurrencyInput represents a mutation input for updating cryptocurrencies.
type UpdateCryptocurrencyInput struct {
	ClearDeletedAt      bool
	DeletedAt           *time.Time
	Symbol              *string
	ClearIcon           bool
	Icon                *string
	Name                *string
	ClearAsset          bool
	AssetID             *pulid.PULID
	AddBlockchainIDs    []pulid.PULID
	RemoveBlockchainIDs []pulid.PULID
}

// Mutate applies the UpdateCryptocurrencyInput on the CryptocurrencyMutation builder.
func (i *UpdateCryptocurrencyInput) Mutate(m *CryptocurrencyMutation) {
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Symbol; v != nil {
		m.SetSymbol(*v)
	}
	if i.ClearIcon {
		m.ClearIcon()
	}
	if v := i.Icon; v != nil {
		m.SetIcon(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearAsset {
		m.ClearAsset()
	}
	if v := i.AssetID; v != nil {
		m.SetAssetID(*v)
	}
	if v := i.AddBlockchainIDs; len(v) > 0 {
		m.AddBlockchainIDs(v...)
	}
	if v := i.RemoveBlockchainIDs; len(v) > 0 {
		m.RemoveBlockchainIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateCryptocurrencyInput on the CryptocurrencyUpdate builder.
func (c *CryptocurrencyUpdate) SetInput(i UpdateCryptocurrencyInput) *CryptocurrencyUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCryptocurrencyInput on the CryptocurrencyUpdateOne builder.
func (c *CryptocurrencyUpdateOne) SetInput(i UpdateCryptocurrencyInput) *CryptocurrencyUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateDailyAssetPriceInput represents a mutation input for creating dailyassetprices.
type CreateDailyAssetPriceInput struct {
	Time          time.Time
	Open          *float64
	High          *float64
	Low           *float64
	Close         *float64
	AdjustedClose float64
	AssetID       pulid.PULID
}

// Mutate applies the CreateDailyAssetPriceInput on the DailyAssetPriceMutation builder.
func (i *CreateDailyAssetPriceInput) Mutate(m *DailyAssetPriceMutation) {
	m.SetTime(i.Time)
	if v := i.Open; v != nil {
		m.SetOpen(*v)
	}
	if v := i.High; v != nil {
		m.SetHigh(*v)
	}
	if v := i.Low; v != nil {
		m.SetLow(*v)
	}
	if v := i.Close; v != nil {
		m.SetClose(*v)
	}
	m.SetAdjustedClose(i.AdjustedClose)
	m.SetAssetID(i.AssetID)
}

// SetInput applies the change-set in the CreateDailyAssetPriceInput on the DailyAssetPriceCreate builder.
func (c *DailyAssetPriceCreate) SetInput(i CreateDailyAssetPriceInput) *DailyAssetPriceCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateDailyAssetPriceInput represents a mutation input for updating dailyassetprices.
type UpdateDailyAssetPriceInput struct {
	ClearDeletedAt bool
	DeletedAt      *time.Time
	Time           *time.Time
	ClearOpen      bool
	Open           *float64
	ClearHigh      bool
	High           *float64
	ClearLow       bool
	Low            *float64
	ClearClose     bool
	Close          *float64
	AdjustedClose  *float64
	ClearAsset     bool
	AssetID        *pulid.PULID
}

// Mutate applies the UpdateDailyAssetPriceInput on the DailyAssetPriceMutation builder.
func (i *UpdateDailyAssetPriceInput) Mutate(m *DailyAssetPriceMutation) {
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Time; v != nil {
		m.SetTime(*v)
	}
	if i.ClearOpen {
		m.ClearOpen()
	}
	if v := i.Open; v != nil {
		m.SetOpen(*v)
	}
	if i.ClearHigh {
		m.ClearHigh()
	}
	if v := i.High; v != nil {
		m.SetHigh(*v)
	}
	if i.ClearLow {
		m.ClearLow()
	}
	if v := i.Low; v != nil {
		m.SetLow(*v)
	}
	if i.ClearClose {
		m.ClearClose()
	}
	if v := i.Close; v != nil {
		m.SetClose(*v)
	}
	if v := i.AdjustedClose; v != nil {
		m.SetAdjustedClose(*v)
	}
	if i.ClearAsset {
		m.ClearAsset()
	}
	if v := i.AssetID; v != nil {
		m.SetAssetID(*v)
	}
}

// SetInput applies the change-set in the UpdateDailyAssetPriceInput on the DailyAssetPriceUpdate builder.
func (c *DailyAssetPriceUpdate) SetInput(i UpdateDailyAssetPriceInput) *DailyAssetPriceUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateDailyAssetPriceInput on the DailyAssetPriceUpdateOne builder.
func (c *DailyAssetPriceUpdateOne) SetInput(i UpdateDailyAssetPriceInput) *DailyAssetPriceUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateExchangeInput represents a mutation input for creating exchanges.
type CreateExchangeInput struct {
	Name string
	Icon *string
	URL  *string
}

// Mutate applies the CreateExchangeInput on the ExchangeMutation builder.
func (i *CreateExchangeInput) Mutate(m *ExchangeMutation) {
	m.SetName(i.Name)
	if v := i.Icon; v != nil {
		m.SetIcon(*v)
	}
	if v := i.URL; v != nil {
		m.SetURL(*v)
	}
}

// SetInput applies the change-set in the CreateExchangeInput on the ExchangeCreate builder.
func (c *ExchangeCreate) SetInput(i CreateExchangeInput) *ExchangeCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateExchangeInput represents a mutation input for updating exchanges.
type UpdateExchangeInput struct {
	ClearDeletedAt bool
	DeletedAt      *time.Time
	Name           *string
	ClearIcon      bool
	Icon           *string
	ClearURL       bool
	URL            *string
}

// Mutate applies the UpdateExchangeInput on the ExchangeMutation builder.
func (i *UpdateExchangeInput) Mutate(m *ExchangeMutation) {
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearIcon {
		m.ClearIcon()
	}
	if v := i.Icon; v != nil {
		m.SetIcon(*v)
	}
	if i.ClearURL {
		m.ClearURL()
	}
	if v := i.URL; v != nil {
		m.SetURL(*v)
	}
}

// SetInput applies the change-set in the UpdateExchangeInput on the ExchangeUpdate builder.
func (c *ExchangeUpdate) SetInput(i UpdateExchangeInput) *ExchangeUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateExchangeInput on the ExchangeUpdateOne builder.
func (c *ExchangeUpdateOne) SetInput(i UpdateExchangeInput) *ExchangeUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePortfolioInput represents a mutation input for creating portfolios.
type CreatePortfolioInput struct {
	Name          string
	IsPublic      *bool
	IsVisible     *bool
	ConnectionIDs []pulid.PULID
}

// Mutate applies the CreatePortfolioInput on the PortfolioMutation builder.
func (i *CreatePortfolioInput) Mutate(m *PortfolioMutation) {
	m.SetName(i.Name)
	if v := i.IsPublic; v != nil {
		m.SetIsPublic(*v)
	}
	if v := i.IsVisible; v != nil {
		m.SetIsVisible(*v)
	}
	if v := i.ConnectionIDs; len(v) > 0 {
		m.AddConnectionIDs(v...)
	}
}

// SetInput applies the change-set in the CreatePortfolioInput on the PortfolioCreate builder.
func (c *PortfolioCreate) SetInput(i CreatePortfolioInput) *PortfolioCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePortfolioInput represents a mutation input for updating portfolios.
type UpdatePortfolioInput struct {
	ClearDeletedAt      bool
	DeletedAt           *time.Time
	Name                *string
	IsPublic            *bool
	IsVisible           *bool
	AddConnectionIDs    []pulid.PULID
	RemoveConnectionIDs []pulid.PULID
}

// Mutate applies the UpdatePortfolioInput on the PortfolioMutation builder.
func (i *UpdatePortfolioInput) Mutate(m *PortfolioMutation) {
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.IsPublic; v != nil {
		m.SetIsPublic(*v)
	}
	if v := i.IsVisible; v != nil {
		m.SetIsVisible(*v)
	}
	if v := i.AddConnectionIDs; len(v) > 0 {
		m.AddConnectionIDs(v...)
	}
	if v := i.RemoveConnectionIDs; len(v) > 0 {
		m.RemoveConnectionIDs(v...)
	}
}

// SetInput applies the change-set in the UpdatePortfolioInput on the PortfolioUpdate builder.
func (c *PortfolioUpdate) SetInput(i UpdatePortfolioInput) *PortfolioUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePortfolioInput on the PortfolioUpdateOne builder.
func (c *PortfolioUpdateOne) SetInput(i UpdatePortfolioInput) *PortfolioUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateSourceInput represents a mutation input for creating sources.
type CreateSourceInput struct {
	Name         string
	Icon         *string
	SourceTypeID pulid.PULID
}

// Mutate applies the CreateSourceInput on the SourceMutation builder.
func (i *CreateSourceInput) Mutate(m *SourceMutation) {
	m.SetName(i.Name)
	if v := i.Icon; v != nil {
		m.SetIcon(*v)
	}
	m.SetSourceTypeID(i.SourceTypeID)
}

// SetInput applies the change-set in the CreateSourceInput on the SourceCreate builder.
func (c *SourceCreate) SetInput(i CreateSourceInput) *SourceCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateSourceInput represents a mutation input for updating sources.
type UpdateSourceInput struct {
	ClearDeletedAt  bool
	DeletedAt       *time.Time
	Name            *string
	ClearIcon       bool
	Icon            *string
	ClearSourceType bool
	SourceTypeID    *pulid.PULID
}

// Mutate applies the UpdateSourceInput on the SourceMutation builder.
func (i *UpdateSourceInput) Mutate(m *SourceMutation) {
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearIcon {
		m.ClearIcon()
	}
	if v := i.Icon; v != nil {
		m.SetIcon(*v)
	}
	if i.ClearSourceType {
		m.ClearSourceType()
	}
	if v := i.SourceTypeID; v != nil {
		m.SetSourceTypeID(*v)
	}
}

// SetInput applies the change-set in the UpdateSourceInput on the SourceUpdate builder.
func (c *SourceUpdate) SetInput(i UpdateSourceInput) *SourceUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateSourceInput on the SourceUpdateOne builder.
func (c *SourceUpdateOne) SetInput(i UpdateSourceInput) *SourceUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateSourceTypeInput represents a mutation input for creating sourcetypes.
type CreateSourceTypeInput struct {
	Value       sourcetype.Value
	Description *string
}

// Mutate applies the CreateSourceTypeInput on the SourceTypeMutation builder.
func (i *CreateSourceTypeInput) Mutate(m *SourceTypeMutation) {
	m.SetValue(i.Value)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
}

// SetInput applies the change-set in the CreateSourceTypeInput on the SourceTypeCreate builder.
func (c *SourceTypeCreate) SetInput(i CreateSourceTypeInput) *SourceTypeCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateSourceTypeInput represents a mutation input for updating sourcetypes.
type UpdateSourceTypeInput struct {
	ClearDeletedAt   bool
	DeletedAt        *time.Time
	Value            *sourcetype.Value
	ClearDescription bool
	Description      *string
}

// Mutate applies the UpdateSourceTypeInput on the SourceTypeMutation builder.
func (i *UpdateSourceTypeInput) Mutate(m *SourceTypeMutation) {
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Value; v != nil {
		m.SetValue(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
}

// SetInput applies the change-set in the UpdateSourceTypeInput on the SourceTypeUpdate builder.
func (c *SourceTypeUpdate) SetInput(i UpdateSourceTypeInput) *SourceTypeUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateSourceTypeInput on the SourceTypeUpdateOne builder.
func (c *SourceTypeUpdateOne) SetInput(i UpdateSourceTypeInput) *SourceTypeUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateStaffAccountInput represents a mutation input for creating staffaccounts.
type CreateStaffAccountInput struct {
	Nickname    string
	Email       string
	Password    *string
	AuthRoleIDs []pulid.PULID
	AuthTypeID  pulid.PULID
}

// Mutate applies the CreateStaffAccountInput on the StaffAccountMutation builder.
func (i *CreateStaffAccountInput) Mutate(m *StaffAccountMutation) {
	m.SetNickname(i.Nickname)
	m.SetEmail(i.Email)
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if v := i.AuthRoleIDs; len(v) > 0 {
		m.AddAuthRoleIDs(v...)
	}
	m.SetAuthTypeID(i.AuthTypeID)
}

// SetInput applies the change-set in the CreateStaffAccountInput on the StaffAccountCreate builder.
func (c *StaffAccountCreate) SetInput(i CreateStaffAccountInput) *StaffAccountCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateStaffAccountInput represents a mutation input for updating staffaccounts.
type UpdateStaffAccountInput struct {
	ClearDeletedAt    bool
	DeletedAt         *time.Time
	Nickname          *string
	Email             *string
	EmailConfirmed    *bool
	ClearPassword     bool
	Password          *string
	AddAuthRoleIDs    []pulid.PULID
	RemoveAuthRoleIDs []pulid.PULID
	ClearAuthType     bool
	AuthTypeID        *pulid.PULID
}

// Mutate applies the UpdateStaffAccountInput on the StaffAccountMutation builder.
func (i *UpdateStaffAccountInput) Mutate(m *StaffAccountMutation) {
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Nickname; v != nil {
		m.SetNickname(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.EmailConfirmed; v != nil {
		m.SetEmailConfirmed(*v)
	}
	if i.ClearPassword {
		m.ClearPassword()
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if v := i.AddAuthRoleIDs; len(v) > 0 {
		m.AddAuthRoleIDs(v...)
	}
	if v := i.RemoveAuthRoleIDs; len(v) > 0 {
		m.RemoveAuthRoleIDs(v...)
	}
	if i.ClearAuthType {
		m.ClearAuthType()
	}
	if v := i.AuthTypeID; v != nil {
		m.SetAuthTypeID(*v)
	}
}

// SetInput applies the change-set in the UpdateStaffAccountInput on the StaffAccountUpdate builder.
func (c *StaffAccountUpdate) SetInput(i UpdateStaffAccountInput) *StaffAccountUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateStaffAccountInput on the StaffAccountUpdateOne builder.
func (c *StaffAccountUpdateOne) SetInput(i UpdateStaffAccountInput) *StaffAccountUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateTransactionInput represents a mutation input for creating transactions.
type CreateTransactionInput struct {
	Time              time.Time
	Units             int
	PricePerUnit      float64
	TransactionTypeID pulid.PULID
	BaseAssetID       pulid.PULID
	QuoteAssetID      *pulid.PULID
	PortfolioID       pulid.PULID
	ExchangeID        pulid.PULID
	BlockchainID      *pulid.PULID
}

// Mutate applies the CreateTransactionInput on the TransactionMutation builder.
func (i *CreateTransactionInput) Mutate(m *TransactionMutation) {
	m.SetTime(i.Time)
	m.SetUnits(i.Units)
	m.SetPricePerUnit(i.PricePerUnit)
	m.SetTransactionTypeID(i.TransactionTypeID)
	m.SetBaseAssetID(i.BaseAssetID)
	if v := i.QuoteAssetID; v != nil {
		m.SetQuoteAssetID(*v)
	}
	m.SetPortfolioID(i.PortfolioID)
	m.SetExchangeID(i.ExchangeID)
	if v := i.BlockchainID; v != nil {
		m.SetBlockchainID(*v)
	}
}

// SetInput applies the change-set in the CreateTransactionInput on the TransactionCreate builder.
func (c *TransactionCreate) SetInput(i CreateTransactionInput) *TransactionCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateTransactionInput represents a mutation input for updating transactions.
type UpdateTransactionInput struct {
	ClearDeletedAt       bool
	DeletedAt            *time.Time
	Time                 *time.Time
	Units                *int
	PricePerUnit         *float64
	ClearTransactionType bool
	TransactionTypeID    *pulid.PULID
	ClearBaseAsset       bool
	BaseAssetID          *pulid.PULID
	ClearQuoteAsset      bool
	QuoteAssetID         *pulid.PULID
	ClearPortfolio       bool
	PortfolioID          *pulid.PULID
	ClearExchange        bool
	ExchangeID           *pulid.PULID
	ClearBlockchain      bool
	BlockchainID         *pulid.PULID
}

// Mutate applies the UpdateTransactionInput on the TransactionMutation builder.
func (i *UpdateTransactionInput) Mutate(m *TransactionMutation) {
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Time; v != nil {
		m.SetTime(*v)
	}
	if v := i.Units; v != nil {
		m.SetUnits(*v)
	}
	if v := i.PricePerUnit; v != nil {
		m.SetPricePerUnit(*v)
	}
	if i.ClearTransactionType {
		m.ClearTransactionType()
	}
	if v := i.TransactionTypeID; v != nil {
		m.SetTransactionTypeID(*v)
	}
	if i.ClearBaseAsset {
		m.ClearBaseAsset()
	}
	if v := i.BaseAssetID; v != nil {
		m.SetBaseAssetID(*v)
	}
	if i.ClearQuoteAsset {
		m.ClearQuoteAsset()
	}
	if v := i.QuoteAssetID; v != nil {
		m.SetQuoteAssetID(*v)
	}
	if i.ClearPortfolio {
		m.ClearPortfolio()
	}
	if v := i.PortfolioID; v != nil {
		m.SetPortfolioID(*v)
	}
	if i.ClearExchange {
		m.ClearExchange()
	}
	if v := i.ExchangeID; v != nil {
		m.SetExchangeID(*v)
	}
	if i.ClearBlockchain {
		m.ClearBlockchain()
	}
	if v := i.BlockchainID; v != nil {
		m.SetBlockchainID(*v)
	}
}

// SetInput applies the change-set in the UpdateTransactionInput on the TransactionUpdate builder.
func (c *TransactionUpdate) SetInput(i UpdateTransactionInput) *TransactionUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateTransactionInput on the TransactionUpdateOne builder.
func (c *TransactionUpdateOne) SetInput(i UpdateTransactionInput) *TransactionUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateTransactionTypeInput represents a mutation input for creating transactiontypes.
type CreateTransactionTypeInput struct {
	Value       transactiontype.Value
	Description *string
}

// Mutate applies the CreateTransactionTypeInput on the TransactionTypeMutation builder.
func (i *CreateTransactionTypeInput) Mutate(m *TransactionTypeMutation) {
	m.SetValue(i.Value)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
}

// SetInput applies the change-set in the CreateTransactionTypeInput on the TransactionTypeCreate builder.
func (c *TransactionTypeCreate) SetInput(i CreateTransactionTypeInput) *TransactionTypeCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateTransactionTypeInput represents a mutation input for updating transactiontypes.
type UpdateTransactionTypeInput struct {
	ClearDeletedAt   bool
	DeletedAt        *time.Time
	Value            *transactiontype.Value
	ClearDescription bool
	Description      *string
}

// Mutate applies the UpdateTransactionTypeInput on the TransactionTypeMutation builder.
func (i *UpdateTransactionTypeInput) Mutate(m *TransactionTypeMutation) {
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Value; v != nil {
		m.SetValue(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
}

// SetInput applies the change-set in the UpdateTransactionTypeInput on the TransactionTypeUpdate builder.
func (c *TransactionTypeUpdate) SetInput(i UpdateTransactionTypeInput) *TransactionTypeUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateTransactionTypeInput on the TransactionTypeUpdateOne builder.
func (c *TransactionTypeUpdateOne) SetInput(i UpdateTransactionTypeInput) *TransactionTypeUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
