// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"fmt"

	"entgo.io/contrib/entgql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/chenningg/hermitboard-api/ent/account"
	"github.com/chenningg/hermitboard-api/ent/accountauthrole"
	"github.com/chenningg/hermitboard-api/ent/asset"
	"github.com/chenningg/hermitboard-api/ent/assetclass"
	"github.com/chenningg/hermitboard-api/ent/authrole"
	"github.com/chenningg/hermitboard-api/ent/blockchain"
	"github.com/chenningg/hermitboard-api/ent/blockchaincryptocurrency"
	"github.com/chenningg/hermitboard-api/ent/cryptocurrency"
	"github.com/chenningg/hermitboard-api/ent/dailyassetprice"
	"github.com/chenningg/hermitboard-api/ent/exchange"
	"github.com/chenningg/hermitboard-api/ent/portfolio"
	"github.com/chenningg/hermitboard-api/ent/schema/pulid"
	"github.com/chenningg/hermitboard-api/ent/transaction"
	"github.com/chenningg/hermitboard-api/ent/transactiontype"
	"github.com/hashicorp/go-multierror"
)

// Noder wraps the basic Node method.
type Noder interface {
	Node(context.Context) (*Node, error)
}

// Node in the graph.
type Node struct {
	ID     pulid.PULID `json:"id,omitempty"`     // node id.
	Type   string      `json:"type,omitempty"`   // node type.
	Fields []*Field    `json:"fields,omitempty"` // node fields.
	Edges  []*Edge     `json:"edges,omitempty"`  // node edges.
}

// Field of a node.
type Field struct {
	Type  string `json:"type,omitempty"`  // field type.
	Name  string `json:"name,omitempty"`  // field name (as in struct).
	Value string `json:"value,omitempty"` // stringified value.
}

// Edges between two nodes.
type Edge struct {
	Type string        `json:"type,omitempty"` // edge type.
	Name string        `json:"name,omitempty"` // edge name.
	IDs  []pulid.PULID `json:"ids,omitempty"`  // node ids (where this edge point to).
}

func (a *Account) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     a.ID,
		Type:   "Account",
		Fields: make([]*Field, 8),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(a.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.DeletedAt); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "time.Time",
		Name:  "deleted_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.AuthType); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "account.AuthType",
		Name:  "auth_type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.Nickname); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "nickname",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.Email); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "email",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.Password); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "password",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.PasswordUpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "time.Time",
		Name:  "password_updated_at",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "AuthRole",
		Name: "auth_roles",
	}
	err = a.QueryAuthRoles().
		Select(authrole.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Portfolio",
		Name: "portfolios",
	}
	err = a.QueryPortfolios().
		Select(portfolio.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "AccountAuthRole",
		Name: "account_auth_roles",
	}
	err = a.QueryAccountAuthRoles().
		Select(accountauthrole.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (aar *AccountAuthRole) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     aar.ID,
		Type:   "AccountAuthRole",
		Fields: make([]*Field, 5),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(aar.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(aar.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(aar.DeletedAt); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "time.Time",
		Name:  "deleted_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(aar.AccountID); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "pulid.PULID",
		Name:  "account_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(aar.AuthRoleID); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "pulid.PULID",
		Name:  "auth_role_id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Account",
		Name: "account",
	}
	err = aar.QueryAccount().
		Select(account.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "AuthRole",
		Name: "auth_role",
	}
	err = aar.QueryAuthRole().
		Select(authrole.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (a *Asset) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     a.ID,
		Type:   "Asset",
		Fields: make([]*Field, 4),
		Edges:  make([]*Edge, 5),
	}
	var buf []byte
	if buf, err = json.Marshal(a.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.DeletedAt); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "time.Time",
		Name:  "deleted_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.AssetClassID); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "pulid.PULID",
		Name:  "asset_class_id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "AssetClass",
		Name: "asset_class",
	}
	err = a.QueryAssetClass().
		Select(assetclass.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Cryptocurrency",
		Name: "cryptocurrency",
	}
	err = a.QueryCryptocurrency().
		Select(cryptocurrency.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Transaction",
		Name: "transaction_base",
	}
	err = a.QueryTransactionBase().
		Select(transaction.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Transaction",
		Name: "transaction_quote",
	}
	err = a.QueryTransactionQuote().
		Select(transaction.FieldID).
		Scan(ctx, &node.Edges[3].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "DailyAssetPrice",
		Name: "daily_asset_price",
	}
	err = a.QueryDailyAssetPrice().
		Select(dailyassetprice.FieldID).
		Scan(ctx, &node.Edges[4].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (ac *AssetClass) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     ac.ID,
		Type:   "AssetClass",
		Fields: make([]*Field, 5),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(ac.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ac.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ac.DeletedAt); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "time.Time",
		Name:  "deleted_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ac.AssetClass); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "assetclass.AssetClass",
		Name:  "asset_class",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ac.Description); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Asset",
		Name: "assets",
	}
	err = ac.QueryAssets().
		Select(asset.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (ar *AuthRole) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     ar.ID,
		Type:   "AuthRole",
		Fields: make([]*Field, 5),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(ar.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ar.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ar.DeletedAt); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "time.Time",
		Name:  "deleted_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ar.AuthRole); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "authrole.AuthRole",
		Name:  "auth_role",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ar.Description); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Account",
		Name: "accounts",
	}
	err = ar.QueryAccounts().
		Select(account.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "AccountAuthRole",
		Name: "account_auth_roles",
	}
	err = ar.QueryAccountAuthRoles().
		Select(accountauthrole.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (b *Blockchain) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     b.ID,
		Type:   "Blockchain",
		Fields: make([]*Field, 7),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(b.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(b.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(b.DeletedAt); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "time.Time",
		Name:  "deleted_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(b.Name); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(b.Symbol); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "symbol",
		Value: string(buf),
	}
	if buf, err = json.Marshal(b.Icon); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "icon",
		Value: string(buf),
	}
	if buf, err = json.Marshal(b.ChainID); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "int64",
		Name:  "chain_id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Cryptocurrency",
		Name: "cryptocurrencies",
	}
	err = b.QueryCryptocurrencies().
		Select(cryptocurrency.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "BlockchainCryptocurrency",
		Name: "blockchain_cryptocurrencies",
	}
	err = b.QueryBlockchainCryptocurrencies().
		Select(blockchaincryptocurrency.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (bc *BlockchainCryptocurrency) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     bc.ID,
		Type:   "BlockchainCryptocurrency",
		Fields: make([]*Field, 5),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(bc.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(bc.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(bc.DeletedAt); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "time.Time",
		Name:  "deleted_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(bc.BlockchainID); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "pulid.PULID",
		Name:  "blockchain_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(bc.CryptocurrencyID); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "pulid.PULID",
		Name:  "cryptocurrency_id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Blockchain",
		Name: "blockchain",
	}
	err = bc.QueryBlockchain().
		Select(blockchain.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Cryptocurrency",
		Name: "cryptocurrency",
	}
	err = bc.QueryCryptocurrency().
		Select(cryptocurrency.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (c *Cryptocurrency) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     c.ID,
		Type:   "Cryptocurrency",
		Fields: make([]*Field, 7),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(c.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.DeletedAt); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "time.Time",
		Name:  "deleted_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Symbol); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "symbol",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Icon); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "icon",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Name); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.AssetID); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "pulid.PULID",
		Name:  "asset_id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Asset",
		Name: "asset",
	}
	err = c.QueryAsset().
		Select(asset.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Blockchain",
		Name: "blockchains",
	}
	err = c.QueryBlockchains().
		Select(blockchain.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "BlockchainCryptocurrency",
		Name: "blockchain_cryptocurrencies",
	}
	err = c.QueryBlockchainCryptocurrencies().
		Select(blockchaincryptocurrency.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (dap *DailyAssetPrice) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     dap.ID,
		Type:   "DailyAssetPrice",
		Fields: make([]*Field, 10),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(dap.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dap.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dap.DeletedAt); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "time.Time",
		Name:  "deleted_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dap.Time); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dap.Open); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "float64",
		Name:  "open",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dap.High); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "float64",
		Name:  "high",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dap.Low); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "float64",
		Name:  "low",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dap.Close); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "float64",
		Name:  "close",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dap.AdjustedClose); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "float64",
		Name:  "adjusted_close",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dap.BaseAssetID); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "pulid.PULID",
		Name:  "base_asset_id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Asset",
		Name: "base_asset",
	}
	err = dap.QueryBaseAsset().
		Select(asset.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (e *Exchange) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     e.ID,
		Type:   "Exchange",
		Fields: make([]*Field, 6),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(e.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.DeletedAt); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "time.Time",
		Name:  "deleted_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.Name); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.Icon); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "icon",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.URL); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "url",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Transaction",
		Name: "transactions",
	}
	err = e.QueryTransactions().
		Select(transaction.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (po *Portfolio) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     po.ID,
		Type:   "Portfolio",
		Fields: make([]*Field, 7),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(po.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(po.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(po.DeletedAt); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "time.Time",
		Name:  "deleted_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(po.Name); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(po.IsPublic); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "bool",
		Name:  "is_public",
		Value: string(buf),
	}
	if buf, err = json.Marshal(po.IsVisible); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "bool",
		Name:  "is_visible",
		Value: string(buf),
	}
	if buf, err = json.Marshal(po.AccountID); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "pulid.PULID",
		Name:  "account_id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Account",
		Name: "account",
	}
	err = po.QueryAccount().
		Select(account.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Transaction",
		Name: "transactions",
	}
	err = po.QueryTransactions().
		Select(transaction.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (t *Transaction) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     t.ID,
		Type:   "Transaction",
		Fields: make([]*Field, 11),
		Edges:  make([]*Edge, 5),
	}
	var buf []byte
	if buf, err = json.Marshal(t.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(t.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(t.DeletedAt); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "time.Time",
		Name:  "deleted_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(t.Time); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(t.Units); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int",
		Name:  "units",
		Value: string(buf),
	}
	if buf, err = json.Marshal(t.PricePerUnit); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "float64",
		Name:  "price_per_unit",
		Value: string(buf),
	}
	if buf, err = json.Marshal(t.TransactionTypeID); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "pulid.PULID",
		Name:  "transaction_type_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(t.BaseAssetID); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "pulid.PULID",
		Name:  "base_asset_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(t.QuoteAssetID); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "pulid.PULID",
		Name:  "quote_asset_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(t.PortfolioID); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "pulid.PULID",
		Name:  "portfolio_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(t.ExchangeID); err != nil {
		return nil, err
	}
	node.Fields[10] = &Field{
		Type:  "pulid.PULID",
		Name:  "exchange_id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "TransactionType",
		Name: "transaction_type",
	}
	err = t.QueryTransactionType().
		Select(transactiontype.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Asset",
		Name: "base_asset",
	}
	err = t.QueryBaseAsset().
		Select(asset.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Asset",
		Name: "quote_asset",
	}
	err = t.QueryQuoteAsset().
		Select(asset.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Portfolio",
		Name: "portfolio",
	}
	err = t.QueryPortfolio().
		Select(portfolio.FieldID).
		Scan(ctx, &node.Edges[3].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "Exchange",
		Name: "exchange",
	}
	err = t.QueryExchange().
		Select(exchange.FieldID).
		Scan(ctx, &node.Edges[4].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (tt *TransactionType) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     tt.ID,
		Type:   "TransactionType",
		Fields: make([]*Field, 5),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(tt.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(tt.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(tt.DeletedAt); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "time.Time",
		Name:  "deleted_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(tt.TransactionType); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "transactiontype.TransactionType",
		Name:  "transaction_type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(tt.Description); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Transaction",
		Name: "transactions",
	}
	err = tt.QueryTransactions().
		Select(transaction.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (c *Client) Node(ctx context.Context, id pulid.PULID) (*Node, error) {
	n, err := c.Noder(ctx, id)
	if err != nil {
		return nil, err
	}
	return n.Node(ctx)
}

var errNodeInvalidID = &NotFoundError{"node"}

// NodeOption allows configuring the Noder execution using functional options.
type NodeOption func(*nodeOptions)

// WithNodeType sets the node Type resolver function (i.e. the table to query).
// If was not provided, the table will be derived from the universal-id
// configuration as described in: https://entgo.io/docs/migrate/#universal-ids.
func WithNodeType(f func(context.Context, pulid.PULID) (string, error)) NodeOption {
	return func(o *nodeOptions) {
		o.nodeType = f
	}
}

// WithFixedNodeType sets the Type of the node to a fixed value.
func WithFixedNodeType(t string) NodeOption {
	return WithNodeType(func(context.Context, pulid.PULID) (string, error) {
		return t, nil
	})
}

type nodeOptions struct {
	nodeType func(context.Context, pulid.PULID) (string, error)
}

func (c *Client) newNodeOpts(opts []NodeOption) *nodeOptions {
	nopts := &nodeOptions{}
	for _, opt := range opts {
		opt(nopts)
	}
	if nopts.nodeType == nil {
		nopts.nodeType = func(ctx context.Context, id pulid.PULID) (string, error) {
			return "", fmt.Errorf("cannot resolve noder (%v) without its type", id)
		}
	}
	return nopts
}

// Noder returns a Node by its id. If the NodeType was not provided, it will
// be derived from the id value according to the universal-id configuration.
//
//	c.Noder(ctx, id)
//	c.Noder(ctx, id, ent.WithNodeType(typeResolver))
func (c *Client) Noder(ctx context.Context, id pulid.PULID, opts ...NodeOption) (_ Noder, err error) {
	defer func() {
		if IsNotFound(err) {
			err = multierror.Append(err, entgql.ErrNodeNotFound(id))
		}
	}()
	table, err := c.newNodeOpts(opts).nodeType(ctx, id)
	if err != nil {
		return nil, err
	}
	return c.noder(ctx, table, id)
}

func (c *Client) noder(ctx context.Context, table string, id pulid.PULID) (Noder, error) {
	switch table {
	case account.Table:
		var uid pulid.PULID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Account.Query().
			Where(account.ID(uid))
		query, err := query.CollectFields(ctx, "Account")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case accountauthrole.Table:
		var uid pulid.PULID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.AccountAuthRole.Query().
			Where(accountauthrole.ID(uid))
		query, err := query.CollectFields(ctx, "AccountAuthRole")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case asset.Table:
		var uid pulid.PULID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Asset.Query().
			Where(asset.ID(uid))
		query, err := query.CollectFields(ctx, "Asset")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case assetclass.Table:
		var uid pulid.PULID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.AssetClass.Query().
			Where(assetclass.ID(uid))
		query, err := query.CollectFields(ctx, "AssetClass")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case authrole.Table:
		var uid pulid.PULID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.AuthRole.Query().
			Where(authrole.ID(uid))
		query, err := query.CollectFields(ctx, "AuthRole")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case blockchain.Table:
		var uid pulid.PULID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Blockchain.Query().
			Where(blockchain.ID(uid))
		query, err := query.CollectFields(ctx, "Blockchain")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case blockchaincryptocurrency.Table:
		var uid pulid.PULID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.BlockchainCryptocurrency.Query().
			Where(blockchaincryptocurrency.ID(uid))
		query, err := query.CollectFields(ctx, "BlockchainCryptocurrency")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case cryptocurrency.Table:
		var uid pulid.PULID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Cryptocurrency.Query().
			Where(cryptocurrency.ID(uid))
		query, err := query.CollectFields(ctx, "Cryptocurrency")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case dailyassetprice.Table:
		var uid pulid.PULID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.DailyAssetPrice.Query().
			Where(dailyassetprice.ID(uid))
		query, err := query.CollectFields(ctx, "DailyAssetPrice")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case exchange.Table:
		var uid pulid.PULID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Exchange.Query().
			Where(exchange.ID(uid))
		query, err := query.CollectFields(ctx, "Exchange")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case portfolio.Table:
		var uid pulid.PULID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Portfolio.Query().
			Where(portfolio.ID(uid))
		query, err := query.CollectFields(ctx, "Portfolio")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case transaction.Table:
		var uid pulid.PULID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Transaction.Query().
			Where(transaction.ID(uid))
		query, err := query.CollectFields(ctx, "Transaction")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case transactiontype.Table:
		var uid pulid.PULID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.TransactionType.Query().
			Where(transactiontype.ID(uid))
		query, err := query.CollectFields(ctx, "TransactionType")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	default:
		return nil, fmt.Errorf("cannot resolve noder from table %q: %w", table, errNodeInvalidID)
	}
}

func (c *Client) Noders(ctx context.Context, ids []pulid.PULID, opts ...NodeOption) ([]Noder, error) {
	switch len(ids) {
	case 1:
		noder, err := c.Noder(ctx, ids[0], opts...)
		if err != nil {
			return nil, err
		}
		return []Noder{noder}, nil
	case 0:
		return []Noder{}, nil
	}

	noders := make([]Noder, len(ids))
	errors := make([]error, len(ids))
	tables := make(map[string][]pulid.PULID)
	id2idx := make(map[pulid.PULID][]int, len(ids))
	nopts := c.newNodeOpts(opts)
	for i, id := range ids {
		table, err := nopts.nodeType(ctx, id)
		if err != nil {
			errors[i] = err
			continue
		}
		tables[table] = append(tables[table], id)
		id2idx[id] = append(id2idx[id], i)
	}

	for table, ids := range tables {
		nodes, err := c.noders(ctx, table, ids)
		if err != nil {
			for _, id := range ids {
				for _, idx := range id2idx[id] {
					errors[idx] = err
				}
			}
		} else {
			for i, id := range ids {
				for _, idx := range id2idx[id] {
					noders[idx] = nodes[i]
				}
			}
		}
	}

	for i, id := range ids {
		if errors[i] == nil {
			if noders[i] != nil {
				continue
			}
			errors[i] = entgql.ErrNodeNotFound(id)
		} else if IsNotFound(errors[i]) {
			errors[i] = multierror.Append(errors[i], entgql.ErrNodeNotFound(id))
		}
		ctx := graphql.WithPathContext(ctx,
			graphql.NewPathWithIndex(i),
		)
		graphql.AddError(ctx, errors[i])
	}
	return noders, nil
}

func (c *Client) noders(ctx context.Context, table string, ids []pulid.PULID) ([]Noder, error) {
	noders := make([]Noder, len(ids))
	idmap := make(map[pulid.PULID][]*Noder, len(ids))
	for i, id := range ids {
		idmap[id] = append(idmap[id], &noders[i])
	}
	switch table {
	case account.Table:
		query := c.Account.Query().
			Where(account.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Account")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case accountauthrole.Table:
		query := c.AccountAuthRole.Query().
			Where(accountauthrole.IDIn(ids...))
		query, err := query.CollectFields(ctx, "AccountAuthRole")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case asset.Table:
		query := c.Asset.Query().
			Where(asset.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Asset")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case assetclass.Table:
		query := c.AssetClass.Query().
			Where(assetclass.IDIn(ids...))
		query, err := query.CollectFields(ctx, "AssetClass")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case authrole.Table:
		query := c.AuthRole.Query().
			Where(authrole.IDIn(ids...))
		query, err := query.CollectFields(ctx, "AuthRole")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case blockchain.Table:
		query := c.Blockchain.Query().
			Where(blockchain.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Blockchain")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case blockchaincryptocurrency.Table:
		query := c.BlockchainCryptocurrency.Query().
			Where(blockchaincryptocurrency.IDIn(ids...))
		query, err := query.CollectFields(ctx, "BlockchainCryptocurrency")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case cryptocurrency.Table:
		query := c.Cryptocurrency.Query().
			Where(cryptocurrency.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Cryptocurrency")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case dailyassetprice.Table:
		query := c.DailyAssetPrice.Query().
			Where(dailyassetprice.IDIn(ids...))
		query, err := query.CollectFields(ctx, "DailyAssetPrice")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case exchange.Table:
		query := c.Exchange.Query().
			Where(exchange.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Exchange")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case portfolio.Table:
		query := c.Portfolio.Query().
			Where(portfolio.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Portfolio")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case transaction.Table:
		query := c.Transaction.Query().
			Where(transaction.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Transaction")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case transactiontype.Table:
		query := c.TransactionType.Query().
			Where(transactiontype.IDIn(ids...))
		query, err := query.CollectFields(ctx, "TransactionType")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	default:
		return nil, fmt.Errorf("cannot resolve noders from table %q: %w", table, errNodeInvalidID)
	}
	return noders, nil
}
