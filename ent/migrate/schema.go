// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AccountsColumns holds the columns for the "accounts" table.
	AccountsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "auth_type", Type: field.TypeEnum, Enums: []string{"LOCAL", "GOOGLE", "FACEBOOK", "APPLE"}, Default: "LOCAL"},
		{Name: "nickname", Type: field.TypeString, Unique: true},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString, Nullable: true},
		{Name: "password_updated_at", Type: field.TypeTime},
	}
	// AccountsTable holds the schema information for the "accounts" table.
	AccountsTable = &schema.Table{
		Name:       "accounts",
		Columns:    AccountsColumns,
		PrimaryKey: []*schema.Column{AccountsColumns[0]},
	}
	// AccountAuthRolesColumns holds the columns for the "account_auth_roles" table.
	AccountAuthRolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "account_id", Type: field.TypeString},
		{Name: "auth_role_id", Type: field.TypeString},
	}
	// AccountAuthRolesTable holds the schema information for the "account_auth_roles" table.
	AccountAuthRolesTable = &schema.Table{
		Name:       "account_auth_roles",
		Columns:    AccountAuthRolesColumns,
		PrimaryKey: []*schema.Column{AccountAuthRolesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "account_auth_roles_accounts_account",
				Columns:    []*schema.Column{AccountAuthRolesColumns[4]},
				RefColumns: []*schema.Column{AccountsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "account_auth_roles_auth_roles_auth_role",
				Columns:    []*schema.Column{AccountAuthRolesColumns[5]},
				RefColumns: []*schema.Column{AuthRolesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "accountauthrole_account_id_auth_role_id",
				Unique:  true,
				Columns: []*schema.Column{AccountAuthRolesColumns[4], AccountAuthRolesColumns[5]},
			},
		},
	}
	// AssetsColumns holds the columns for the "assets" table.
	AssetsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "asset_class_id", Type: field.TypeString},
	}
	// AssetsTable holds the schema information for the "assets" table.
	AssetsTable = &schema.Table{
		Name:       "assets",
		Columns:    AssetsColumns,
		PrimaryKey: []*schema.Column{AssetsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "assets_asset_classes_asset_class",
				Columns:    []*schema.Column{AssetsColumns[4]},
				RefColumns: []*schema.Column{AssetClassesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// AssetClassesColumns holds the columns for the "asset_classes" table.
	AssetClassesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "asset_class", Type: field.TypeEnum, Enums: []string{"CASH_OR_CASH_EQUIVALENT", "COMMODITY", "CRYPTOCURRENCY", "EQUITY", "FIXED_INCOME", "FUTURE", "REAL_ESTATE"}},
		{Name: "description", Type: field.TypeString, Nullable: true},
	}
	// AssetClassesTable holds the schema information for the "asset_classes" table.
	AssetClassesTable = &schema.Table{
		Name:       "asset_classes",
		Columns:    AssetClassesColumns,
		PrimaryKey: []*schema.Column{AssetClassesColumns[0]},
	}
	// AuthRolesColumns holds the columns for the "auth_roles" table.
	AuthRolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "auth_role", Type: field.TypeEnum, Enums: []string{"DEMO", "FREE", "PLUS", "PRO", "ENTERPRISE", "SUPPORT", "ADMIN", "SUPER_ADMIN"}},
		{Name: "description", Type: field.TypeString, Nullable: true},
	}
	// AuthRolesTable holds the schema information for the "auth_roles" table.
	AuthRolesTable = &schema.Table{
		Name:       "auth_roles",
		Columns:    AuthRolesColumns,
		PrimaryKey: []*schema.Column{AuthRolesColumns[0]},
	}
	// BlockchainsColumns holds the columns for the "blockchains" table.
	BlockchainsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "symbol", Type: field.TypeString},
		{Name: "icon", Type: field.TypeString, Nullable: true},
		{Name: "chain_id", Type: field.TypeInt64, Nullable: true},
	}
	// BlockchainsTable holds the schema information for the "blockchains" table.
	BlockchainsTable = &schema.Table{
		Name:       "blockchains",
		Columns:    BlockchainsColumns,
		PrimaryKey: []*schema.Column{BlockchainsColumns[0]},
	}
	// BlockchainCryptocurrenciesColumns holds the columns for the "blockchain_cryptocurrencies" table.
	BlockchainCryptocurrenciesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "blockchain_id", Type: field.TypeString},
		{Name: "cryptocurrency_id", Type: field.TypeString},
	}
	// BlockchainCryptocurrenciesTable holds the schema information for the "blockchain_cryptocurrencies" table.
	BlockchainCryptocurrenciesTable = &schema.Table{
		Name:       "blockchain_cryptocurrencies",
		Columns:    BlockchainCryptocurrenciesColumns,
		PrimaryKey: []*schema.Column{BlockchainCryptocurrenciesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "blockchain_cryptocurrencies_blockchains_blockchain",
				Columns:    []*schema.Column{BlockchainCryptocurrenciesColumns[4]},
				RefColumns: []*schema.Column{BlockchainsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "blockchain_cryptocurrencies_cryptocurrencies_cryptocurrency",
				Columns:    []*schema.Column{BlockchainCryptocurrenciesColumns[5]},
				RefColumns: []*schema.Column{CryptocurrenciesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "blockchaincryptocurrency_blockchain_id_cryptocurrency_id",
				Unique:  true,
				Columns: []*schema.Column{BlockchainCryptocurrenciesColumns[4], BlockchainCryptocurrenciesColumns[5]},
			},
		},
	}
	// CryptocurrenciesColumns holds the columns for the "cryptocurrencies" table.
	CryptocurrenciesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "symbol", Type: field.TypeString},
		{Name: "icon", Type: field.TypeString, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "asset_id", Type: field.TypeString, Unique: true},
	}
	// CryptocurrenciesTable holds the schema information for the "cryptocurrencies" table.
	CryptocurrenciesTable = &schema.Table{
		Name:       "cryptocurrencies",
		Columns:    CryptocurrenciesColumns,
		PrimaryKey: []*schema.Column{CryptocurrenciesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "cryptocurrencies_assets_cryptocurrency",
				Columns:    []*schema.Column{CryptocurrenciesColumns[7]},
				RefColumns: []*schema.Column{AssetsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// DailyAssetPricesColumns holds the columns for the "daily_asset_prices" table.
	DailyAssetPricesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "time", Type: field.TypeTime},
		{Name: "open", Type: field.TypeFloat64, Nullable: true},
		{Name: "high", Type: field.TypeFloat64, Nullable: true},
		{Name: "low", Type: field.TypeFloat64, Nullable: true},
		{Name: "close", Type: field.TypeFloat64, Nullable: true},
		{Name: "adjusted_close", Type: field.TypeFloat64},
		{Name: "base_asset_id", Type: field.TypeString},
	}
	// DailyAssetPricesTable holds the schema information for the "daily_asset_prices" table.
	DailyAssetPricesTable = &schema.Table{
		Name:       "daily_asset_prices",
		Columns:    DailyAssetPricesColumns,
		PrimaryKey: []*schema.Column{DailyAssetPricesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "daily_asset_prices_assets_daily_asset_price",
				Columns:    []*schema.Column{DailyAssetPricesColumns[10]},
				RefColumns: []*schema.Column{AssetsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "dailyassetprice_base_asset_id_time",
				Unique:  true,
				Columns: []*schema.Column{DailyAssetPricesColumns[10], DailyAssetPricesColumns[4]},
			},
		},
	}
	// ExchangesColumns holds the columns for the "exchanges" table.
	ExchangesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "icon", Type: field.TypeString, Nullable: true},
		{Name: "url", Type: field.TypeString, Nullable: true},
	}
	// ExchangesTable holds the schema information for the "exchanges" table.
	ExchangesTable = &schema.Table{
		Name:       "exchanges",
		Columns:    ExchangesColumns,
		PrimaryKey: []*schema.Column{ExchangesColumns[0]},
	}
	// PortfoliosColumns holds the columns for the "portfolios" table.
	PortfoliosColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "is_public", Type: field.TypeBool, Default: false},
		{Name: "is_visible", Type: field.TypeBool, Default: true},
		{Name: "account_id", Type: field.TypeString},
	}
	// PortfoliosTable holds the schema information for the "portfolios" table.
	PortfoliosTable = &schema.Table{
		Name:       "portfolios",
		Columns:    PortfoliosColumns,
		PrimaryKey: []*schema.Column{PortfoliosColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "portfolios_accounts_portfolios",
				Columns:    []*schema.Column{PortfoliosColumns[7]},
				RefColumns: []*schema.Column{AccountsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "portfolio_account_id_name",
				Unique:  true,
				Columns: []*schema.Column{PortfoliosColumns[7], PortfoliosColumns[4]},
			},
		},
	}
	// StaffAccountsColumns holds the columns for the "staff_accounts" table.
	StaffAccountsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "auth_type", Type: field.TypeEnum, Enums: []string{"LOCAL", "GOOGLE", "FACEBOOK", "APPLE"}, Default: "LOCAL"},
		{Name: "nickname", Type: field.TypeString, Unique: true},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString, Nullable: true},
		{Name: "password_updated_at", Type: field.TypeTime},
	}
	// StaffAccountsTable holds the schema information for the "staff_accounts" table.
	StaffAccountsTable = &schema.Table{
		Name:       "staff_accounts",
		Columns:    StaffAccountsColumns,
		PrimaryKey: []*schema.Column{StaffAccountsColumns[0]},
	}
	// StaffAccountAuthRolesColumns holds the columns for the "staff_account_auth_roles" table.
	StaffAccountAuthRolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "staff_account_id", Type: field.TypeString},
		{Name: "auth_role_id", Type: field.TypeString},
	}
	// StaffAccountAuthRolesTable holds the schema information for the "staff_account_auth_roles" table.
	StaffAccountAuthRolesTable = &schema.Table{
		Name:       "staff_account_auth_roles",
		Columns:    StaffAccountAuthRolesColumns,
		PrimaryKey: []*schema.Column{StaffAccountAuthRolesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "staff_account_auth_roles_staff_accounts_staff_account",
				Columns:    []*schema.Column{StaffAccountAuthRolesColumns[4]},
				RefColumns: []*schema.Column{StaffAccountsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "staff_account_auth_roles_auth_roles_auth_role",
				Columns:    []*schema.Column{StaffAccountAuthRolesColumns[5]},
				RefColumns: []*schema.Column{AuthRolesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "staffaccountauthrole_staff_account_id_auth_role_id",
				Unique:  true,
				Columns: []*schema.Column{StaffAccountAuthRolesColumns[4], StaffAccountAuthRolesColumns[5]},
			},
		},
	}
	// TransactionsColumns holds the columns for the "transactions" table.
	TransactionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "time", Type: field.TypeTime},
		{Name: "units", Type: field.TypeInt},
		{Name: "price_per_unit", Type: field.TypeFloat64},
		{Name: "exchange_id", Type: field.TypeString},
		{Name: "portfolio_id", Type: field.TypeString},
		{Name: "transaction_type_id", Type: field.TypeString},
		{Name: "base_asset_id", Type: field.TypeString},
		{Name: "quote_asset_id", Type: field.TypeString, Nullable: true},
	}
	// TransactionsTable holds the schema information for the "transactions" table.
	TransactionsTable = &schema.Table{
		Name:       "transactions",
		Columns:    TransactionsColumns,
		PrimaryKey: []*schema.Column{TransactionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "transactions_exchanges_transactions",
				Columns:    []*schema.Column{TransactionsColumns[7]},
				RefColumns: []*schema.Column{ExchangesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "transactions_portfolios_transactions",
				Columns:    []*schema.Column{TransactionsColumns[8]},
				RefColumns: []*schema.Column{PortfoliosColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "transactions_transaction_types_transaction_type",
				Columns:    []*schema.Column{TransactionsColumns[9]},
				RefColumns: []*schema.Column{TransactionTypesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "transactions_assets_base_asset",
				Columns:    []*schema.Column{TransactionsColumns[10]},
				RefColumns: []*schema.Column{AssetsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "transactions_assets_quote_asset",
				Columns:    []*schema.Column{TransactionsColumns[11]},
				RefColumns: []*schema.Column{AssetsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TransactionTypesColumns holds the columns for the "transaction_types" table.
	TransactionTypesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "transaction_type", Type: field.TypeEnum, Enums: []string{"BUY", "SELL", "STAKE", "DIVIDEND_INCOME", "RENT_PAYMENT", "RENT_INCOME", "STOCK_DIVIDEND"}},
		{Name: "description", Type: field.TypeString, Nullable: true},
	}
	// TransactionTypesTable holds the schema information for the "transaction_types" table.
	TransactionTypesTable = &schema.Table{
		Name:       "transaction_types",
		Columns:    TransactionTypesColumns,
		PrimaryKey: []*schema.Column{TransactionTypesColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AccountsTable,
		AccountAuthRolesTable,
		AssetsTable,
		AssetClassesTable,
		AuthRolesTable,
		BlockchainsTable,
		BlockchainCryptocurrenciesTable,
		CryptocurrenciesTable,
		DailyAssetPricesTable,
		ExchangesTable,
		PortfoliosTable,
		StaffAccountsTable,
		StaffAccountAuthRolesTable,
		TransactionsTable,
		TransactionTypesTable,
	}
)

func init() {
	AccountsTable.Annotation = &entsql.Annotation{}
	AccountsTable.Annotation.Checks = map[string]string{
		"account_chk_if_auth_type_local_then_password_not_null": "(auth_type <> 'LOCAL') OR (password IS NOT NULL)",
	}
	AccountAuthRolesTable.ForeignKeys[0].RefTable = AccountsTable
	AccountAuthRolesTable.ForeignKeys[1].RefTable = AuthRolesTable
	AssetsTable.ForeignKeys[0].RefTable = AssetClassesTable
	BlockchainCryptocurrenciesTable.ForeignKeys[0].RefTable = BlockchainsTable
	BlockchainCryptocurrenciesTable.ForeignKeys[1].RefTable = CryptocurrenciesTable
	CryptocurrenciesTable.ForeignKeys[0].RefTable = AssetsTable
	DailyAssetPricesTable.ForeignKeys[0].RefTable = AssetsTable
	PortfoliosTable.ForeignKeys[0].RefTable = AccountsTable
	StaffAccountsTable.Annotation = &entsql.Annotation{}
	StaffAccountsTable.Annotation.Checks = map[string]string{
		"staff_account_chk_if_auth_type_local_then_password_not_null": "(auth_type <> 'LOCAL') OR (password IS NOT NULL)",
	}
	StaffAccountAuthRolesTable.ForeignKeys[0].RefTable = StaffAccountsTable
	StaffAccountAuthRolesTable.ForeignKeys[1].RefTable = AuthRolesTable
	TransactionsTable.ForeignKeys[0].RefTable = ExchangesTable
	TransactionsTable.ForeignKeys[1].RefTable = PortfoliosTable
	TransactionsTable.ForeignKeys[2].RefTable = TransactionTypesTable
	TransactionsTable.ForeignKeys[3].RefTable = AssetsTable
	TransactionsTable.ForeignKeys[4].RefTable = AssetsTable
}
