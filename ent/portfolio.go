// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/chenningg/hermitboard-api/ent/account"
	"github.com/chenningg/hermitboard-api/ent/portfolio"
	"github.com/chenningg/hermitboard-api/pulid"
)

// Portfolio is the model entity for the Portfolio schema.
type Portfolio struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.PULID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Whether this portfolio is visible to others.
	IsPublic bool `json:"isPublic,omitempty"`
	// Whether this portfolio is visible to the owner.
	IsVisible bool `json:"isVisible,omitempty"`
	// AccountID holds the value of the "account_id" field.
	AccountID pulid.PULID `json:"accountID,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PortfolioQuery when eager-loading is set.
	Edges PortfolioEdges `json:"edges"`
}

// PortfolioEdges holds the relations/edges for other nodes in the graph.
type PortfolioEdges struct {
	// Account holds the value of the account edge.
	Account *Account `json:"account,omitempty"`
	// Transactions holds the value of the transactions edge.
	Transactions []*Transaction `json:"transactions,omitempty"`
	// Connections holds the value of the connections edge.
	Connections []*Connection `json:"connections,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedTransactions map[string][]*Transaction
	namedConnections  map[string][]*Connection
}

// AccountOrErr returns the Account value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PortfolioEdges) AccountOrErr() (*Account, error) {
	if e.loadedTypes[0] {
		if e.Account == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: account.Label}
		}
		return e.Account, nil
	}
	return nil, &NotLoadedError{edge: "account"}
}

// TransactionsOrErr returns the Transactions value or an error if the edge
// was not loaded in eager-loading.
func (e PortfolioEdges) TransactionsOrErr() ([]*Transaction, error) {
	if e.loadedTypes[1] {
		return e.Transactions, nil
	}
	return nil, &NotLoadedError{edge: "transactions"}
}

// ConnectionsOrErr returns the Connections value or an error if the edge
// was not loaded in eager-loading.
func (e PortfolioEdges) ConnectionsOrErr() ([]*Connection, error) {
	if e.loadedTypes[2] {
		return e.Connections, nil
	}
	return nil, &NotLoadedError{edge: "connections"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Portfolio) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case portfolio.FieldID, portfolio.FieldAccountID:
			values[i] = new(pulid.PULID)
		case portfolio.FieldIsPublic, portfolio.FieldIsVisible:
			values[i] = new(sql.NullBool)
		case portfolio.FieldName:
			values[i] = new(sql.NullString)
		case portfolio.FieldCreatedAt, portfolio.FieldUpdatedAt, portfolio.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Portfolio", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Portfolio fields.
func (po *Portfolio) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case portfolio.FieldID:
			if value, ok := values[i].(*pulid.PULID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				po.ID = *value
			}
		case portfolio.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				po.CreatedAt = value.Time
			}
		case portfolio.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				po.UpdatedAt = value.Time
			}
		case portfolio.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				po.DeletedAt = new(time.Time)
				*po.DeletedAt = value.Time
			}
		case portfolio.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				po.Name = value.String
			}
		case portfolio.FieldIsPublic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_public", values[i])
			} else if value.Valid {
				po.IsPublic = value.Bool
			}
		case portfolio.FieldIsVisible:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_visible", values[i])
			} else if value.Valid {
				po.IsVisible = value.Bool
			}
		case portfolio.FieldAccountID:
			if value, ok := values[i].(*pulid.PULID); !ok {
				return fmt.Errorf("unexpected type %T for field account_id", values[i])
			} else if value != nil {
				po.AccountID = *value
			}
		}
	}
	return nil
}

// QueryAccount queries the "account" edge of the Portfolio entity.
func (po *Portfolio) QueryAccount() *AccountQuery {
	return (&PortfolioClient{config: po.config}).QueryAccount(po)
}

// QueryTransactions queries the "transactions" edge of the Portfolio entity.
func (po *Portfolio) QueryTransactions() *TransactionQuery {
	return (&PortfolioClient{config: po.config}).QueryTransactions(po)
}

// QueryConnections queries the "connections" edge of the Portfolio entity.
func (po *Portfolio) QueryConnections() *ConnectionQuery {
	return (&PortfolioClient{config: po.config}).QueryConnections(po)
}

// Update returns a builder for updating this Portfolio.
// Note that you need to call Portfolio.Unwrap() before calling this method if this Portfolio
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Portfolio) Update() *PortfolioUpdateOne {
	return (&PortfolioClient{config: po.config}).UpdateOne(po)
}

// Unwrap unwraps the Portfolio entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *Portfolio) Unwrap() *Portfolio {
	_tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Portfolio is not a transactional entity")
	}
	po.config.driver = _tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Portfolio) String() string {
	var builder strings.Builder
	builder.WriteString("Portfolio(")
	builder.WriteString(fmt.Sprintf("id=%v, ", po.ID))
	builder.WriteString("created_at=")
	builder.WriteString(po.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(po.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := po.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(po.Name)
	builder.WriteString(", ")
	builder.WriteString("is_public=")
	builder.WriteString(fmt.Sprintf("%v", po.IsPublic))
	builder.WriteString(", ")
	builder.WriteString("is_visible=")
	builder.WriteString(fmt.Sprintf("%v", po.IsVisible))
	builder.WriteString(", ")
	builder.WriteString("account_id=")
	builder.WriteString(fmt.Sprintf("%v", po.AccountID))
	builder.WriteByte(')')
	return builder.String()
}

// NamedTransactions returns the Transactions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (po *Portfolio) NamedTransactions(name string) ([]*Transaction, error) {
	if po.Edges.namedTransactions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := po.Edges.namedTransactions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (po *Portfolio) appendNamedTransactions(name string, edges ...*Transaction) {
	if po.Edges.namedTransactions == nil {
		po.Edges.namedTransactions = make(map[string][]*Transaction)
	}
	if len(edges) == 0 {
		po.Edges.namedTransactions[name] = []*Transaction{}
	} else {
		po.Edges.namedTransactions[name] = append(po.Edges.namedTransactions[name], edges...)
	}
}

// NamedConnections returns the Connections named value or an error if the edge was not
// loaded in eager-loading with this name.
func (po *Portfolio) NamedConnections(name string) ([]*Connection, error) {
	if po.Edges.namedConnections == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := po.Edges.namedConnections[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (po *Portfolio) appendNamedConnections(name string, edges ...*Connection) {
	if po.Edges.namedConnections == nil {
		po.Edges.namedConnections = make(map[string][]*Connection)
	}
	if len(edges) == 0 {
		po.Edges.namedConnections[name] = []*Connection{}
	} else {
		po.Edges.namedConnections[name] = append(po.Edges.namedConnections[name], edges...)
	}
}

// Portfolios is a parsable slice of Portfolio.
type Portfolios []*Portfolio

func (po Portfolios) config(cfg config) {
	for _i := range po {
		po[_i].config = cfg
	}
}
