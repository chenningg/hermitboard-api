// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/chenningg/hermitboard-api/ent/account"
	"github.com/chenningg/hermitboard-api/ent/portfolio"
	"github.com/oklog/ulid/v2"
	ulid "github.com/oklog/ulid/v2"
)

// Portfolio is the model entity for the Portfolio schema.
type Portfolio struct {
	config `json:"-"`
	// ID of the ent.
	ID ulid.ULID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Whether this portfolio is visible to others.
	IsPublic bool `json:"is_public,omitempty"`
	// Whether this portfolio is visible to the owner.
	IsVisible bool `json:"is_visible,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PortfolioQuery when eager-loading is set.
	Edges              PortfolioEdges `json:"edges"`
	account_portfolios *ulid.ULID
}

// PortfolioEdges holds the relations/edges for other nodes in the graph.
type PortfolioEdges struct {
	// Account holds the value of the account edge.
	Account *Account `json:"account,omitempty"`
	// Transactions holds the value of the transactions edge.
	Transactions []*Transaction `json:"transactions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AccountOrErr returns the Account value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PortfolioEdges) AccountOrErr() (*Account, error) {
	if e.loadedTypes[0] {
		if e.Account == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: account.Label}
		}
		return e.Account, nil
	}
	return nil, &NotLoadedError{edge: "account"}
}

// TransactionsOrErr returns the Transactions value or an error if the edge
// was not loaded in eager-loading.
func (e PortfolioEdges) TransactionsOrErr() ([]*Transaction, error) {
	if e.loadedTypes[1] {
		return e.Transactions, nil
	}
	return nil, &NotLoadedError{edge: "transactions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Portfolio) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case portfolio.FieldIsPublic, portfolio.FieldIsVisible:
			values[i] = new(sql.NullBool)
		case portfolio.FieldName:
			values[i] = new(sql.NullString)
		case portfolio.FieldCreatedAt, portfolio.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case portfolio.FieldID:
			values[i] = new(ulid.ULID)
		case portfolio.ForeignKeys[0]: // account_portfolios
			values[i] = &sql.NullScanner{S: new(ulid.ULID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Portfolio", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Portfolio fields.
func (po *Portfolio) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case portfolio.FieldID:
			if value, ok := values[i].(*ulid.ULID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				po.ID = *value
			}
		case portfolio.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				po.CreatedAt = value.Time
			}
		case portfolio.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				po.UpdatedAt = value.Time
			}
		case portfolio.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				po.Name = value.String
			}
		case portfolio.FieldIsPublic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_public", values[i])
			} else if value.Valid {
				po.IsPublic = value.Bool
			}
		case portfolio.FieldIsVisible:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_visible", values[i])
			} else if value.Valid {
				po.IsVisible = value.Bool
			}
		case portfolio.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field account_portfolios", values[i])
			} else if value.Valid {
				po.account_portfolios = new(ulid.ULID)
				*po.account_portfolios = *value.S.(*ulid.ULID)
			}
		}
	}
	return nil
}

// QueryAccount queries the "account" edge of the Portfolio entity.
func (po *Portfolio) QueryAccount() *AccountQuery {
	return (&PortfolioClient{config: po.config}).QueryAccount(po)
}

// QueryTransactions queries the "transactions" edge of the Portfolio entity.
func (po *Portfolio) QueryTransactions() *TransactionQuery {
	return (&PortfolioClient{config: po.config}).QueryTransactions(po)
}

// Update returns a builder for updating this Portfolio.
// Note that you need to call Portfolio.Unwrap() before calling this method if this Portfolio
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Portfolio) Update() *PortfolioUpdateOne {
	return (&PortfolioClient{config: po.config}).UpdateOne(po)
}

// Unwrap unwraps the Portfolio entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *Portfolio) Unwrap() *Portfolio {
	_tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Portfolio is not a transactional entity")
	}
	po.config.driver = _tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Portfolio) String() string {
	var builder strings.Builder
	builder.WriteString("Portfolio(")
	builder.WriteString(fmt.Sprintf("id=%v, ", po.ID))
	builder.WriteString("created_at=")
	builder.WriteString(po.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(po.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(po.Name)
	builder.WriteString(", ")
	builder.WriteString("is_public=")
	builder.WriteString(fmt.Sprintf("%v", po.IsPublic))
	builder.WriteString(", ")
	builder.WriteString("is_visible=")
	builder.WriteString(fmt.Sprintf("%v", po.IsVisible))
	builder.WriteByte(')')
	return builder.String()
}

// Portfolios is a parsable slice of Portfolio.
type Portfolios []*Portfolio

func (po Portfolios) config(cfg config) {
	for _i := range po {
		po[_i].config = cfg
	}
}
