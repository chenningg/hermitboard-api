// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chenningg/hermitboard-api/ent/account"
	"github.com/chenningg/hermitboard-api/ent/portfolio"
	"github.com/chenningg/hermitboard-api/ent/predicate"
	"github.com/chenningg/hermitboard-api/ent/transaction"
	"github.com/chenningg/hermitboard-api/pulid"
)

// PortfolioUpdate is the builder for updating Portfolio entities.
type PortfolioUpdate struct {
	config
	hooks    []Hook
	mutation *PortfolioMutation
}

// Where appends a list predicates to the PortfolioUpdate builder.
func (pu *PortfolioUpdate) Where(ps ...predicate.Portfolio) *PortfolioUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PortfolioUpdate) SetUpdatedAt(t time.Time) *PortfolioUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *PortfolioUpdate) SetDeletedAt(t time.Time) *PortfolioUpdate {
	pu.mutation.SetDeletedAt(t)
	return pu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pu *PortfolioUpdate) ClearDeletedAt() *PortfolioUpdate {
	pu.mutation.ClearDeletedAt()
	return pu
}

// SetName sets the "name" field.
func (pu *PortfolioUpdate) SetName(s string) *PortfolioUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetIsPublic sets the "is_public" field.
func (pu *PortfolioUpdate) SetIsPublic(b bool) *PortfolioUpdate {
	pu.mutation.SetIsPublic(b)
	return pu
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (pu *PortfolioUpdate) SetNillableIsPublic(b *bool) *PortfolioUpdate {
	if b != nil {
		pu.SetIsPublic(*b)
	}
	return pu
}

// SetIsVisible sets the "is_visible" field.
func (pu *PortfolioUpdate) SetIsVisible(b bool) *PortfolioUpdate {
	pu.mutation.SetIsVisible(b)
	return pu
}

// SetNillableIsVisible sets the "is_visible" field if the given value is not nil.
func (pu *PortfolioUpdate) SetNillableIsVisible(b *bool) *PortfolioUpdate {
	if b != nil {
		pu.SetIsVisible(*b)
	}
	return pu
}

// SetAccountID sets the "account_id" field.
func (pu *PortfolioUpdate) SetAccountID(value pulid.PULID) *PortfolioUpdate {
	pu.mutation.SetAccountID(value)
	return pu
}

// SetAccount sets the "account" edge to the Account entity.
func (pu *PortfolioUpdate) SetAccount(a *Account) *PortfolioUpdate {
	return pu.SetAccountID(a.ID)
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (pu *PortfolioUpdate) AddTransactionIDs(ids ...pulid.PULID) *PortfolioUpdate {
	pu.mutation.AddTransactionIDs(ids...)
	return pu
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (pu *PortfolioUpdate) AddTransactions(t ...*Transaction) *PortfolioUpdate {
	ids := make([]pulid.PULID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.AddTransactionIDs(ids...)
}

// Mutation returns the PortfolioMutation object of the builder.
func (pu *PortfolioUpdate) Mutation() *PortfolioMutation {
	return pu.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (pu *PortfolioUpdate) ClearAccount() *PortfolioUpdate {
	pu.mutation.ClearAccount()
	return pu
}

// ClearTransactions clears all "transactions" edges to the Transaction entity.
func (pu *PortfolioUpdate) ClearTransactions() *PortfolioUpdate {
	pu.mutation.ClearTransactions()
	return pu
}

// RemoveTransactionIDs removes the "transactions" edge to Transaction entities by IDs.
func (pu *PortfolioUpdate) RemoveTransactionIDs(ids ...pulid.PULID) *PortfolioUpdate {
	pu.mutation.RemoveTransactionIDs(ids...)
	return pu
}

// RemoveTransactions removes "transactions" edges to Transaction entities.
func (pu *PortfolioUpdate) RemoveTransactions(t ...*Transaction) *PortfolioUpdate {
	ids := make([]pulid.PULID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.RemoveTransactionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PortfolioUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pu.defaults()
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PortfolioMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PortfolioUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PortfolioUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PortfolioUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PortfolioUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := portfolio.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
	if _, ok := pu.mutation.DeletedAt(); !ok && !pu.mutation.DeletedAtCleared() {
		v := portfolio.UpdateDefaultDeletedAt()
		pu.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PortfolioUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := portfolio.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Portfolio.name": %w`, err)}
		}
	}
	if _, ok := pu.mutation.AccountID(); pu.mutation.AccountCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Portfolio.account"`)
	}
	return nil
}

func (pu *PortfolioUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   portfolio.Table,
			Columns: portfolio.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: portfolio.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: portfolio.FieldUpdatedAt,
		})
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: portfolio.FieldDeletedAt,
		})
	}
	if pu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: portfolio.FieldDeletedAt,
		})
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: portfolio.FieldName,
		})
	}
	if value, ok := pu.mutation.IsPublic(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: portfolio.FieldIsPublic,
		})
	}
	if value, ok := pu.mutation.IsVisible(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: portfolio.FieldIsVisible,
		})
	}
	if pu.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portfolio.AccountTable,
			Columns: []string{portfolio.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: account.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portfolio.AccountTable,
			Columns: []string{portfolio.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   portfolio.TransactionsTable,
			Columns: []string{portfolio.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !pu.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   portfolio.TransactionsTable,
			Columns: []string{portfolio.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   portfolio.TransactionsTable,
			Columns: []string{portfolio.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{portfolio.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// PortfolioUpdateOne is the builder for updating a single Portfolio entity.
type PortfolioUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PortfolioMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PortfolioUpdateOne) SetUpdatedAt(t time.Time) *PortfolioUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *PortfolioUpdateOne) SetDeletedAt(t time.Time) *PortfolioUpdateOne {
	puo.mutation.SetDeletedAt(t)
	return puo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (puo *PortfolioUpdateOne) ClearDeletedAt() *PortfolioUpdateOne {
	puo.mutation.ClearDeletedAt()
	return puo
}

// SetName sets the "name" field.
func (puo *PortfolioUpdateOne) SetName(s string) *PortfolioUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetIsPublic sets the "is_public" field.
func (puo *PortfolioUpdateOne) SetIsPublic(b bool) *PortfolioUpdateOne {
	puo.mutation.SetIsPublic(b)
	return puo
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (puo *PortfolioUpdateOne) SetNillableIsPublic(b *bool) *PortfolioUpdateOne {
	if b != nil {
		puo.SetIsPublic(*b)
	}
	return puo
}

// SetIsVisible sets the "is_visible" field.
func (puo *PortfolioUpdateOne) SetIsVisible(b bool) *PortfolioUpdateOne {
	puo.mutation.SetIsVisible(b)
	return puo
}

// SetNillableIsVisible sets the "is_visible" field if the given value is not nil.
func (puo *PortfolioUpdateOne) SetNillableIsVisible(b *bool) *PortfolioUpdateOne {
	if b != nil {
		puo.SetIsVisible(*b)
	}
	return puo
}

// SetAccountID sets the "account_id" field.
func (puo *PortfolioUpdateOne) SetAccountID(pu pulid.PULID) *PortfolioUpdateOne {
	puo.mutation.SetAccountID(pu)
	return puo
}

// SetAccount sets the "account" edge to the Account entity.
func (puo *PortfolioUpdateOne) SetAccount(a *Account) *PortfolioUpdateOne {
	return puo.SetAccountID(a.ID)
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (puo *PortfolioUpdateOne) AddTransactionIDs(ids ...pulid.PULID) *PortfolioUpdateOne {
	puo.mutation.AddTransactionIDs(ids...)
	return puo
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (puo *PortfolioUpdateOne) AddTransactions(t ...*Transaction) *PortfolioUpdateOne {
	ids := make([]pulid.PULID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.AddTransactionIDs(ids...)
}

// Mutation returns the PortfolioMutation object of the builder.
func (puo *PortfolioUpdateOne) Mutation() *PortfolioMutation {
	return puo.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (puo *PortfolioUpdateOne) ClearAccount() *PortfolioUpdateOne {
	puo.mutation.ClearAccount()
	return puo
}

// ClearTransactions clears all "transactions" edges to the Transaction entity.
func (puo *PortfolioUpdateOne) ClearTransactions() *PortfolioUpdateOne {
	puo.mutation.ClearTransactions()
	return puo
}

// RemoveTransactionIDs removes the "transactions" edge to Transaction entities by IDs.
func (puo *PortfolioUpdateOne) RemoveTransactionIDs(ids ...pulid.PULID) *PortfolioUpdateOne {
	puo.mutation.RemoveTransactionIDs(ids...)
	return puo
}

// RemoveTransactions removes "transactions" edges to Transaction entities.
func (puo *PortfolioUpdateOne) RemoveTransactions(t ...*Transaction) *PortfolioUpdateOne {
	ids := make([]pulid.PULID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.RemoveTransactionIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PortfolioUpdateOne) Select(field string, fields ...string) *PortfolioUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Portfolio entity.
func (puo *PortfolioUpdateOne) Save(ctx context.Context) (*Portfolio, error) {
	var (
		err  error
		node *Portfolio
	)
	puo.defaults()
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PortfolioMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, puo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Portfolio)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PortfolioMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PortfolioUpdateOne) SaveX(ctx context.Context) *Portfolio {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PortfolioUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PortfolioUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PortfolioUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := portfolio.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
	if _, ok := puo.mutation.DeletedAt(); !ok && !puo.mutation.DeletedAtCleared() {
		v := portfolio.UpdateDefaultDeletedAt()
		puo.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PortfolioUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := portfolio.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Portfolio.name": %w`, err)}
		}
	}
	if _, ok := puo.mutation.AccountID(); puo.mutation.AccountCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Portfolio.account"`)
	}
	return nil
}

func (puo *PortfolioUpdateOne) sqlSave(ctx context.Context) (_node *Portfolio, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   portfolio.Table,
			Columns: portfolio.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: portfolio.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Portfolio.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, portfolio.FieldID)
		for _, f := range fields {
			if !portfolio.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != portfolio.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: portfolio.FieldUpdatedAt,
		})
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: portfolio.FieldDeletedAt,
		})
	}
	if puo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: portfolio.FieldDeletedAt,
		})
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: portfolio.FieldName,
		})
	}
	if value, ok := puo.mutation.IsPublic(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: portfolio.FieldIsPublic,
		})
	}
	if value, ok := puo.mutation.IsVisible(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: portfolio.FieldIsVisible,
		})
	}
	if puo.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portfolio.AccountTable,
			Columns: []string{portfolio.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: account.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portfolio.AccountTable,
			Columns: []string{portfolio.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   portfolio.TransactionsTable,
			Columns: []string{portfolio.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !puo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   portfolio.TransactionsTable,
			Columns: []string{portfolio.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   portfolio.TransactionsTable,
			Columns: []string{portfolio.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Portfolio{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{portfolio.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
