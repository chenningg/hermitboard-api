// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chenningg/hermitboard-api/ent/connection"
	"github.com/chenningg/hermitboard-api/ent/source"
	"github.com/chenningg/hermitboard-api/ent/sourcetype"
	"github.com/chenningg/hermitboard-api/pulid"
)

// SourceCreate is the builder for creating a Source entity.
type SourceCreate struct {
	config
	mutation *SourceMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sc *SourceCreate) SetCreatedAt(t time.Time) *SourceCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SourceCreate) SetNillableCreatedAt(t *time.Time) *SourceCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SourceCreate) SetUpdatedAt(t time.Time) *SourceCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SourceCreate) SetNillableUpdatedAt(t *time.Time) *SourceCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetDeletedAt sets the "deleted_at" field.
func (sc *SourceCreate) SetDeletedAt(t time.Time) *SourceCreate {
	sc.mutation.SetDeletedAt(t)
	return sc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sc *SourceCreate) SetNillableDeletedAt(t *time.Time) *SourceCreate {
	if t != nil {
		sc.SetDeletedAt(*t)
	}
	return sc
}

// SetName sets the "name" field.
func (sc *SourceCreate) SetName(s string) *SourceCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetIcon sets the "icon" field.
func (sc *SourceCreate) SetIcon(s string) *SourceCreate {
	sc.mutation.SetIcon(s)
	return sc
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (sc *SourceCreate) SetNillableIcon(s *string) *SourceCreate {
	if s != nil {
		sc.SetIcon(*s)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SourceCreate) SetID(pu pulid.PULID) *SourceCreate {
	sc.mutation.SetID(pu)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *SourceCreate) SetNillableID(pu *pulid.PULID) *SourceCreate {
	if pu != nil {
		sc.SetID(*pu)
	}
	return sc
}

// AddConnectionIDs adds the "connections" edge to the Connection entity by IDs.
func (sc *SourceCreate) AddConnectionIDs(ids ...pulid.PULID) *SourceCreate {
	sc.mutation.AddConnectionIDs(ids...)
	return sc
}

// AddConnections adds the "connections" edges to the Connection entity.
func (sc *SourceCreate) AddConnections(c ...*Connection) *SourceCreate {
	ids := make([]pulid.PULID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sc.AddConnectionIDs(ids...)
}

// SetSourceTypeID sets the "source_type" edge to the SourceType entity by ID.
func (sc *SourceCreate) SetSourceTypeID(id pulid.PULID) *SourceCreate {
	sc.mutation.SetSourceTypeID(id)
	return sc
}

// SetSourceType sets the "source_type" edge to the SourceType entity.
func (sc *SourceCreate) SetSourceType(s *SourceType) *SourceCreate {
	return sc.SetSourceTypeID(s.ID)
}

// Mutation returns the SourceMutation object of the builder.
func (sc *SourceCreate) Mutation() *SourceMutation {
	return sc.mutation
}

// Save creates the Source in the database.
func (sc *SourceCreate) Save(ctx context.Context) (*Source, error) {
	var (
		err  error
		node *Source
	)
	sc.defaults()
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SourceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Source)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SourceMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SourceCreate) SaveX(ctx context.Context) *Source {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SourceCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SourceCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SourceCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := source.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := source.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := source.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SourceCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Source.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Source.updated_at"`)}
	}
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Source.name"`)}
	}
	if v, ok := sc.mutation.Name(); ok {
		if err := source.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Source.name": %w`, err)}
		}
	}
	if v, ok := sc.mutation.Icon(); ok {
		if err := source.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf(`ent: validator failed for field "Source.icon": %w`, err)}
		}
	}
	if _, ok := sc.mutation.SourceTypeID(); !ok {
		return &ValidationError{Name: "source_type", err: errors.New(`ent: missing required edge "Source.source_type"`)}
	}
	return nil
}

func (sc *SourceCreate) sqlSave(ctx context.Context) (*Source, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.PULID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (sc *SourceCreate) createSpec() (*Source, *sqlgraph.CreateSpec) {
	var (
		_node = &Source{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: source.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: source.FieldID,
			},
		}
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: source.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: source.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: source.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldName,
		})
		_node.Name = value
	}
	if value, ok := sc.mutation.Icon(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldIcon,
		})
		_node.Icon = &value
	}
	if nodes := sc.mutation.ConnectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   source.ConnectionsTable,
			Columns: []string{source.ConnectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: connection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.SourceTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   source.SourceTypeTable,
			Columns: []string{source.SourceTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: sourcetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.source_type_sources = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SourceCreateBulk is the builder for creating many Source entities in bulk.
type SourceCreateBulk struct {
	config
	builders []*SourceCreate
}

// Save creates the Source entities in the database.
func (scb *SourceCreateBulk) Save(ctx context.Context) ([]*Source, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Source, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SourceCreateBulk) SaveX(ctx context.Context) []*Source {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SourceCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SourceCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
