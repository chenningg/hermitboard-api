// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/chenningg/hermitboard-api/ent/sourcetype"
	"github.com/chenningg/hermitboard-api/pulid"
)

// SourceType is the model entity for the SourceType schema.
type SourceType struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.PULID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	// Value holds the value of the "value" field.
	Value sourcetype.Value `json:"value,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SourceTypeQuery when eager-loading is set.
	Edges SourceTypeEdges `json:"edges"`
}

// SourceTypeEdges holds the relations/edges for other nodes in the graph.
type SourceTypeEdges struct {
	// Sources holds the value of the sources edge.
	Sources []*Source `json:"sources,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedSources map[string][]*Source
}

// SourcesOrErr returns the Sources value or an error if the edge
// was not loaded in eager-loading.
func (e SourceTypeEdges) SourcesOrErr() ([]*Source, error) {
	if e.loadedTypes[0] {
		return e.Sources, nil
	}
	return nil, &NotLoadedError{edge: "sources"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SourceType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sourcetype.FieldID:
			values[i] = new(pulid.PULID)
		case sourcetype.FieldValue, sourcetype.FieldDescription:
			values[i] = new(sql.NullString)
		case sourcetype.FieldCreatedAt, sourcetype.FieldUpdatedAt, sourcetype.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SourceType", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SourceType fields.
func (st *SourceType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sourcetype.FieldID:
			if value, ok := values[i].(*pulid.PULID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				st.ID = *value
			}
		case sourcetype.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				st.CreatedAt = value.Time
			}
		case sourcetype.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				st.UpdatedAt = value.Time
			}
		case sourcetype.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				st.DeletedAt = new(time.Time)
				*st.DeletedAt = value.Time
			}
		case sourcetype.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				st.Value = sourcetype.Value(value.String)
			}
		case sourcetype.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				st.Description = new(string)
				*st.Description = value.String
			}
		}
	}
	return nil
}

// QuerySources queries the "sources" edge of the SourceType entity.
func (st *SourceType) QuerySources() *SourceQuery {
	return (&SourceTypeClient{config: st.config}).QuerySources(st)
}

// Update returns a builder for updating this SourceType.
// Note that you need to call SourceType.Unwrap() before calling this method if this SourceType
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *SourceType) Update() *SourceTypeUpdateOne {
	return (&SourceTypeClient{config: st.config}).UpdateOne(st)
}

// Unwrap unwraps the SourceType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (st *SourceType) Unwrap() *SourceType {
	_tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("ent: SourceType is not a transactional entity")
	}
	st.config.driver = _tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *SourceType) String() string {
	var builder strings.Builder
	builder.WriteString("SourceType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", st.ID))
	builder.WriteString("created_at=")
	builder.WriteString(st.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(st.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := st.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(fmt.Sprintf("%v", st.Value))
	builder.WriteString(", ")
	if v := st.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedSources returns the Sources named value or an error if the edge was not
// loaded in eager-loading with this name.
func (st *SourceType) NamedSources(name string) ([]*Source, error) {
	if st.Edges.namedSources == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := st.Edges.namedSources[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (st *SourceType) appendNamedSources(name string, edges ...*Source) {
	if st.Edges.namedSources == nil {
		st.Edges.namedSources = make(map[string][]*Source)
	}
	if len(edges) == 0 {
		st.Edges.namedSources[name] = []*Source{}
	} else {
		st.Edges.namedSources[name] = append(st.Edges.namedSources[name], edges...)
	}
}

// SourceTypes is a parsable slice of SourceType.
type SourceTypes []*SourceType

func (st SourceTypes) config(cfg config) {
	for _i := range st {
		st[_i].config = cfg
	}
}
