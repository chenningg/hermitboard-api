// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chenningg/hermitboard-api/ent/predicate"
	"github.com/chenningg/hermitboard-api/ent/source"
	"github.com/chenningg/hermitboard-api/ent/sourcetype"
	"github.com/chenningg/hermitboard-api/pulid"
)

// SourceTypeUpdate is the builder for updating SourceType entities.
type SourceTypeUpdate struct {
	config
	hooks    []Hook
	mutation *SourceTypeMutation
}

// Where appends a list predicates to the SourceTypeUpdate builder.
func (stu *SourceTypeUpdate) Where(ps ...predicate.SourceType) *SourceTypeUpdate {
	stu.mutation.Where(ps...)
	return stu
}

// SetUpdatedAt sets the "updated_at" field.
func (stu *SourceTypeUpdate) SetUpdatedAt(t time.Time) *SourceTypeUpdate {
	stu.mutation.SetUpdatedAt(t)
	return stu
}

// SetDeletedAt sets the "deleted_at" field.
func (stu *SourceTypeUpdate) SetDeletedAt(t time.Time) *SourceTypeUpdate {
	stu.mutation.SetDeletedAt(t)
	return stu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (stu *SourceTypeUpdate) ClearDeletedAt() *SourceTypeUpdate {
	stu.mutation.ClearDeletedAt()
	return stu
}

// SetValue sets the "value" field.
func (stu *SourceTypeUpdate) SetValue(s sourcetype.Value) *SourceTypeUpdate {
	stu.mutation.SetValue(s)
	return stu
}

// SetDescription sets the "description" field.
func (stu *SourceTypeUpdate) SetDescription(s string) *SourceTypeUpdate {
	stu.mutation.SetDescription(s)
	return stu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (stu *SourceTypeUpdate) SetNillableDescription(s *string) *SourceTypeUpdate {
	if s != nil {
		stu.SetDescription(*s)
	}
	return stu
}

// ClearDescription clears the value of the "description" field.
func (stu *SourceTypeUpdate) ClearDescription() *SourceTypeUpdate {
	stu.mutation.ClearDescription()
	return stu
}

// AddSourceIDs adds the "sources" edge to the Source entity by IDs.
func (stu *SourceTypeUpdate) AddSourceIDs(ids ...pulid.PULID) *SourceTypeUpdate {
	stu.mutation.AddSourceIDs(ids...)
	return stu
}

// AddSources adds the "sources" edges to the Source entity.
func (stu *SourceTypeUpdate) AddSources(s ...*Source) *SourceTypeUpdate {
	ids := make([]pulid.PULID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stu.AddSourceIDs(ids...)
}

// Mutation returns the SourceTypeMutation object of the builder.
func (stu *SourceTypeUpdate) Mutation() *SourceTypeMutation {
	return stu.mutation
}

// ClearSources clears all "sources" edges to the Source entity.
func (stu *SourceTypeUpdate) ClearSources() *SourceTypeUpdate {
	stu.mutation.ClearSources()
	return stu
}

// RemoveSourceIDs removes the "sources" edge to Source entities by IDs.
func (stu *SourceTypeUpdate) RemoveSourceIDs(ids ...pulid.PULID) *SourceTypeUpdate {
	stu.mutation.RemoveSourceIDs(ids...)
	return stu
}

// RemoveSources removes "sources" edges to Source entities.
func (stu *SourceTypeUpdate) RemoveSources(s ...*Source) *SourceTypeUpdate {
	ids := make([]pulid.PULID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stu.RemoveSourceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stu *SourceTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	stu.defaults()
	if len(stu.hooks) == 0 {
		if err = stu.check(); err != nil {
			return 0, err
		}
		affected, err = stu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SourceTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = stu.check(); err != nil {
				return 0, err
			}
			stu.mutation = mutation
			affected, err = stu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(stu.hooks) - 1; i >= 0; i-- {
			if stu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = stu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, stu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (stu *SourceTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *SourceTypeUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *SourceTypeUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stu *SourceTypeUpdate) defaults() {
	if _, ok := stu.mutation.UpdatedAt(); !ok {
		v := sourcetype.UpdateDefaultUpdatedAt()
		stu.mutation.SetUpdatedAt(v)
	}
	if _, ok := stu.mutation.DeletedAt(); !ok && !stu.mutation.DeletedAtCleared() {
		v := sourcetype.UpdateDefaultDeletedAt()
		stu.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stu *SourceTypeUpdate) check() error {
	if v, ok := stu.mutation.Value(); ok {
		if err := sourcetype.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "SourceType.value": %w`, err)}
		}
	}
	if v, ok := stu.mutation.Description(); ok {
		if err := sourcetype.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "SourceType.description": %w`, err)}
		}
	}
	return nil
}

func (stu *SourceTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sourcetype.Table,
			Columns: sourcetype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: sourcetype.FieldID,
			},
		},
	}
	if ps := stu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sourcetype.FieldUpdatedAt,
		})
	}
	if value, ok := stu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sourcetype.FieldDeletedAt,
		})
	}
	if stu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: sourcetype.FieldDeletedAt,
		})
	}
	if value, ok := stu.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: sourcetype.FieldValue,
		})
	}
	if value, ok := stu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sourcetype.FieldDescription,
		})
	}
	if stu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sourcetype.FieldDescription,
		})
	}
	if stu.mutation.SourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sourcetype.SourcesTable,
			Columns: []string{sourcetype.SourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: source.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.RemovedSourcesIDs(); len(nodes) > 0 && !stu.mutation.SourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sourcetype.SourcesTable,
			Columns: []string{sourcetype.SourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: source.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.SourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sourcetype.SourcesTable,
			Columns: []string{sourcetype.SourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: source.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, stu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sourcetype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// SourceTypeUpdateOne is the builder for updating a single SourceType entity.
type SourceTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SourceTypeMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (stuo *SourceTypeUpdateOne) SetUpdatedAt(t time.Time) *SourceTypeUpdateOne {
	stuo.mutation.SetUpdatedAt(t)
	return stuo
}

// SetDeletedAt sets the "deleted_at" field.
func (stuo *SourceTypeUpdateOne) SetDeletedAt(t time.Time) *SourceTypeUpdateOne {
	stuo.mutation.SetDeletedAt(t)
	return stuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (stuo *SourceTypeUpdateOne) ClearDeletedAt() *SourceTypeUpdateOne {
	stuo.mutation.ClearDeletedAt()
	return stuo
}

// SetValue sets the "value" field.
func (stuo *SourceTypeUpdateOne) SetValue(s sourcetype.Value) *SourceTypeUpdateOne {
	stuo.mutation.SetValue(s)
	return stuo
}

// SetDescription sets the "description" field.
func (stuo *SourceTypeUpdateOne) SetDescription(s string) *SourceTypeUpdateOne {
	stuo.mutation.SetDescription(s)
	return stuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (stuo *SourceTypeUpdateOne) SetNillableDescription(s *string) *SourceTypeUpdateOne {
	if s != nil {
		stuo.SetDescription(*s)
	}
	return stuo
}

// ClearDescription clears the value of the "description" field.
func (stuo *SourceTypeUpdateOne) ClearDescription() *SourceTypeUpdateOne {
	stuo.mutation.ClearDescription()
	return stuo
}

// AddSourceIDs adds the "sources" edge to the Source entity by IDs.
func (stuo *SourceTypeUpdateOne) AddSourceIDs(ids ...pulid.PULID) *SourceTypeUpdateOne {
	stuo.mutation.AddSourceIDs(ids...)
	return stuo
}

// AddSources adds the "sources" edges to the Source entity.
func (stuo *SourceTypeUpdateOne) AddSources(s ...*Source) *SourceTypeUpdateOne {
	ids := make([]pulid.PULID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stuo.AddSourceIDs(ids...)
}

// Mutation returns the SourceTypeMutation object of the builder.
func (stuo *SourceTypeUpdateOne) Mutation() *SourceTypeMutation {
	return stuo.mutation
}

// ClearSources clears all "sources" edges to the Source entity.
func (stuo *SourceTypeUpdateOne) ClearSources() *SourceTypeUpdateOne {
	stuo.mutation.ClearSources()
	return stuo
}

// RemoveSourceIDs removes the "sources" edge to Source entities by IDs.
func (stuo *SourceTypeUpdateOne) RemoveSourceIDs(ids ...pulid.PULID) *SourceTypeUpdateOne {
	stuo.mutation.RemoveSourceIDs(ids...)
	return stuo
}

// RemoveSources removes "sources" edges to Source entities.
func (stuo *SourceTypeUpdateOne) RemoveSources(s ...*Source) *SourceTypeUpdateOne {
	ids := make([]pulid.PULID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stuo.RemoveSourceIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (stuo *SourceTypeUpdateOne) Select(field string, fields ...string) *SourceTypeUpdateOne {
	stuo.fields = append([]string{field}, fields...)
	return stuo
}

// Save executes the query and returns the updated SourceType entity.
func (stuo *SourceTypeUpdateOne) Save(ctx context.Context) (*SourceType, error) {
	var (
		err  error
		node *SourceType
	)
	stuo.defaults()
	if len(stuo.hooks) == 0 {
		if err = stuo.check(); err != nil {
			return nil, err
		}
		node, err = stuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SourceTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = stuo.check(); err != nil {
				return nil, err
			}
			stuo.mutation = mutation
			node, err = stuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(stuo.hooks) - 1; i >= 0; i-- {
			if stuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = stuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, stuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SourceType)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SourceTypeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *SourceTypeUpdateOne) SaveX(ctx context.Context) *SourceType {
	node, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stuo *SourceTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *SourceTypeUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stuo *SourceTypeUpdateOne) defaults() {
	if _, ok := stuo.mutation.UpdatedAt(); !ok {
		v := sourcetype.UpdateDefaultUpdatedAt()
		stuo.mutation.SetUpdatedAt(v)
	}
	if _, ok := stuo.mutation.DeletedAt(); !ok && !stuo.mutation.DeletedAtCleared() {
		v := sourcetype.UpdateDefaultDeletedAt()
		stuo.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stuo *SourceTypeUpdateOne) check() error {
	if v, ok := stuo.mutation.Value(); ok {
		if err := sourcetype.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "SourceType.value": %w`, err)}
		}
	}
	if v, ok := stuo.mutation.Description(); ok {
		if err := sourcetype.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "SourceType.description": %w`, err)}
		}
	}
	return nil
}

func (stuo *SourceTypeUpdateOne) sqlSave(ctx context.Context) (_node *SourceType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sourcetype.Table,
			Columns: sourcetype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: sourcetype.FieldID,
			},
		},
	}
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SourceType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := stuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sourcetype.FieldID)
		for _, f := range fields {
			if !sourcetype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sourcetype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := stuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sourcetype.FieldUpdatedAt,
		})
	}
	if value, ok := stuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sourcetype.FieldDeletedAt,
		})
	}
	if stuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: sourcetype.FieldDeletedAt,
		})
	}
	if value, ok := stuo.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: sourcetype.FieldValue,
		})
	}
	if value, ok := stuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sourcetype.FieldDescription,
		})
	}
	if stuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sourcetype.FieldDescription,
		})
	}
	if stuo.mutation.SourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sourcetype.SourcesTable,
			Columns: []string{sourcetype.SourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: source.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.RemovedSourcesIDs(); len(nodes) > 0 && !stuo.mutation.SourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sourcetype.SourcesTable,
			Columns: []string{sourcetype.SourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: source.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.SourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sourcetype.SourcesTable,
			Columns: []string{sourcetype.SourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: source.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SourceType{config: stuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, stuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sourcetype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
