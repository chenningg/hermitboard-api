// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chenningg/hermitboard-api/ent/authrole"
	"github.com/chenningg/hermitboard-api/ent/authtype"
	"github.com/chenningg/hermitboard-api/ent/staffaccount"
	"github.com/chenningg/hermitboard-api/ent/staffaccountauthrole"
	"github.com/chenningg/hermitboard-api/pulid"
)

// StaffAccountCreate is the builder for creating a StaffAccount entity.
type StaffAccountCreate struct {
	config
	mutation *StaffAccountMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sac *StaffAccountCreate) SetCreatedAt(t time.Time) *StaffAccountCreate {
	sac.mutation.SetCreatedAt(t)
	return sac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sac *StaffAccountCreate) SetNillableCreatedAt(t *time.Time) *StaffAccountCreate {
	if t != nil {
		sac.SetCreatedAt(*t)
	}
	return sac
}

// SetUpdatedAt sets the "updated_at" field.
func (sac *StaffAccountCreate) SetUpdatedAt(t time.Time) *StaffAccountCreate {
	sac.mutation.SetUpdatedAt(t)
	return sac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sac *StaffAccountCreate) SetNillableUpdatedAt(t *time.Time) *StaffAccountCreate {
	if t != nil {
		sac.SetUpdatedAt(*t)
	}
	return sac
}

// SetDeletedAt sets the "deleted_at" field.
func (sac *StaffAccountCreate) SetDeletedAt(t time.Time) *StaffAccountCreate {
	sac.mutation.SetDeletedAt(t)
	return sac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sac *StaffAccountCreate) SetNillableDeletedAt(t *time.Time) *StaffAccountCreate {
	if t != nil {
		sac.SetDeletedAt(*t)
	}
	return sac
}

// SetAuthTypeID sets the "auth_type_id" field.
func (sac *StaffAccountCreate) SetAuthTypeID(pu pulid.PULID) *StaffAccountCreate {
	sac.mutation.SetAuthTypeID(pu)
	return sac
}

// SetNickname sets the "nickname" field.
func (sac *StaffAccountCreate) SetNickname(s string) *StaffAccountCreate {
	sac.mutation.SetNickname(s)
	return sac
}

// SetEmail sets the "email" field.
func (sac *StaffAccountCreate) SetEmail(s string) *StaffAccountCreate {
	sac.mutation.SetEmail(s)
	return sac
}

// SetPassword sets the "password" field.
func (sac *StaffAccountCreate) SetPassword(s string) *StaffAccountCreate {
	sac.mutation.SetPassword(s)
	return sac
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (sac *StaffAccountCreate) SetNillablePassword(s *string) *StaffAccountCreate {
	if s != nil {
		sac.SetPassword(*s)
	}
	return sac
}

// SetPasswordUpdatedAt sets the "password_updated_at" field.
func (sac *StaffAccountCreate) SetPasswordUpdatedAt(t time.Time) *StaffAccountCreate {
	sac.mutation.SetPasswordUpdatedAt(t)
	return sac
}

// SetNillablePasswordUpdatedAt sets the "password_updated_at" field if the given value is not nil.
func (sac *StaffAccountCreate) SetNillablePasswordUpdatedAt(t *time.Time) *StaffAccountCreate {
	if t != nil {
		sac.SetPasswordUpdatedAt(*t)
	}
	return sac
}

// SetID sets the "id" field.
func (sac *StaffAccountCreate) SetID(pu pulid.PULID) *StaffAccountCreate {
	sac.mutation.SetID(pu)
	return sac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sac *StaffAccountCreate) SetNillableID(pu *pulid.PULID) *StaffAccountCreate {
	if pu != nil {
		sac.SetID(*pu)
	}
	return sac
}

// AddAuthRoleIDs adds the "auth_roles" edge to the AuthRole entity by IDs.
func (sac *StaffAccountCreate) AddAuthRoleIDs(ids ...pulid.PULID) *StaffAccountCreate {
	sac.mutation.AddAuthRoleIDs(ids...)
	return sac
}

// AddAuthRoles adds the "auth_roles" edges to the AuthRole entity.
func (sac *StaffAccountCreate) AddAuthRoles(a ...*AuthRole) *StaffAccountCreate {
	ids := make([]pulid.PULID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return sac.AddAuthRoleIDs(ids...)
}

// SetAuthType sets the "auth_type" edge to the AuthType entity.
func (sac *StaffAccountCreate) SetAuthType(a *AuthType) *StaffAccountCreate {
	return sac.SetAuthTypeID(a.ID)
}

// AddStaffAccountAuthRoleIDs adds the "staff_account_auth_roles" edge to the StaffAccountAuthRole entity by IDs.
func (sac *StaffAccountCreate) AddStaffAccountAuthRoleIDs(ids ...pulid.PULID) *StaffAccountCreate {
	sac.mutation.AddStaffAccountAuthRoleIDs(ids...)
	return sac
}

// AddStaffAccountAuthRoles adds the "staff_account_auth_roles" edges to the StaffAccountAuthRole entity.
func (sac *StaffAccountCreate) AddStaffAccountAuthRoles(s ...*StaffAccountAuthRole) *StaffAccountCreate {
	ids := make([]pulid.PULID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sac.AddStaffAccountAuthRoleIDs(ids...)
}

// Mutation returns the StaffAccountMutation object of the builder.
func (sac *StaffAccountCreate) Mutation() *StaffAccountMutation {
	return sac.mutation
}

// Save creates the StaffAccount in the database.
func (sac *StaffAccountCreate) Save(ctx context.Context) (*StaffAccount, error) {
	var (
		err  error
		node *StaffAccount
	)
	sac.defaults()
	if len(sac.hooks) == 0 {
		if err = sac.check(); err != nil {
			return nil, err
		}
		node, err = sac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StaffAccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sac.check(); err != nil {
				return nil, err
			}
			sac.mutation = mutation
			if node, err = sac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sac.hooks) - 1; i >= 0; i-- {
			if sac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sac.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sac.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*StaffAccount)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from StaffAccountMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sac *StaffAccountCreate) SaveX(ctx context.Context) *StaffAccount {
	v, err := sac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sac *StaffAccountCreate) Exec(ctx context.Context) error {
	_, err := sac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sac *StaffAccountCreate) ExecX(ctx context.Context) {
	if err := sac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sac *StaffAccountCreate) defaults() {
	if _, ok := sac.mutation.CreatedAt(); !ok {
		v := staffaccount.DefaultCreatedAt()
		sac.mutation.SetCreatedAt(v)
	}
	if _, ok := sac.mutation.UpdatedAt(); !ok {
		v := staffaccount.DefaultUpdatedAt()
		sac.mutation.SetUpdatedAt(v)
	}
	if _, ok := sac.mutation.PasswordUpdatedAt(); !ok {
		v := staffaccount.DefaultPasswordUpdatedAt()
		sac.mutation.SetPasswordUpdatedAt(v)
	}
	if _, ok := sac.mutation.ID(); !ok {
		v := staffaccount.DefaultID()
		sac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sac *StaffAccountCreate) check() error {
	if _, ok := sac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "StaffAccount.created_at"`)}
	}
	if _, ok := sac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "StaffAccount.updated_at"`)}
	}
	if _, ok := sac.mutation.AuthTypeID(); !ok {
		return &ValidationError{Name: "auth_type_id", err: errors.New(`ent: missing required field "StaffAccount.auth_type_id"`)}
	}
	if _, ok := sac.mutation.Nickname(); !ok {
		return &ValidationError{Name: "nickname", err: errors.New(`ent: missing required field "StaffAccount.nickname"`)}
	}
	if v, ok := sac.mutation.Nickname(); ok {
		if err := staffaccount.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf(`ent: validator failed for field "StaffAccount.nickname": %w`, err)}
		}
	}
	if _, ok := sac.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "StaffAccount.email"`)}
	}
	if v, ok := sac.mutation.Email(); ok {
		if err := staffaccount.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "StaffAccount.email": %w`, err)}
		}
	}
	if v, ok := sac.mutation.Password(); ok {
		if err := staffaccount.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "StaffAccount.password": %w`, err)}
		}
	}
	if _, ok := sac.mutation.PasswordUpdatedAt(); !ok {
		return &ValidationError{Name: "password_updated_at", err: errors.New(`ent: missing required field "StaffAccount.password_updated_at"`)}
	}
	if _, ok := sac.mutation.AuthTypeID(); !ok {
		return &ValidationError{Name: "auth_type", err: errors.New(`ent: missing required edge "StaffAccount.auth_type"`)}
	}
	return nil
}

func (sac *StaffAccountCreate) sqlSave(ctx context.Context) (*StaffAccount, error) {
	_node, _spec := sac.createSpec()
	if err := sqlgraph.CreateNode(ctx, sac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.PULID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (sac *StaffAccountCreate) createSpec() (*StaffAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &StaffAccount{config: sac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: staffaccount.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: staffaccount.FieldID,
			},
		}
	)
	if id, ok := sac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: staffaccount.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: staffaccount.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sac.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: staffaccount.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := sac.mutation.Nickname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staffaccount.FieldNickname,
		})
		_node.Nickname = value
	}
	if value, ok := sac.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staffaccount.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := sac.mutation.Password(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staffaccount.FieldPassword,
		})
		_node.Password = &value
	}
	if value, ok := sac.mutation.PasswordUpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: staffaccount.FieldPasswordUpdatedAt,
		})
		_node.PasswordUpdatedAt = value
	}
	if nodes := sac.mutation.AuthRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   staffaccount.AuthRolesTable,
			Columns: staffaccount.AuthRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: authrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &StaffAccountAuthRoleCreate{config: sac.config, mutation: newStaffAccountAuthRoleMutation(sac.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sac.mutation.AuthTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   staffaccount.AuthTypeTable,
			Columns: []string{staffaccount.AuthTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: authtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AuthTypeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sac.mutation.StaffAccountAuthRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   staffaccount.StaffAccountAuthRolesTable,
			Columns: []string{staffaccount.StaffAccountAuthRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: staffaccountauthrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StaffAccountCreateBulk is the builder for creating many StaffAccount entities in bulk.
type StaffAccountCreateBulk struct {
	config
	builders []*StaffAccountCreate
}

// Save creates the StaffAccount entities in the database.
func (sacb *StaffAccountCreateBulk) Save(ctx context.Context) ([]*StaffAccount, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sacb.builders))
	nodes := make([]*StaffAccount, len(sacb.builders))
	mutators := make([]Mutator, len(sacb.builders))
	for i := range sacb.builders {
		func(i int, root context.Context) {
			builder := sacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StaffAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sacb *StaffAccountCreateBulk) SaveX(ctx context.Context) []*StaffAccount {
	v, err := sacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sacb *StaffAccountCreateBulk) Exec(ctx context.Context) error {
	_, err := sacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sacb *StaffAccountCreateBulk) ExecX(ctx context.Context) {
	if err := sacb.Exec(ctx); err != nil {
		panic(err)
	}
}
