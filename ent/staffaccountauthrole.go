// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/chenningg/hermitboard-api/ent/authrole"
	"github.com/chenningg/hermitboard-api/ent/staffaccount"
	"github.com/chenningg/hermitboard-api/ent/staffaccountauthrole"
	"github.com/chenningg/hermitboard-api/pulid"
)

// StaffAccountAuthRole is the model entity for the StaffAccountAuthRole schema.
type StaffAccountAuthRole struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.PULID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// StaffAccountID holds the value of the "staff_account_id" field.
	StaffAccountID pulid.PULID `json:"staff_account_id,omitempty"`
	// AuthRoleID holds the value of the "auth_role_id" field.
	AuthRoleID pulid.PULID `json:"auth_role_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StaffAccountAuthRoleQuery when eager-loading is set.
	Edges StaffAccountAuthRoleEdges `json:"edges"`
}

// StaffAccountAuthRoleEdges holds the relations/edges for other nodes in the graph.
type StaffAccountAuthRoleEdges struct {
	// StaffAccount holds the value of the staff_account edge.
	StaffAccount *StaffAccount `json:"staff_account,omitempty"`
	// AuthRole holds the value of the auth_role edge.
	AuthRole *AuthRole `json:"auth_role,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// StaffAccountOrErr returns the StaffAccount value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StaffAccountAuthRoleEdges) StaffAccountOrErr() (*StaffAccount, error) {
	if e.loadedTypes[0] {
		if e.StaffAccount == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: staffaccount.Label}
		}
		return e.StaffAccount, nil
	}
	return nil, &NotLoadedError{edge: "staff_account"}
}

// AuthRoleOrErr returns the AuthRole value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StaffAccountAuthRoleEdges) AuthRoleOrErr() (*AuthRole, error) {
	if e.loadedTypes[1] {
		if e.AuthRole == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: authrole.Label}
		}
		return e.AuthRole, nil
	}
	return nil, &NotLoadedError{edge: "auth_role"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StaffAccountAuthRole) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case staffaccountauthrole.FieldID, staffaccountauthrole.FieldStaffAccountID, staffaccountauthrole.FieldAuthRoleID:
			values[i] = new(pulid.PULID)
		case staffaccountauthrole.FieldCreatedAt, staffaccountauthrole.FieldUpdatedAt, staffaccountauthrole.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type StaffAccountAuthRole", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StaffAccountAuthRole fields.
func (saar *StaffAccountAuthRole) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case staffaccountauthrole.FieldID:
			if value, ok := values[i].(*pulid.PULID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				saar.ID = *value
			}
		case staffaccountauthrole.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				saar.CreatedAt = value.Time
			}
		case staffaccountauthrole.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				saar.UpdatedAt = value.Time
			}
		case staffaccountauthrole.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				saar.DeletedAt = new(time.Time)
				*saar.DeletedAt = value.Time
			}
		case staffaccountauthrole.FieldStaffAccountID:
			if value, ok := values[i].(*pulid.PULID); !ok {
				return fmt.Errorf("unexpected type %T for field staff_account_id", values[i])
			} else if value != nil {
				saar.StaffAccountID = *value
			}
		case staffaccountauthrole.FieldAuthRoleID:
			if value, ok := values[i].(*pulid.PULID); !ok {
				return fmt.Errorf("unexpected type %T for field auth_role_id", values[i])
			} else if value != nil {
				saar.AuthRoleID = *value
			}
		}
	}
	return nil
}

// QueryStaffAccount queries the "staff_account" edge of the StaffAccountAuthRole entity.
func (saar *StaffAccountAuthRole) QueryStaffAccount() *StaffAccountQuery {
	return (&StaffAccountAuthRoleClient{config: saar.config}).QueryStaffAccount(saar)
}

// QueryAuthRole queries the "auth_role" edge of the StaffAccountAuthRole entity.
func (saar *StaffAccountAuthRole) QueryAuthRole() *AuthRoleQuery {
	return (&StaffAccountAuthRoleClient{config: saar.config}).QueryAuthRole(saar)
}

// Update returns a builder for updating this StaffAccountAuthRole.
// Note that you need to call StaffAccountAuthRole.Unwrap() before calling this method if this StaffAccountAuthRole
// was returned from a transaction, and the transaction was committed or rolled back.
func (saar *StaffAccountAuthRole) Update() *StaffAccountAuthRoleUpdateOne {
	return (&StaffAccountAuthRoleClient{config: saar.config}).UpdateOne(saar)
}

// Unwrap unwraps the StaffAccountAuthRole entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (saar *StaffAccountAuthRole) Unwrap() *StaffAccountAuthRole {
	_tx, ok := saar.config.driver.(*txDriver)
	if !ok {
		panic("ent: StaffAccountAuthRole is not a transactional entity")
	}
	saar.config.driver = _tx.drv
	return saar
}

// String implements the fmt.Stringer.
func (saar *StaffAccountAuthRole) String() string {
	var builder strings.Builder
	builder.WriteString("StaffAccountAuthRole(")
	builder.WriteString(fmt.Sprintf("id=%v, ", saar.ID))
	builder.WriteString("created_at=")
	builder.WriteString(saar.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(saar.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := saar.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("staff_account_id=")
	builder.WriteString(fmt.Sprintf("%v", saar.StaffAccountID))
	builder.WriteString(", ")
	builder.WriteString("auth_role_id=")
	builder.WriteString(fmt.Sprintf("%v", saar.AuthRoleID))
	builder.WriteByte(')')
	return builder.String()
}

// StaffAccountAuthRoles is a parsable slice of StaffAccountAuthRole.
type StaffAccountAuthRoles []*StaffAccountAuthRole

func (saar StaffAccountAuthRoles) config(cfg config) {
	for _i := range saar {
		saar[_i].config = cfg
	}
}
