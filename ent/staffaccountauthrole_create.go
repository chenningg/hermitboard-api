// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chenningg/hermitboard-api/ent/authrole"
	"github.com/chenningg/hermitboard-api/ent/staffaccount"
	"github.com/chenningg/hermitboard-api/ent/staffaccountauthrole"
	"github.com/chenningg/hermitboard-api/pulid"
)

// StaffAccountAuthRoleCreate is the builder for creating a StaffAccountAuthRole entity.
type StaffAccountAuthRoleCreate struct {
	config
	mutation *StaffAccountAuthRoleMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (saarc *StaffAccountAuthRoleCreate) SetCreatedAt(t time.Time) *StaffAccountAuthRoleCreate {
	saarc.mutation.SetCreatedAt(t)
	return saarc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (saarc *StaffAccountAuthRoleCreate) SetNillableCreatedAt(t *time.Time) *StaffAccountAuthRoleCreate {
	if t != nil {
		saarc.SetCreatedAt(*t)
	}
	return saarc
}

// SetUpdatedAt sets the "updated_at" field.
func (saarc *StaffAccountAuthRoleCreate) SetUpdatedAt(t time.Time) *StaffAccountAuthRoleCreate {
	saarc.mutation.SetUpdatedAt(t)
	return saarc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (saarc *StaffAccountAuthRoleCreate) SetNillableUpdatedAt(t *time.Time) *StaffAccountAuthRoleCreate {
	if t != nil {
		saarc.SetUpdatedAt(*t)
	}
	return saarc
}

// SetDeletedAt sets the "deleted_at" field.
func (saarc *StaffAccountAuthRoleCreate) SetDeletedAt(t time.Time) *StaffAccountAuthRoleCreate {
	saarc.mutation.SetDeletedAt(t)
	return saarc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (saarc *StaffAccountAuthRoleCreate) SetNillableDeletedAt(t *time.Time) *StaffAccountAuthRoleCreate {
	if t != nil {
		saarc.SetDeletedAt(*t)
	}
	return saarc
}

// SetStaffAccountID sets the "staff_account_id" field.
func (saarc *StaffAccountAuthRoleCreate) SetStaffAccountID(pu pulid.PULID) *StaffAccountAuthRoleCreate {
	saarc.mutation.SetStaffAccountID(pu)
	return saarc
}

// SetAuthRoleID sets the "auth_role_id" field.
func (saarc *StaffAccountAuthRoleCreate) SetAuthRoleID(pu pulid.PULID) *StaffAccountAuthRoleCreate {
	saarc.mutation.SetAuthRoleID(pu)
	return saarc
}

// SetID sets the "id" field.
func (saarc *StaffAccountAuthRoleCreate) SetID(pu pulid.PULID) *StaffAccountAuthRoleCreate {
	saarc.mutation.SetID(pu)
	return saarc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (saarc *StaffAccountAuthRoleCreate) SetNillableID(pu *pulid.PULID) *StaffAccountAuthRoleCreate {
	if pu != nil {
		saarc.SetID(*pu)
	}
	return saarc
}

// SetStaffAccount sets the "staff_account" edge to the StaffAccount entity.
func (saarc *StaffAccountAuthRoleCreate) SetStaffAccount(s *StaffAccount) *StaffAccountAuthRoleCreate {
	return saarc.SetStaffAccountID(s.ID)
}

// SetAuthRole sets the "auth_role" edge to the AuthRole entity.
func (saarc *StaffAccountAuthRoleCreate) SetAuthRole(a *AuthRole) *StaffAccountAuthRoleCreate {
	return saarc.SetAuthRoleID(a.ID)
}

// Mutation returns the StaffAccountAuthRoleMutation object of the builder.
func (saarc *StaffAccountAuthRoleCreate) Mutation() *StaffAccountAuthRoleMutation {
	return saarc.mutation
}

// Save creates the StaffAccountAuthRole in the database.
func (saarc *StaffAccountAuthRoleCreate) Save(ctx context.Context) (*StaffAccountAuthRole, error) {
	var (
		err  error
		node *StaffAccountAuthRole
	)
	saarc.defaults()
	if len(saarc.hooks) == 0 {
		if err = saarc.check(); err != nil {
			return nil, err
		}
		node, err = saarc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StaffAccountAuthRoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = saarc.check(); err != nil {
				return nil, err
			}
			saarc.mutation = mutation
			if node, err = saarc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(saarc.hooks) - 1; i >= 0; i-- {
			if saarc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = saarc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, saarc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*StaffAccountAuthRole)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from StaffAccountAuthRoleMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (saarc *StaffAccountAuthRoleCreate) SaveX(ctx context.Context) *StaffAccountAuthRole {
	v, err := saarc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (saarc *StaffAccountAuthRoleCreate) Exec(ctx context.Context) error {
	_, err := saarc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (saarc *StaffAccountAuthRoleCreate) ExecX(ctx context.Context) {
	if err := saarc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (saarc *StaffAccountAuthRoleCreate) defaults() {
	if _, ok := saarc.mutation.CreatedAt(); !ok {
		v := staffaccountauthrole.DefaultCreatedAt()
		saarc.mutation.SetCreatedAt(v)
	}
	if _, ok := saarc.mutation.UpdatedAt(); !ok {
		v := staffaccountauthrole.DefaultUpdatedAt()
		saarc.mutation.SetUpdatedAt(v)
	}
	if _, ok := saarc.mutation.ID(); !ok {
		v := staffaccountauthrole.DefaultID()
		saarc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (saarc *StaffAccountAuthRoleCreate) check() error {
	if _, ok := saarc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "StaffAccountAuthRole.created_at"`)}
	}
	if _, ok := saarc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "StaffAccountAuthRole.updated_at"`)}
	}
	if _, ok := saarc.mutation.StaffAccountID(); !ok {
		return &ValidationError{Name: "staff_account_id", err: errors.New(`ent: missing required field "StaffAccountAuthRole.staff_account_id"`)}
	}
	if _, ok := saarc.mutation.AuthRoleID(); !ok {
		return &ValidationError{Name: "auth_role_id", err: errors.New(`ent: missing required field "StaffAccountAuthRole.auth_role_id"`)}
	}
	if _, ok := saarc.mutation.StaffAccountID(); !ok {
		return &ValidationError{Name: "staff_account", err: errors.New(`ent: missing required edge "StaffAccountAuthRole.staff_account"`)}
	}
	if _, ok := saarc.mutation.AuthRoleID(); !ok {
		return &ValidationError{Name: "auth_role", err: errors.New(`ent: missing required edge "StaffAccountAuthRole.auth_role"`)}
	}
	return nil
}

func (saarc *StaffAccountAuthRoleCreate) sqlSave(ctx context.Context) (*StaffAccountAuthRole, error) {
	_node, _spec := saarc.createSpec()
	if err := sqlgraph.CreateNode(ctx, saarc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.PULID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (saarc *StaffAccountAuthRoleCreate) createSpec() (*StaffAccountAuthRole, *sqlgraph.CreateSpec) {
	var (
		_node = &StaffAccountAuthRole{config: saarc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: staffaccountauthrole.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: staffaccountauthrole.FieldID,
			},
		}
	)
	if id, ok := saarc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := saarc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: staffaccountauthrole.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := saarc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: staffaccountauthrole.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := saarc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: staffaccountauthrole.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if nodes := saarc.mutation.StaffAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   staffaccountauthrole.StaffAccountTable,
			Columns: []string{staffaccountauthrole.StaffAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: staffaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StaffAccountID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := saarc.mutation.AuthRoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   staffaccountauthrole.AuthRoleTable,
			Columns: []string{staffaccountauthrole.AuthRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: authrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AuthRoleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StaffAccountAuthRoleCreateBulk is the builder for creating many StaffAccountAuthRole entities in bulk.
type StaffAccountAuthRoleCreateBulk struct {
	config
	builders []*StaffAccountAuthRoleCreate
}

// Save creates the StaffAccountAuthRole entities in the database.
func (saarcb *StaffAccountAuthRoleCreateBulk) Save(ctx context.Context) ([]*StaffAccountAuthRole, error) {
	specs := make([]*sqlgraph.CreateSpec, len(saarcb.builders))
	nodes := make([]*StaffAccountAuthRole, len(saarcb.builders))
	mutators := make([]Mutator, len(saarcb.builders))
	for i := range saarcb.builders {
		func(i int, root context.Context) {
			builder := saarcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StaffAccountAuthRoleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, saarcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, saarcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, saarcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (saarcb *StaffAccountAuthRoleCreateBulk) SaveX(ctx context.Context) []*StaffAccountAuthRole {
	v, err := saarcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (saarcb *StaffAccountAuthRoleCreateBulk) Exec(ctx context.Context) error {
	_, err := saarcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (saarcb *StaffAccountAuthRoleCreateBulk) ExecX(ctx context.Context) {
	if err := saarcb.Exec(ctx); err != nil {
		panic(err)
	}
}
