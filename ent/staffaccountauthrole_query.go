// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chenningg/hermitboard-api/ent/authrole"
	"github.com/chenningg/hermitboard-api/ent/predicate"
	"github.com/chenningg/hermitboard-api/ent/staffaccount"
	"github.com/chenningg/hermitboard-api/ent/staffaccountauthrole"
	"github.com/chenningg/hermitboard-api/pulid"
)

// StaffAccountAuthRoleQuery is the builder for querying StaffAccountAuthRole entities.
type StaffAccountAuthRoleQuery struct {
	config
	limit            *int
	offset           *int
	unique           *bool
	order            []OrderFunc
	fields           []string
	predicates       []predicate.StaffAccountAuthRole
	withStaffAccount *StaffAccountQuery
	withAuthRole     *AuthRoleQuery
	modifiers        []func(*sql.Selector)
	loadTotal        []func(context.Context, []*StaffAccountAuthRole) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the StaffAccountAuthRoleQuery builder.
func (saarq *StaffAccountAuthRoleQuery) Where(ps ...predicate.StaffAccountAuthRole) *StaffAccountAuthRoleQuery {
	saarq.predicates = append(saarq.predicates, ps...)
	return saarq
}

// Limit adds a limit step to the query.
func (saarq *StaffAccountAuthRoleQuery) Limit(limit int) *StaffAccountAuthRoleQuery {
	saarq.limit = &limit
	return saarq
}

// Offset adds an offset step to the query.
func (saarq *StaffAccountAuthRoleQuery) Offset(offset int) *StaffAccountAuthRoleQuery {
	saarq.offset = &offset
	return saarq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (saarq *StaffAccountAuthRoleQuery) Unique(unique bool) *StaffAccountAuthRoleQuery {
	saarq.unique = &unique
	return saarq
}

// Order adds an order step to the query.
func (saarq *StaffAccountAuthRoleQuery) Order(o ...OrderFunc) *StaffAccountAuthRoleQuery {
	saarq.order = append(saarq.order, o...)
	return saarq
}

// QueryStaffAccount chains the current query on the "staff_account" edge.
func (saarq *StaffAccountAuthRoleQuery) QueryStaffAccount() *StaffAccountQuery {
	query := &StaffAccountQuery{config: saarq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := saarq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := saarq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(staffaccountauthrole.Table, staffaccountauthrole.FieldID, selector),
			sqlgraph.To(staffaccount.Table, staffaccount.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, staffaccountauthrole.StaffAccountTable, staffaccountauthrole.StaffAccountColumn),
		)
		fromU = sqlgraph.SetNeighbors(saarq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAuthRole chains the current query on the "auth_role" edge.
func (saarq *StaffAccountAuthRoleQuery) QueryAuthRole() *AuthRoleQuery {
	query := &AuthRoleQuery{config: saarq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := saarq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := saarq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(staffaccountauthrole.Table, staffaccountauthrole.FieldID, selector),
			sqlgraph.To(authrole.Table, authrole.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, staffaccountauthrole.AuthRoleTable, staffaccountauthrole.AuthRoleColumn),
		)
		fromU = sqlgraph.SetNeighbors(saarq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first StaffAccountAuthRole entity from the query.
// Returns a *NotFoundError when no StaffAccountAuthRole was found.
func (saarq *StaffAccountAuthRoleQuery) First(ctx context.Context) (*StaffAccountAuthRole, error) {
	nodes, err := saarq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{staffaccountauthrole.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (saarq *StaffAccountAuthRoleQuery) FirstX(ctx context.Context) *StaffAccountAuthRole {
	node, err := saarq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first StaffAccountAuthRole ID from the query.
// Returns a *NotFoundError when no StaffAccountAuthRole ID was found.
func (saarq *StaffAccountAuthRoleQuery) FirstID(ctx context.Context) (id pulid.PULID, err error) {
	var ids []pulid.PULID
	if ids, err = saarq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{staffaccountauthrole.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (saarq *StaffAccountAuthRoleQuery) FirstIDX(ctx context.Context) pulid.PULID {
	id, err := saarq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single StaffAccountAuthRole entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one StaffAccountAuthRole entity is found.
// Returns a *NotFoundError when no StaffAccountAuthRole entities are found.
func (saarq *StaffAccountAuthRoleQuery) Only(ctx context.Context) (*StaffAccountAuthRole, error) {
	nodes, err := saarq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{staffaccountauthrole.Label}
	default:
		return nil, &NotSingularError{staffaccountauthrole.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (saarq *StaffAccountAuthRoleQuery) OnlyX(ctx context.Context) *StaffAccountAuthRole {
	node, err := saarq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only StaffAccountAuthRole ID in the query.
// Returns a *NotSingularError when more than one StaffAccountAuthRole ID is found.
// Returns a *NotFoundError when no entities are found.
func (saarq *StaffAccountAuthRoleQuery) OnlyID(ctx context.Context) (id pulid.PULID, err error) {
	var ids []pulid.PULID
	if ids, err = saarq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{staffaccountauthrole.Label}
	default:
		err = &NotSingularError{staffaccountauthrole.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (saarq *StaffAccountAuthRoleQuery) OnlyIDX(ctx context.Context) pulid.PULID {
	id, err := saarq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of StaffAccountAuthRoles.
func (saarq *StaffAccountAuthRoleQuery) All(ctx context.Context) ([]*StaffAccountAuthRole, error) {
	if err := saarq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return saarq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (saarq *StaffAccountAuthRoleQuery) AllX(ctx context.Context) []*StaffAccountAuthRole {
	nodes, err := saarq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of StaffAccountAuthRole IDs.
func (saarq *StaffAccountAuthRoleQuery) IDs(ctx context.Context) ([]pulid.PULID, error) {
	var ids []pulid.PULID
	if err := saarq.Select(staffaccountauthrole.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (saarq *StaffAccountAuthRoleQuery) IDsX(ctx context.Context) []pulid.PULID {
	ids, err := saarq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (saarq *StaffAccountAuthRoleQuery) Count(ctx context.Context) (int, error) {
	if err := saarq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return saarq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (saarq *StaffAccountAuthRoleQuery) CountX(ctx context.Context) int {
	count, err := saarq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (saarq *StaffAccountAuthRoleQuery) Exist(ctx context.Context) (bool, error) {
	if err := saarq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return saarq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (saarq *StaffAccountAuthRoleQuery) ExistX(ctx context.Context) bool {
	exist, err := saarq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the StaffAccountAuthRoleQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (saarq *StaffAccountAuthRoleQuery) Clone() *StaffAccountAuthRoleQuery {
	if saarq == nil {
		return nil
	}
	return &StaffAccountAuthRoleQuery{
		config:           saarq.config,
		limit:            saarq.limit,
		offset:           saarq.offset,
		order:            append([]OrderFunc{}, saarq.order...),
		predicates:       append([]predicate.StaffAccountAuthRole{}, saarq.predicates...),
		withStaffAccount: saarq.withStaffAccount.Clone(),
		withAuthRole:     saarq.withAuthRole.Clone(),
		// clone intermediate query.
		sql:    saarq.sql.Clone(),
		path:   saarq.path,
		unique: saarq.unique,
	}
}

// WithStaffAccount tells the query-builder to eager-load the nodes that are connected to
// the "staff_account" edge. The optional arguments are used to configure the query builder of the edge.
func (saarq *StaffAccountAuthRoleQuery) WithStaffAccount(opts ...func(*StaffAccountQuery)) *StaffAccountAuthRoleQuery {
	query := &StaffAccountQuery{config: saarq.config}
	for _, opt := range opts {
		opt(query)
	}
	saarq.withStaffAccount = query
	return saarq
}

// WithAuthRole tells the query-builder to eager-load the nodes that are connected to
// the "auth_role" edge. The optional arguments are used to configure the query builder of the edge.
func (saarq *StaffAccountAuthRoleQuery) WithAuthRole(opts ...func(*AuthRoleQuery)) *StaffAccountAuthRoleQuery {
	query := &AuthRoleQuery{config: saarq.config}
	for _, opt := range opts {
		opt(query)
	}
	saarq.withAuthRole = query
	return saarq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.StaffAccountAuthRole.Query().
//		GroupBy(staffaccountauthrole.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (saarq *StaffAccountAuthRoleQuery) GroupBy(field string, fields ...string) *StaffAccountAuthRoleGroupBy {
	grbuild := &StaffAccountAuthRoleGroupBy{config: saarq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := saarq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return saarq.sqlQuery(ctx), nil
	}
	grbuild.label = staffaccountauthrole.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.StaffAccountAuthRole.Query().
//		Select(staffaccountauthrole.FieldCreatedAt).
//		Scan(ctx, &v)
func (saarq *StaffAccountAuthRoleQuery) Select(fields ...string) *StaffAccountAuthRoleSelect {
	saarq.fields = append(saarq.fields, fields...)
	selbuild := &StaffAccountAuthRoleSelect{StaffAccountAuthRoleQuery: saarq}
	selbuild.label = staffaccountauthrole.Label
	selbuild.flds, selbuild.scan = &saarq.fields, selbuild.Scan
	return selbuild
}

func (saarq *StaffAccountAuthRoleQuery) prepareQuery(ctx context.Context) error {
	for _, f := range saarq.fields {
		if !staffaccountauthrole.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if saarq.path != nil {
		prev, err := saarq.path(ctx)
		if err != nil {
			return err
		}
		saarq.sql = prev
	}
	return nil
}

func (saarq *StaffAccountAuthRoleQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*StaffAccountAuthRole, error) {
	var (
		nodes       = []*StaffAccountAuthRole{}
		_spec       = saarq.querySpec()
		loadedTypes = [2]bool{
			saarq.withStaffAccount != nil,
			saarq.withAuthRole != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*StaffAccountAuthRole).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &StaffAccountAuthRole{config: saarq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(saarq.modifiers) > 0 {
		_spec.Modifiers = saarq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, saarq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := saarq.withStaffAccount; query != nil {
		if err := saarq.loadStaffAccount(ctx, query, nodes, nil,
			func(n *StaffAccountAuthRole, e *StaffAccount) { n.Edges.StaffAccount = e }); err != nil {
			return nil, err
		}
	}
	if query := saarq.withAuthRole; query != nil {
		if err := saarq.loadAuthRole(ctx, query, nodes, nil,
			func(n *StaffAccountAuthRole, e *AuthRole) { n.Edges.AuthRole = e }); err != nil {
			return nil, err
		}
	}
	for i := range saarq.loadTotal {
		if err := saarq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (saarq *StaffAccountAuthRoleQuery) loadStaffAccount(ctx context.Context, query *StaffAccountQuery, nodes []*StaffAccountAuthRole, init func(*StaffAccountAuthRole), assign func(*StaffAccountAuthRole, *StaffAccount)) error {
	ids := make([]pulid.PULID, 0, len(nodes))
	nodeids := make(map[pulid.PULID][]*StaffAccountAuthRole)
	for i := range nodes {
		fk := nodes[i].StaffAccountID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(staffaccount.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "staff_account_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (saarq *StaffAccountAuthRoleQuery) loadAuthRole(ctx context.Context, query *AuthRoleQuery, nodes []*StaffAccountAuthRole, init func(*StaffAccountAuthRole), assign func(*StaffAccountAuthRole, *AuthRole)) error {
	ids := make([]pulid.PULID, 0, len(nodes))
	nodeids := make(map[pulid.PULID][]*StaffAccountAuthRole)
	for i := range nodes {
		fk := nodes[i].AuthRoleID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(authrole.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "auth_role_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (saarq *StaffAccountAuthRoleQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := saarq.querySpec()
	if len(saarq.modifiers) > 0 {
		_spec.Modifiers = saarq.modifiers
	}
	_spec.Node.Columns = saarq.fields
	if len(saarq.fields) > 0 {
		_spec.Unique = saarq.unique != nil && *saarq.unique
	}
	return sqlgraph.CountNodes(ctx, saarq.driver, _spec)
}

func (saarq *StaffAccountAuthRoleQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := saarq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (saarq *StaffAccountAuthRoleQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   staffaccountauthrole.Table,
			Columns: staffaccountauthrole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: staffaccountauthrole.FieldID,
			},
		},
		From:   saarq.sql,
		Unique: true,
	}
	if unique := saarq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := saarq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, staffaccountauthrole.FieldID)
		for i := range fields {
			if fields[i] != staffaccountauthrole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := saarq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := saarq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := saarq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := saarq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (saarq *StaffAccountAuthRoleQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(saarq.driver.Dialect())
	t1 := builder.Table(staffaccountauthrole.Table)
	columns := saarq.fields
	if len(columns) == 0 {
		columns = staffaccountauthrole.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if saarq.sql != nil {
		selector = saarq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if saarq.unique != nil && *saarq.unique {
		selector.Distinct()
	}
	for _, p := range saarq.predicates {
		p(selector)
	}
	for _, p := range saarq.order {
		p(selector)
	}
	if offset := saarq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := saarq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// StaffAccountAuthRoleGroupBy is the group-by builder for StaffAccountAuthRole entities.
type StaffAccountAuthRoleGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (saargb *StaffAccountAuthRoleGroupBy) Aggregate(fns ...AggregateFunc) *StaffAccountAuthRoleGroupBy {
	saargb.fns = append(saargb.fns, fns...)
	return saargb
}

// Scan applies the group-by query and scans the result into the given value.
func (saargb *StaffAccountAuthRoleGroupBy) Scan(ctx context.Context, v any) error {
	query, err := saargb.path(ctx)
	if err != nil {
		return err
	}
	saargb.sql = query
	return saargb.sqlScan(ctx, v)
}

func (saargb *StaffAccountAuthRoleGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range saargb.fields {
		if !staffaccountauthrole.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := saargb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := saargb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (saargb *StaffAccountAuthRoleGroupBy) sqlQuery() *sql.Selector {
	selector := saargb.sql.Select()
	aggregation := make([]string, 0, len(saargb.fns))
	for _, fn := range saargb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(saargb.fields)+len(saargb.fns))
		for _, f := range saargb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(saargb.fields...)...)
}

// StaffAccountAuthRoleSelect is the builder for selecting fields of StaffAccountAuthRole entities.
type StaffAccountAuthRoleSelect struct {
	*StaffAccountAuthRoleQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (saars *StaffAccountAuthRoleSelect) Scan(ctx context.Context, v any) error {
	if err := saars.prepareQuery(ctx); err != nil {
		return err
	}
	saars.sql = saars.StaffAccountAuthRoleQuery.sqlQuery(ctx)
	return saars.sqlScan(ctx, v)
}

func (saars *StaffAccountAuthRoleSelect) sqlScan(ctx context.Context, v any) error {
	rows := &sql.Rows{}
	query, args := saars.sql.Query()
	if err := saars.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
