// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chenningg/hermitboard-api/ent/authrole"
	"github.com/chenningg/hermitboard-api/ent/predicate"
	"github.com/chenningg/hermitboard-api/ent/staffaccount"
	"github.com/chenningg/hermitboard-api/ent/staffaccountauthrole"
	"github.com/chenningg/hermitboard-api/pulid"
)

// StaffAccountAuthRoleUpdate is the builder for updating StaffAccountAuthRole entities.
type StaffAccountAuthRoleUpdate struct {
	config
	hooks    []Hook
	mutation *StaffAccountAuthRoleMutation
}

// Where appends a list predicates to the StaffAccountAuthRoleUpdate builder.
func (saaru *StaffAccountAuthRoleUpdate) Where(ps ...predicate.StaffAccountAuthRole) *StaffAccountAuthRoleUpdate {
	saaru.mutation.Where(ps...)
	return saaru
}

// SetUpdatedAt sets the "updated_at" field.
func (saaru *StaffAccountAuthRoleUpdate) SetUpdatedAt(t time.Time) *StaffAccountAuthRoleUpdate {
	saaru.mutation.SetUpdatedAt(t)
	return saaru
}

// SetDeletedAt sets the "deleted_at" field.
func (saaru *StaffAccountAuthRoleUpdate) SetDeletedAt(t time.Time) *StaffAccountAuthRoleUpdate {
	saaru.mutation.SetDeletedAt(t)
	return saaru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (saaru *StaffAccountAuthRoleUpdate) ClearDeletedAt() *StaffAccountAuthRoleUpdate {
	saaru.mutation.ClearDeletedAt()
	return saaru
}

// SetStaffAccountID sets the "staff_account_id" field.
func (saaru *StaffAccountAuthRoleUpdate) SetStaffAccountID(pu pulid.PULID) *StaffAccountAuthRoleUpdate {
	saaru.mutation.SetStaffAccountID(pu)
	return saaru
}

// SetAuthRoleID sets the "auth_role_id" field.
func (saaru *StaffAccountAuthRoleUpdate) SetAuthRoleID(pu pulid.PULID) *StaffAccountAuthRoleUpdate {
	saaru.mutation.SetAuthRoleID(pu)
	return saaru
}

// SetStaffAccount sets the "staff_account" edge to the StaffAccount entity.
func (saaru *StaffAccountAuthRoleUpdate) SetStaffAccount(s *StaffAccount) *StaffAccountAuthRoleUpdate {
	return saaru.SetStaffAccountID(s.ID)
}

// SetAuthRole sets the "auth_role" edge to the AuthRole entity.
func (saaru *StaffAccountAuthRoleUpdate) SetAuthRole(a *AuthRole) *StaffAccountAuthRoleUpdate {
	return saaru.SetAuthRoleID(a.ID)
}

// Mutation returns the StaffAccountAuthRoleMutation object of the builder.
func (saaru *StaffAccountAuthRoleUpdate) Mutation() *StaffAccountAuthRoleMutation {
	return saaru.mutation
}

// ClearStaffAccount clears the "staff_account" edge to the StaffAccount entity.
func (saaru *StaffAccountAuthRoleUpdate) ClearStaffAccount() *StaffAccountAuthRoleUpdate {
	saaru.mutation.ClearStaffAccount()
	return saaru
}

// ClearAuthRole clears the "auth_role" edge to the AuthRole entity.
func (saaru *StaffAccountAuthRoleUpdate) ClearAuthRole() *StaffAccountAuthRoleUpdate {
	saaru.mutation.ClearAuthRole()
	return saaru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (saaru *StaffAccountAuthRoleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	saaru.defaults()
	if len(saaru.hooks) == 0 {
		if err = saaru.check(); err != nil {
			return 0, err
		}
		affected, err = saaru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StaffAccountAuthRoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = saaru.check(); err != nil {
				return 0, err
			}
			saaru.mutation = mutation
			affected, err = saaru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(saaru.hooks) - 1; i >= 0; i-- {
			if saaru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = saaru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, saaru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (saaru *StaffAccountAuthRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := saaru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (saaru *StaffAccountAuthRoleUpdate) Exec(ctx context.Context) error {
	_, err := saaru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (saaru *StaffAccountAuthRoleUpdate) ExecX(ctx context.Context) {
	if err := saaru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (saaru *StaffAccountAuthRoleUpdate) defaults() {
	if _, ok := saaru.mutation.UpdatedAt(); !ok {
		v := staffaccountauthrole.UpdateDefaultUpdatedAt()
		saaru.mutation.SetUpdatedAt(v)
	}
	if _, ok := saaru.mutation.DeletedAt(); !ok && !saaru.mutation.DeletedAtCleared() {
		v := staffaccountauthrole.UpdateDefaultDeletedAt()
		saaru.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (saaru *StaffAccountAuthRoleUpdate) check() error {
	if _, ok := saaru.mutation.StaffAccountID(); saaru.mutation.StaffAccountCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "StaffAccountAuthRole.staff_account"`)
	}
	if _, ok := saaru.mutation.AuthRoleID(); saaru.mutation.AuthRoleCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "StaffAccountAuthRole.auth_role"`)
	}
	return nil
}

func (saaru *StaffAccountAuthRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   staffaccountauthrole.Table,
			Columns: staffaccountauthrole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: staffaccountauthrole.FieldID,
			},
		},
	}
	if ps := saaru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := saaru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: staffaccountauthrole.FieldUpdatedAt,
		})
	}
	if value, ok := saaru.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: staffaccountauthrole.FieldDeletedAt,
		})
	}
	if saaru.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: staffaccountauthrole.FieldDeletedAt,
		})
	}
	if saaru.mutation.StaffAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   staffaccountauthrole.StaffAccountTable,
			Columns: []string{staffaccountauthrole.StaffAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: staffaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := saaru.mutation.StaffAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   staffaccountauthrole.StaffAccountTable,
			Columns: []string{staffaccountauthrole.StaffAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: staffaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if saaru.mutation.AuthRoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   staffaccountauthrole.AuthRoleTable,
			Columns: []string{staffaccountauthrole.AuthRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: authrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := saaru.mutation.AuthRoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   staffaccountauthrole.AuthRoleTable,
			Columns: []string{staffaccountauthrole.AuthRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: authrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, saaru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{staffaccountauthrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// StaffAccountAuthRoleUpdateOne is the builder for updating a single StaffAccountAuthRole entity.
type StaffAccountAuthRoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StaffAccountAuthRoleMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (saaruo *StaffAccountAuthRoleUpdateOne) SetUpdatedAt(t time.Time) *StaffAccountAuthRoleUpdateOne {
	saaruo.mutation.SetUpdatedAt(t)
	return saaruo
}

// SetDeletedAt sets the "deleted_at" field.
func (saaruo *StaffAccountAuthRoleUpdateOne) SetDeletedAt(t time.Time) *StaffAccountAuthRoleUpdateOne {
	saaruo.mutation.SetDeletedAt(t)
	return saaruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (saaruo *StaffAccountAuthRoleUpdateOne) ClearDeletedAt() *StaffAccountAuthRoleUpdateOne {
	saaruo.mutation.ClearDeletedAt()
	return saaruo
}

// SetStaffAccountID sets the "staff_account_id" field.
func (saaruo *StaffAccountAuthRoleUpdateOne) SetStaffAccountID(pu pulid.PULID) *StaffAccountAuthRoleUpdateOne {
	saaruo.mutation.SetStaffAccountID(pu)
	return saaruo
}

// SetAuthRoleID sets the "auth_role_id" field.
func (saaruo *StaffAccountAuthRoleUpdateOne) SetAuthRoleID(pu pulid.PULID) *StaffAccountAuthRoleUpdateOne {
	saaruo.mutation.SetAuthRoleID(pu)
	return saaruo
}

// SetStaffAccount sets the "staff_account" edge to the StaffAccount entity.
func (saaruo *StaffAccountAuthRoleUpdateOne) SetStaffAccount(s *StaffAccount) *StaffAccountAuthRoleUpdateOne {
	return saaruo.SetStaffAccountID(s.ID)
}

// SetAuthRole sets the "auth_role" edge to the AuthRole entity.
func (saaruo *StaffAccountAuthRoleUpdateOne) SetAuthRole(a *AuthRole) *StaffAccountAuthRoleUpdateOne {
	return saaruo.SetAuthRoleID(a.ID)
}

// Mutation returns the StaffAccountAuthRoleMutation object of the builder.
func (saaruo *StaffAccountAuthRoleUpdateOne) Mutation() *StaffAccountAuthRoleMutation {
	return saaruo.mutation
}

// ClearStaffAccount clears the "staff_account" edge to the StaffAccount entity.
func (saaruo *StaffAccountAuthRoleUpdateOne) ClearStaffAccount() *StaffAccountAuthRoleUpdateOne {
	saaruo.mutation.ClearStaffAccount()
	return saaruo
}

// ClearAuthRole clears the "auth_role" edge to the AuthRole entity.
func (saaruo *StaffAccountAuthRoleUpdateOne) ClearAuthRole() *StaffAccountAuthRoleUpdateOne {
	saaruo.mutation.ClearAuthRole()
	return saaruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (saaruo *StaffAccountAuthRoleUpdateOne) Select(field string, fields ...string) *StaffAccountAuthRoleUpdateOne {
	saaruo.fields = append([]string{field}, fields...)
	return saaruo
}

// Save executes the query and returns the updated StaffAccountAuthRole entity.
func (saaruo *StaffAccountAuthRoleUpdateOne) Save(ctx context.Context) (*StaffAccountAuthRole, error) {
	var (
		err  error
		node *StaffAccountAuthRole
	)
	saaruo.defaults()
	if len(saaruo.hooks) == 0 {
		if err = saaruo.check(); err != nil {
			return nil, err
		}
		node, err = saaruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StaffAccountAuthRoleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = saaruo.check(); err != nil {
				return nil, err
			}
			saaruo.mutation = mutation
			node, err = saaruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(saaruo.hooks) - 1; i >= 0; i-- {
			if saaruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = saaruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, saaruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*StaffAccountAuthRole)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from StaffAccountAuthRoleMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (saaruo *StaffAccountAuthRoleUpdateOne) SaveX(ctx context.Context) *StaffAccountAuthRole {
	node, err := saaruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (saaruo *StaffAccountAuthRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := saaruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (saaruo *StaffAccountAuthRoleUpdateOne) ExecX(ctx context.Context) {
	if err := saaruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (saaruo *StaffAccountAuthRoleUpdateOne) defaults() {
	if _, ok := saaruo.mutation.UpdatedAt(); !ok {
		v := staffaccountauthrole.UpdateDefaultUpdatedAt()
		saaruo.mutation.SetUpdatedAt(v)
	}
	if _, ok := saaruo.mutation.DeletedAt(); !ok && !saaruo.mutation.DeletedAtCleared() {
		v := staffaccountauthrole.UpdateDefaultDeletedAt()
		saaruo.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (saaruo *StaffAccountAuthRoleUpdateOne) check() error {
	if _, ok := saaruo.mutation.StaffAccountID(); saaruo.mutation.StaffAccountCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "StaffAccountAuthRole.staff_account"`)
	}
	if _, ok := saaruo.mutation.AuthRoleID(); saaruo.mutation.AuthRoleCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "StaffAccountAuthRole.auth_role"`)
	}
	return nil
}

func (saaruo *StaffAccountAuthRoleUpdateOne) sqlSave(ctx context.Context) (_node *StaffAccountAuthRole, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   staffaccountauthrole.Table,
			Columns: staffaccountauthrole.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: staffaccountauthrole.FieldID,
			},
		},
	}
	id, ok := saaruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StaffAccountAuthRole.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := saaruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, staffaccountauthrole.FieldID)
		for _, f := range fields {
			if !staffaccountauthrole.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != staffaccountauthrole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := saaruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := saaruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: staffaccountauthrole.FieldUpdatedAt,
		})
	}
	if value, ok := saaruo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: staffaccountauthrole.FieldDeletedAt,
		})
	}
	if saaruo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: staffaccountauthrole.FieldDeletedAt,
		})
	}
	if saaruo.mutation.StaffAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   staffaccountauthrole.StaffAccountTable,
			Columns: []string{staffaccountauthrole.StaffAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: staffaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := saaruo.mutation.StaffAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   staffaccountauthrole.StaffAccountTable,
			Columns: []string{staffaccountauthrole.StaffAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: staffaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if saaruo.mutation.AuthRoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   staffaccountauthrole.AuthRoleTable,
			Columns: []string{staffaccountauthrole.AuthRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: authrole.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := saaruo.mutation.AuthRoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   staffaccountauthrole.AuthRoleTable,
			Columns: []string{staffaccountauthrole.AuthRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: authrole.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &StaffAccountAuthRole{config: saaruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, saaruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{staffaccountauthrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
