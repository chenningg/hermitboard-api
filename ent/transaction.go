// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/chenningg/hermitboard-api/ent/asset"
	"github.com/chenningg/hermitboard-api/ent/blockchain"
	"github.com/chenningg/hermitboard-api/ent/exchange"
	"github.com/chenningg/hermitboard-api/ent/portfolio"
	"github.com/chenningg/hermitboard-api/ent/transaction"
	"github.com/chenningg/hermitboard-api/ent/transactiontype"
	"github.com/chenningg/hermitboard-api/pulid"
)

// Transaction is the model entity for the Transaction schema.
type Transaction struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.PULID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	// Time holds the value of the "time" field.
	Time time.Time `json:"time,omitempty"`
	// Units holds the value of the "units" field.
	Units int `json:"units,omitempty"`
	// PricePerUnit holds the value of the "price_per_unit" field.
	PricePerUnit float64 `json:"pricePerUnit,omitempty"`
	// BlockchainID holds the value of the "blockchain_id" field.
	BlockchainID *pulid.PULID `json:"blockchainID,omitempty"`
	// ExchangeID holds the value of the "exchange_id" field.
	ExchangeID pulid.PULID `json:"exchangeID,omitempty"`
	// PortfolioID holds the value of the "portfolio_id" field.
	PortfolioID pulid.PULID `json:"portfolioID,omitempty"`
	// BaseAssetID holds the value of the "base_asset_id" field.
	BaseAssetID pulid.PULID `json:"baseAssetID,omitempty"`
	// QuoteAssetID holds the value of the "quote_asset_id" field.
	QuoteAssetID *pulid.PULID `json:"quoteAssetID,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TransactionQuery when eager-loading is set.
	Edges                        TransactionEdges `json:"edges"`
	transaction_transaction_type *pulid.PULID
}

// TransactionEdges holds the relations/edges for other nodes in the graph.
type TransactionEdges struct {
	// TransactionType holds the value of the transaction_type edge.
	TransactionType *TransactionType `json:"transactionType,omitempty"`
	// BaseAsset holds the value of the base_asset edge.
	BaseAsset *Asset `json:"baseAsset,omitempty"`
	// QuoteAsset holds the value of the quote_asset edge.
	QuoteAsset *Asset `json:"quoteAsset,omitempty"`
	// Portfolio holds the value of the portfolio edge.
	Portfolio *Portfolio `json:"portfolio,omitempty"`
	// Exchange holds the value of the exchange edge.
	Exchange *Exchange `json:"exchange,omitempty"`
	// Blockchain holds the value of the blockchain edge.
	Blockchain *Blockchain `json:"blockchain,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
	// totalCount holds the count of the edges above.
	totalCount [6]map[string]int
}

// TransactionTypeOrErr returns the TransactionType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransactionEdges) TransactionTypeOrErr() (*TransactionType, error) {
	if e.loadedTypes[0] {
		if e.TransactionType == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: transactiontype.Label}
		}
		return e.TransactionType, nil
	}
	return nil, &NotLoadedError{edge: "transaction_type"}
}

// BaseAssetOrErr returns the BaseAsset value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransactionEdges) BaseAssetOrErr() (*Asset, error) {
	if e.loadedTypes[1] {
		if e.BaseAsset == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: asset.Label}
		}
		return e.BaseAsset, nil
	}
	return nil, &NotLoadedError{edge: "base_asset"}
}

// QuoteAssetOrErr returns the QuoteAsset value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransactionEdges) QuoteAssetOrErr() (*Asset, error) {
	if e.loadedTypes[2] {
		if e.QuoteAsset == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: asset.Label}
		}
		return e.QuoteAsset, nil
	}
	return nil, &NotLoadedError{edge: "quote_asset"}
}

// PortfolioOrErr returns the Portfolio value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransactionEdges) PortfolioOrErr() (*Portfolio, error) {
	if e.loadedTypes[3] {
		if e.Portfolio == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: portfolio.Label}
		}
		return e.Portfolio, nil
	}
	return nil, &NotLoadedError{edge: "portfolio"}
}

// ExchangeOrErr returns the Exchange value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransactionEdges) ExchangeOrErr() (*Exchange, error) {
	if e.loadedTypes[4] {
		if e.Exchange == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: exchange.Label}
		}
		return e.Exchange, nil
	}
	return nil, &NotLoadedError{edge: "exchange"}
}

// BlockchainOrErr returns the Blockchain value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransactionEdges) BlockchainOrErr() (*Blockchain, error) {
	if e.loadedTypes[5] {
		if e.Blockchain == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: blockchain.Label}
		}
		return e.Blockchain, nil
	}
	return nil, &NotLoadedError{edge: "blockchain"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Transaction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case transaction.FieldBlockchainID, transaction.FieldQuoteAssetID:
			values[i] = &sql.NullScanner{S: new(pulid.PULID)}
		case transaction.FieldID, transaction.FieldExchangeID, transaction.FieldPortfolioID, transaction.FieldBaseAssetID:
			values[i] = new(pulid.PULID)
		case transaction.FieldPricePerUnit:
			values[i] = new(sql.NullFloat64)
		case transaction.FieldUnits:
			values[i] = new(sql.NullInt64)
		case transaction.FieldCreatedAt, transaction.FieldUpdatedAt, transaction.FieldDeletedAt, transaction.FieldTime:
			values[i] = new(sql.NullTime)
		case transaction.ForeignKeys[0]: // transaction_transaction_type
			values[i] = &sql.NullScanner{S: new(pulid.PULID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Transaction", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Transaction fields.
func (t *Transaction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case transaction.FieldID:
			if value, ok := values[i].(*pulid.PULID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case transaction.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case transaction.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		case transaction.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				t.DeletedAt = new(time.Time)
				*t.DeletedAt = value.Time
			}
		case transaction.FieldTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				t.Time = value.Time
			}
		case transaction.FieldUnits:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field units", values[i])
			} else if value.Valid {
				t.Units = int(value.Int64)
			}
		case transaction.FieldPricePerUnit:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price_per_unit", values[i])
			} else if value.Valid {
				t.PricePerUnit = value.Float64
			}
		case transaction.FieldBlockchainID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field blockchain_id", values[i])
			} else if value.Valid {
				t.BlockchainID = new(pulid.PULID)
				*t.BlockchainID = *value.S.(*pulid.PULID)
			}
		case transaction.FieldExchangeID:
			if value, ok := values[i].(*pulid.PULID); !ok {
				return fmt.Errorf("unexpected type %T for field exchange_id", values[i])
			} else if value != nil {
				t.ExchangeID = *value
			}
		case transaction.FieldPortfolioID:
			if value, ok := values[i].(*pulid.PULID); !ok {
				return fmt.Errorf("unexpected type %T for field portfolio_id", values[i])
			} else if value != nil {
				t.PortfolioID = *value
			}
		case transaction.FieldBaseAssetID:
			if value, ok := values[i].(*pulid.PULID); !ok {
				return fmt.Errorf("unexpected type %T for field base_asset_id", values[i])
			} else if value != nil {
				t.BaseAssetID = *value
			}
		case transaction.FieldQuoteAssetID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field quote_asset_id", values[i])
			} else if value.Valid {
				t.QuoteAssetID = new(pulid.PULID)
				*t.QuoteAssetID = *value.S.(*pulid.PULID)
			}
		case transaction.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field transaction_transaction_type", values[i])
			} else if value.Valid {
				t.transaction_transaction_type = new(pulid.PULID)
				*t.transaction_transaction_type = *value.S.(*pulid.PULID)
			}
		}
	}
	return nil
}

// QueryTransactionType queries the "transaction_type" edge of the Transaction entity.
func (t *Transaction) QueryTransactionType() *TransactionTypeQuery {
	return (&TransactionClient{config: t.config}).QueryTransactionType(t)
}

// QueryBaseAsset queries the "base_asset" edge of the Transaction entity.
func (t *Transaction) QueryBaseAsset() *AssetQuery {
	return (&TransactionClient{config: t.config}).QueryBaseAsset(t)
}

// QueryQuoteAsset queries the "quote_asset" edge of the Transaction entity.
func (t *Transaction) QueryQuoteAsset() *AssetQuery {
	return (&TransactionClient{config: t.config}).QueryQuoteAsset(t)
}

// QueryPortfolio queries the "portfolio" edge of the Transaction entity.
func (t *Transaction) QueryPortfolio() *PortfolioQuery {
	return (&TransactionClient{config: t.config}).QueryPortfolio(t)
}

// QueryExchange queries the "exchange" edge of the Transaction entity.
func (t *Transaction) QueryExchange() *ExchangeQuery {
	return (&TransactionClient{config: t.config}).QueryExchange(t)
}

// QueryBlockchain queries the "blockchain" edge of the Transaction entity.
func (t *Transaction) QueryBlockchain() *BlockchainQuery {
	return (&TransactionClient{config: t.config}).QueryBlockchain(t)
}

// Update returns a builder for updating this Transaction.
// Note that you need to call Transaction.Unwrap() before calling this method if this Transaction
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Transaction) Update() *TransactionUpdateOne {
	return (&TransactionClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Transaction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Transaction) Unwrap() *Transaction {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Transaction is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Transaction) String() string {
	var builder strings.Builder
	builder.WriteString("Transaction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := t.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("time=")
	builder.WriteString(t.Time.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("units=")
	builder.WriteString(fmt.Sprintf("%v", t.Units))
	builder.WriteString(", ")
	builder.WriteString("price_per_unit=")
	builder.WriteString(fmt.Sprintf("%v", t.PricePerUnit))
	builder.WriteString(", ")
	if v := t.BlockchainID; v != nil {
		builder.WriteString("blockchain_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("exchange_id=")
	builder.WriteString(fmt.Sprintf("%v", t.ExchangeID))
	builder.WriteString(", ")
	builder.WriteString("portfolio_id=")
	builder.WriteString(fmt.Sprintf("%v", t.PortfolioID))
	builder.WriteString(", ")
	builder.WriteString("base_asset_id=")
	builder.WriteString(fmt.Sprintf("%v", t.BaseAssetID))
	builder.WriteString(", ")
	if v := t.QuoteAssetID; v != nil {
		builder.WriteString("quote_asset_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Transactions is a parsable slice of Transaction.
type Transactions []*Transaction

func (t Transactions) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
