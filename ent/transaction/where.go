// Code generated by ent, DO NOT EDIT.

package transaction

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/chenningg/hermitboard-api/ent/predicate"
	"github.com/chenningg/hermitboard-api/pulid"
)

// ID filters vertices based on their ID field.
func ID(id pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// Time applies equality check predicate on the "time" field. It's identical to TimeEQ.
func Time(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTime), v))
	})
}

// Units applies equality check predicate on the "units" field. It's identical to UnitsEQ.
func Units(v int) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnits), v))
	})
}

// PricePerUnit applies equality check predicate on the "price_per_unit" field. It's identical to PricePerUnitEQ.
func PricePerUnit(v float64) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPricePerUnit), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Transaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Transaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Transaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Transaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Transaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Transaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// TimeEQ applies the EQ predicate on the "time" field.
func TimeEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTime), v))
	})
}

// TimeNEQ applies the NEQ predicate on the "time" field.
func TimeNEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTime), v))
	})
}

// TimeIn applies the In predicate on the "time" field.
func TimeIn(vs ...time.Time) predicate.Transaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTime), v...))
	})
}

// TimeNotIn applies the NotIn predicate on the "time" field.
func TimeNotIn(vs ...time.Time) predicate.Transaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTime), v...))
	})
}

// TimeGT applies the GT predicate on the "time" field.
func TimeGT(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTime), v))
	})
}

// TimeGTE applies the GTE predicate on the "time" field.
func TimeGTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTime), v))
	})
}

// TimeLT applies the LT predicate on the "time" field.
func TimeLT(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTime), v))
	})
}

// TimeLTE applies the LTE predicate on the "time" field.
func TimeLTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTime), v))
	})
}

// UnitsEQ applies the EQ predicate on the "units" field.
func UnitsEQ(v int) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnits), v))
	})
}

// UnitsNEQ applies the NEQ predicate on the "units" field.
func UnitsNEQ(v int) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnits), v))
	})
}

// UnitsIn applies the In predicate on the "units" field.
func UnitsIn(vs ...int) predicate.Transaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUnits), v...))
	})
}

// UnitsNotIn applies the NotIn predicate on the "units" field.
func UnitsNotIn(vs ...int) predicate.Transaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUnits), v...))
	})
}

// UnitsGT applies the GT predicate on the "units" field.
func UnitsGT(v int) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnits), v))
	})
}

// UnitsGTE applies the GTE predicate on the "units" field.
func UnitsGTE(v int) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnits), v))
	})
}

// UnitsLT applies the LT predicate on the "units" field.
func UnitsLT(v int) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnits), v))
	})
}

// UnitsLTE applies the LTE predicate on the "units" field.
func UnitsLTE(v int) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnits), v))
	})
}

// PricePerUnitEQ applies the EQ predicate on the "price_per_unit" field.
func PricePerUnitEQ(v float64) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPricePerUnit), v))
	})
}

// PricePerUnitNEQ applies the NEQ predicate on the "price_per_unit" field.
func PricePerUnitNEQ(v float64) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPricePerUnit), v))
	})
}

// PricePerUnitIn applies the In predicate on the "price_per_unit" field.
func PricePerUnitIn(vs ...float64) predicate.Transaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPricePerUnit), v...))
	})
}

// PricePerUnitNotIn applies the NotIn predicate on the "price_per_unit" field.
func PricePerUnitNotIn(vs ...float64) predicate.Transaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPricePerUnit), v...))
	})
}

// PricePerUnitGT applies the GT predicate on the "price_per_unit" field.
func PricePerUnitGT(v float64) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPricePerUnit), v))
	})
}

// PricePerUnitGTE applies the GTE predicate on the "price_per_unit" field.
func PricePerUnitGTE(v float64) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPricePerUnit), v))
	})
}

// PricePerUnitLT applies the LT predicate on the "price_per_unit" field.
func PricePerUnitLT(v float64) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPricePerUnit), v))
	})
}

// PricePerUnitLTE applies the LTE predicate on the "price_per_unit" field.
func PricePerUnitLTE(v float64) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPricePerUnit), v))
	})
}

// HasTransactionType applies the HasEdge predicate on the "transaction_type" edge.
func HasTransactionType() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TransactionTypeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TransactionTypeTable, TransactionTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTransactionTypeWith applies the HasEdge predicate on the "transaction_type" edge with a given conditions (other predicates).
func HasTransactionTypeWith(preds ...predicate.TransactionType) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TransactionTypeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TransactionTypeTable, TransactionTypeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBaseAsset applies the HasEdge predicate on the "base_asset" edge.
func HasBaseAsset() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BaseAssetTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BaseAssetTable, BaseAssetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBaseAssetWith applies the HasEdge predicate on the "base_asset" edge with a given conditions (other predicates).
func HasBaseAssetWith(preds ...predicate.Asset) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BaseAssetInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BaseAssetTable, BaseAssetColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasQuoteAsset applies the HasEdge predicate on the "quote_asset" edge.
func HasQuoteAsset() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QuoteAssetTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, QuoteAssetTable, QuoteAssetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuoteAssetWith applies the HasEdge predicate on the "quote_asset" edge with a given conditions (other predicates).
func HasQuoteAssetWith(preds ...predicate.Asset) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QuoteAssetInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, QuoteAssetTable, QuoteAssetColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPortfolio applies the HasEdge predicate on the "portfolio" edge.
func HasPortfolio() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PortfolioTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PortfolioTable, PortfolioColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPortfolioWith applies the HasEdge predicate on the "portfolio" edge with a given conditions (other predicates).
func HasPortfolioWith(preds ...predicate.Portfolio) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PortfolioInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PortfolioTable, PortfolioColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExchange applies the HasEdge predicate on the "exchange" edge.
func HasExchange() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ExchangeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExchangeTable, ExchangeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExchangeWith applies the HasEdge predicate on the "exchange" edge with a given conditions (other predicates).
func HasExchangeWith(preds ...predicate.Exchange) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ExchangeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExchangeTable, ExchangeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBlockchain applies the HasEdge predicate on the "blockchain" edge.
func HasBlockchain() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BlockchainTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BlockchainTable, BlockchainColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlockchainWith applies the HasEdge predicate on the "blockchain" edge with a given conditions (other predicates).
func HasBlockchainWith(preds ...predicate.Blockchain) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BlockchainInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BlockchainTable, BlockchainColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		p(s.Not())
	})
}
