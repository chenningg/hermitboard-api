// Code generated by ent, DO NOT EDIT.

package transaction

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/chenningg/hermitboard-api/ent/predicate"
	"github.com/chenningg/hermitboard-api/pulid"
)

// ID filters vertices based on their ID field.
func ID(id pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// Time applies equality check predicate on the "time" field. It's identical to TimeEQ.
func Time(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTime), v))
	})
}

// Units applies equality check predicate on the "units" field. It's identical to UnitsEQ.
func Units(v int) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnits), v))
	})
}

// PricePerUnit applies equality check predicate on the "price_per_unit" field. It's identical to PricePerUnitEQ.
func PricePerUnit(v float64) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPricePerUnit), v))
	})
}

// BlockchainID applies equality check predicate on the "blockchain_id" field. It's identical to BlockchainIDEQ.
func BlockchainID(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBlockchainID), v))
	})
}

// TransactionTypeID applies equality check predicate on the "transaction_type_id" field. It's identical to TransactionTypeIDEQ.
func TransactionTypeID(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionTypeID), v))
	})
}

// ExchangeID applies equality check predicate on the "exchange_id" field. It's identical to ExchangeIDEQ.
func ExchangeID(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExchangeID), v))
	})
}

// PortfolioID applies equality check predicate on the "portfolio_id" field. It's identical to PortfolioIDEQ.
func PortfolioID(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPortfolioID), v))
	})
}

// BaseAssetID applies equality check predicate on the "base_asset_id" field. It's identical to BaseAssetIDEQ.
func BaseAssetID(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBaseAssetID), v))
	})
}

// QuoteAssetID applies equality check predicate on the "quote_asset_id" field. It's identical to QuoteAssetIDEQ.
func QuoteAssetID(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuoteAssetID), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Transaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Transaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Transaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Transaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Transaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Transaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// TimeEQ applies the EQ predicate on the "time" field.
func TimeEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTime), v))
	})
}

// TimeNEQ applies the NEQ predicate on the "time" field.
func TimeNEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTime), v))
	})
}

// TimeIn applies the In predicate on the "time" field.
func TimeIn(vs ...time.Time) predicate.Transaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTime), v...))
	})
}

// TimeNotIn applies the NotIn predicate on the "time" field.
func TimeNotIn(vs ...time.Time) predicate.Transaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTime), v...))
	})
}

// TimeGT applies the GT predicate on the "time" field.
func TimeGT(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTime), v))
	})
}

// TimeGTE applies the GTE predicate on the "time" field.
func TimeGTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTime), v))
	})
}

// TimeLT applies the LT predicate on the "time" field.
func TimeLT(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTime), v))
	})
}

// TimeLTE applies the LTE predicate on the "time" field.
func TimeLTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTime), v))
	})
}

// UnitsEQ applies the EQ predicate on the "units" field.
func UnitsEQ(v int) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnits), v))
	})
}

// UnitsNEQ applies the NEQ predicate on the "units" field.
func UnitsNEQ(v int) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnits), v))
	})
}

// UnitsIn applies the In predicate on the "units" field.
func UnitsIn(vs ...int) predicate.Transaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUnits), v...))
	})
}

// UnitsNotIn applies the NotIn predicate on the "units" field.
func UnitsNotIn(vs ...int) predicate.Transaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUnits), v...))
	})
}

// UnitsGT applies the GT predicate on the "units" field.
func UnitsGT(v int) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnits), v))
	})
}

// UnitsGTE applies the GTE predicate on the "units" field.
func UnitsGTE(v int) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnits), v))
	})
}

// UnitsLT applies the LT predicate on the "units" field.
func UnitsLT(v int) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnits), v))
	})
}

// UnitsLTE applies the LTE predicate on the "units" field.
func UnitsLTE(v int) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnits), v))
	})
}

// PricePerUnitEQ applies the EQ predicate on the "price_per_unit" field.
func PricePerUnitEQ(v float64) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPricePerUnit), v))
	})
}

// PricePerUnitNEQ applies the NEQ predicate on the "price_per_unit" field.
func PricePerUnitNEQ(v float64) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPricePerUnit), v))
	})
}

// PricePerUnitIn applies the In predicate on the "price_per_unit" field.
func PricePerUnitIn(vs ...float64) predicate.Transaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPricePerUnit), v...))
	})
}

// PricePerUnitNotIn applies the NotIn predicate on the "price_per_unit" field.
func PricePerUnitNotIn(vs ...float64) predicate.Transaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPricePerUnit), v...))
	})
}

// PricePerUnitGT applies the GT predicate on the "price_per_unit" field.
func PricePerUnitGT(v float64) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPricePerUnit), v))
	})
}

// PricePerUnitGTE applies the GTE predicate on the "price_per_unit" field.
func PricePerUnitGTE(v float64) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPricePerUnit), v))
	})
}

// PricePerUnitLT applies the LT predicate on the "price_per_unit" field.
func PricePerUnitLT(v float64) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPricePerUnit), v))
	})
}

// PricePerUnitLTE applies the LTE predicate on the "price_per_unit" field.
func PricePerUnitLTE(v float64) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPricePerUnit), v))
	})
}

// BlockchainIDEQ applies the EQ predicate on the "blockchain_id" field.
func BlockchainIDEQ(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBlockchainID), v))
	})
}

// BlockchainIDNEQ applies the NEQ predicate on the "blockchain_id" field.
func BlockchainIDNEQ(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBlockchainID), v))
	})
}

// BlockchainIDIn applies the In predicate on the "blockchain_id" field.
func BlockchainIDIn(vs ...pulid.PULID) predicate.Transaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBlockchainID), v...))
	})
}

// BlockchainIDNotIn applies the NotIn predicate on the "blockchain_id" field.
func BlockchainIDNotIn(vs ...pulid.PULID) predicate.Transaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBlockchainID), v...))
	})
}

// BlockchainIDGT applies the GT predicate on the "blockchain_id" field.
func BlockchainIDGT(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBlockchainID), v))
	})
}

// BlockchainIDGTE applies the GTE predicate on the "blockchain_id" field.
func BlockchainIDGTE(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBlockchainID), v))
	})
}

// BlockchainIDLT applies the LT predicate on the "blockchain_id" field.
func BlockchainIDLT(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBlockchainID), v))
	})
}

// BlockchainIDLTE applies the LTE predicate on the "blockchain_id" field.
func BlockchainIDLTE(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBlockchainID), v))
	})
}

// BlockchainIDContains applies the Contains predicate on the "blockchain_id" field.
func BlockchainIDContains(v pulid.PULID) predicate.Transaction {
	vc := string(v)
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBlockchainID), vc))
	})
}

// BlockchainIDHasPrefix applies the HasPrefix predicate on the "blockchain_id" field.
func BlockchainIDHasPrefix(v pulid.PULID) predicate.Transaction {
	vc := string(v)
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBlockchainID), vc))
	})
}

// BlockchainIDHasSuffix applies the HasSuffix predicate on the "blockchain_id" field.
func BlockchainIDHasSuffix(v pulid.PULID) predicate.Transaction {
	vc := string(v)
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBlockchainID), vc))
	})
}

// BlockchainIDIsNil applies the IsNil predicate on the "blockchain_id" field.
func BlockchainIDIsNil() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBlockchainID)))
	})
}

// BlockchainIDNotNil applies the NotNil predicate on the "blockchain_id" field.
func BlockchainIDNotNil() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBlockchainID)))
	})
}

// BlockchainIDEqualFold applies the EqualFold predicate on the "blockchain_id" field.
func BlockchainIDEqualFold(v pulid.PULID) predicate.Transaction {
	vc := string(v)
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBlockchainID), vc))
	})
}

// BlockchainIDContainsFold applies the ContainsFold predicate on the "blockchain_id" field.
func BlockchainIDContainsFold(v pulid.PULID) predicate.Transaction {
	vc := string(v)
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBlockchainID), vc))
	})
}

// TransactionTypeIDEQ applies the EQ predicate on the "transaction_type_id" field.
func TransactionTypeIDEQ(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionTypeID), v))
	})
}

// TransactionTypeIDNEQ applies the NEQ predicate on the "transaction_type_id" field.
func TransactionTypeIDNEQ(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTransactionTypeID), v))
	})
}

// TransactionTypeIDIn applies the In predicate on the "transaction_type_id" field.
func TransactionTypeIDIn(vs ...pulid.PULID) predicate.Transaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTransactionTypeID), v...))
	})
}

// TransactionTypeIDNotIn applies the NotIn predicate on the "transaction_type_id" field.
func TransactionTypeIDNotIn(vs ...pulid.PULID) predicate.Transaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTransactionTypeID), v...))
	})
}

// TransactionTypeIDGT applies the GT predicate on the "transaction_type_id" field.
func TransactionTypeIDGT(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTransactionTypeID), v))
	})
}

// TransactionTypeIDGTE applies the GTE predicate on the "transaction_type_id" field.
func TransactionTypeIDGTE(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTransactionTypeID), v))
	})
}

// TransactionTypeIDLT applies the LT predicate on the "transaction_type_id" field.
func TransactionTypeIDLT(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTransactionTypeID), v))
	})
}

// TransactionTypeIDLTE applies the LTE predicate on the "transaction_type_id" field.
func TransactionTypeIDLTE(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTransactionTypeID), v))
	})
}

// TransactionTypeIDContains applies the Contains predicate on the "transaction_type_id" field.
func TransactionTypeIDContains(v pulid.PULID) predicate.Transaction {
	vc := string(v)
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTransactionTypeID), vc))
	})
}

// TransactionTypeIDHasPrefix applies the HasPrefix predicate on the "transaction_type_id" field.
func TransactionTypeIDHasPrefix(v pulid.PULID) predicate.Transaction {
	vc := string(v)
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTransactionTypeID), vc))
	})
}

// TransactionTypeIDHasSuffix applies the HasSuffix predicate on the "transaction_type_id" field.
func TransactionTypeIDHasSuffix(v pulid.PULID) predicate.Transaction {
	vc := string(v)
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTransactionTypeID), vc))
	})
}

// TransactionTypeIDEqualFold applies the EqualFold predicate on the "transaction_type_id" field.
func TransactionTypeIDEqualFold(v pulid.PULID) predicate.Transaction {
	vc := string(v)
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTransactionTypeID), vc))
	})
}

// TransactionTypeIDContainsFold applies the ContainsFold predicate on the "transaction_type_id" field.
func TransactionTypeIDContainsFold(v pulid.PULID) predicate.Transaction {
	vc := string(v)
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTransactionTypeID), vc))
	})
}

// ExchangeIDEQ applies the EQ predicate on the "exchange_id" field.
func ExchangeIDEQ(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExchangeID), v))
	})
}

// ExchangeIDNEQ applies the NEQ predicate on the "exchange_id" field.
func ExchangeIDNEQ(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExchangeID), v))
	})
}

// ExchangeIDIn applies the In predicate on the "exchange_id" field.
func ExchangeIDIn(vs ...pulid.PULID) predicate.Transaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldExchangeID), v...))
	})
}

// ExchangeIDNotIn applies the NotIn predicate on the "exchange_id" field.
func ExchangeIDNotIn(vs ...pulid.PULID) predicate.Transaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldExchangeID), v...))
	})
}

// ExchangeIDGT applies the GT predicate on the "exchange_id" field.
func ExchangeIDGT(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExchangeID), v))
	})
}

// ExchangeIDGTE applies the GTE predicate on the "exchange_id" field.
func ExchangeIDGTE(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExchangeID), v))
	})
}

// ExchangeIDLT applies the LT predicate on the "exchange_id" field.
func ExchangeIDLT(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExchangeID), v))
	})
}

// ExchangeIDLTE applies the LTE predicate on the "exchange_id" field.
func ExchangeIDLTE(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExchangeID), v))
	})
}

// ExchangeIDContains applies the Contains predicate on the "exchange_id" field.
func ExchangeIDContains(v pulid.PULID) predicate.Transaction {
	vc := string(v)
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldExchangeID), vc))
	})
}

// ExchangeIDHasPrefix applies the HasPrefix predicate on the "exchange_id" field.
func ExchangeIDHasPrefix(v pulid.PULID) predicate.Transaction {
	vc := string(v)
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldExchangeID), vc))
	})
}

// ExchangeIDHasSuffix applies the HasSuffix predicate on the "exchange_id" field.
func ExchangeIDHasSuffix(v pulid.PULID) predicate.Transaction {
	vc := string(v)
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldExchangeID), vc))
	})
}

// ExchangeIDEqualFold applies the EqualFold predicate on the "exchange_id" field.
func ExchangeIDEqualFold(v pulid.PULID) predicate.Transaction {
	vc := string(v)
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldExchangeID), vc))
	})
}

// ExchangeIDContainsFold applies the ContainsFold predicate on the "exchange_id" field.
func ExchangeIDContainsFold(v pulid.PULID) predicate.Transaction {
	vc := string(v)
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldExchangeID), vc))
	})
}

// PortfolioIDEQ applies the EQ predicate on the "portfolio_id" field.
func PortfolioIDEQ(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPortfolioID), v))
	})
}

// PortfolioIDNEQ applies the NEQ predicate on the "portfolio_id" field.
func PortfolioIDNEQ(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPortfolioID), v))
	})
}

// PortfolioIDIn applies the In predicate on the "portfolio_id" field.
func PortfolioIDIn(vs ...pulid.PULID) predicate.Transaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPortfolioID), v...))
	})
}

// PortfolioIDNotIn applies the NotIn predicate on the "portfolio_id" field.
func PortfolioIDNotIn(vs ...pulid.PULID) predicate.Transaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPortfolioID), v...))
	})
}

// PortfolioIDGT applies the GT predicate on the "portfolio_id" field.
func PortfolioIDGT(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPortfolioID), v))
	})
}

// PortfolioIDGTE applies the GTE predicate on the "portfolio_id" field.
func PortfolioIDGTE(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPortfolioID), v))
	})
}

// PortfolioIDLT applies the LT predicate on the "portfolio_id" field.
func PortfolioIDLT(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPortfolioID), v))
	})
}

// PortfolioIDLTE applies the LTE predicate on the "portfolio_id" field.
func PortfolioIDLTE(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPortfolioID), v))
	})
}

// PortfolioIDContains applies the Contains predicate on the "portfolio_id" field.
func PortfolioIDContains(v pulid.PULID) predicate.Transaction {
	vc := string(v)
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPortfolioID), vc))
	})
}

// PortfolioIDHasPrefix applies the HasPrefix predicate on the "portfolio_id" field.
func PortfolioIDHasPrefix(v pulid.PULID) predicate.Transaction {
	vc := string(v)
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPortfolioID), vc))
	})
}

// PortfolioIDHasSuffix applies the HasSuffix predicate on the "portfolio_id" field.
func PortfolioIDHasSuffix(v pulid.PULID) predicate.Transaction {
	vc := string(v)
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPortfolioID), vc))
	})
}

// PortfolioIDEqualFold applies the EqualFold predicate on the "portfolio_id" field.
func PortfolioIDEqualFold(v pulid.PULID) predicate.Transaction {
	vc := string(v)
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPortfolioID), vc))
	})
}

// PortfolioIDContainsFold applies the ContainsFold predicate on the "portfolio_id" field.
func PortfolioIDContainsFold(v pulid.PULID) predicate.Transaction {
	vc := string(v)
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPortfolioID), vc))
	})
}

// BaseAssetIDEQ applies the EQ predicate on the "base_asset_id" field.
func BaseAssetIDEQ(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBaseAssetID), v))
	})
}

// BaseAssetIDNEQ applies the NEQ predicate on the "base_asset_id" field.
func BaseAssetIDNEQ(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBaseAssetID), v))
	})
}

// BaseAssetIDIn applies the In predicate on the "base_asset_id" field.
func BaseAssetIDIn(vs ...pulid.PULID) predicate.Transaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBaseAssetID), v...))
	})
}

// BaseAssetIDNotIn applies the NotIn predicate on the "base_asset_id" field.
func BaseAssetIDNotIn(vs ...pulid.PULID) predicate.Transaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBaseAssetID), v...))
	})
}

// BaseAssetIDGT applies the GT predicate on the "base_asset_id" field.
func BaseAssetIDGT(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBaseAssetID), v))
	})
}

// BaseAssetIDGTE applies the GTE predicate on the "base_asset_id" field.
func BaseAssetIDGTE(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBaseAssetID), v))
	})
}

// BaseAssetIDLT applies the LT predicate on the "base_asset_id" field.
func BaseAssetIDLT(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBaseAssetID), v))
	})
}

// BaseAssetIDLTE applies the LTE predicate on the "base_asset_id" field.
func BaseAssetIDLTE(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBaseAssetID), v))
	})
}

// BaseAssetIDContains applies the Contains predicate on the "base_asset_id" field.
func BaseAssetIDContains(v pulid.PULID) predicate.Transaction {
	vc := string(v)
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBaseAssetID), vc))
	})
}

// BaseAssetIDHasPrefix applies the HasPrefix predicate on the "base_asset_id" field.
func BaseAssetIDHasPrefix(v pulid.PULID) predicate.Transaction {
	vc := string(v)
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBaseAssetID), vc))
	})
}

// BaseAssetIDHasSuffix applies the HasSuffix predicate on the "base_asset_id" field.
func BaseAssetIDHasSuffix(v pulid.PULID) predicate.Transaction {
	vc := string(v)
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBaseAssetID), vc))
	})
}

// BaseAssetIDEqualFold applies the EqualFold predicate on the "base_asset_id" field.
func BaseAssetIDEqualFold(v pulid.PULID) predicate.Transaction {
	vc := string(v)
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBaseAssetID), vc))
	})
}

// BaseAssetIDContainsFold applies the ContainsFold predicate on the "base_asset_id" field.
func BaseAssetIDContainsFold(v pulid.PULID) predicate.Transaction {
	vc := string(v)
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBaseAssetID), vc))
	})
}

// QuoteAssetIDEQ applies the EQ predicate on the "quote_asset_id" field.
func QuoteAssetIDEQ(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuoteAssetID), v))
	})
}

// QuoteAssetIDNEQ applies the NEQ predicate on the "quote_asset_id" field.
func QuoteAssetIDNEQ(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuoteAssetID), v))
	})
}

// QuoteAssetIDIn applies the In predicate on the "quote_asset_id" field.
func QuoteAssetIDIn(vs ...pulid.PULID) predicate.Transaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldQuoteAssetID), v...))
	})
}

// QuoteAssetIDNotIn applies the NotIn predicate on the "quote_asset_id" field.
func QuoteAssetIDNotIn(vs ...pulid.PULID) predicate.Transaction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldQuoteAssetID), v...))
	})
}

// QuoteAssetIDGT applies the GT predicate on the "quote_asset_id" field.
func QuoteAssetIDGT(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQuoteAssetID), v))
	})
}

// QuoteAssetIDGTE applies the GTE predicate on the "quote_asset_id" field.
func QuoteAssetIDGTE(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQuoteAssetID), v))
	})
}

// QuoteAssetIDLT applies the LT predicate on the "quote_asset_id" field.
func QuoteAssetIDLT(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQuoteAssetID), v))
	})
}

// QuoteAssetIDLTE applies the LTE predicate on the "quote_asset_id" field.
func QuoteAssetIDLTE(v pulid.PULID) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQuoteAssetID), v))
	})
}

// QuoteAssetIDContains applies the Contains predicate on the "quote_asset_id" field.
func QuoteAssetIDContains(v pulid.PULID) predicate.Transaction {
	vc := string(v)
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldQuoteAssetID), vc))
	})
}

// QuoteAssetIDHasPrefix applies the HasPrefix predicate on the "quote_asset_id" field.
func QuoteAssetIDHasPrefix(v pulid.PULID) predicate.Transaction {
	vc := string(v)
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldQuoteAssetID), vc))
	})
}

// QuoteAssetIDHasSuffix applies the HasSuffix predicate on the "quote_asset_id" field.
func QuoteAssetIDHasSuffix(v pulid.PULID) predicate.Transaction {
	vc := string(v)
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldQuoteAssetID), vc))
	})
}

// QuoteAssetIDIsNil applies the IsNil predicate on the "quote_asset_id" field.
func QuoteAssetIDIsNil() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldQuoteAssetID)))
	})
}

// QuoteAssetIDNotNil applies the NotNil predicate on the "quote_asset_id" field.
func QuoteAssetIDNotNil() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldQuoteAssetID)))
	})
}

// QuoteAssetIDEqualFold applies the EqualFold predicate on the "quote_asset_id" field.
func QuoteAssetIDEqualFold(v pulid.PULID) predicate.Transaction {
	vc := string(v)
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldQuoteAssetID), vc))
	})
}

// QuoteAssetIDContainsFold applies the ContainsFold predicate on the "quote_asset_id" field.
func QuoteAssetIDContainsFold(v pulid.PULID) predicate.Transaction {
	vc := string(v)
	return predicate.Transaction(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldQuoteAssetID), vc))
	})
}

// HasTransactionType applies the HasEdge predicate on the "transaction_type" edge.
func HasTransactionType() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TransactionTypeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TransactionTypeTable, TransactionTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTransactionTypeWith applies the HasEdge predicate on the "transaction_type" edge with a given conditions (other predicates).
func HasTransactionTypeWith(preds ...predicate.TransactionType) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TransactionTypeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TransactionTypeTable, TransactionTypeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBaseAsset applies the HasEdge predicate on the "base_asset" edge.
func HasBaseAsset() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BaseAssetTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BaseAssetTable, BaseAssetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBaseAssetWith applies the HasEdge predicate on the "base_asset" edge with a given conditions (other predicates).
func HasBaseAssetWith(preds ...predicate.Asset) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BaseAssetInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BaseAssetTable, BaseAssetColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasQuoteAsset applies the HasEdge predicate on the "quote_asset" edge.
func HasQuoteAsset() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QuoteAssetTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, QuoteAssetTable, QuoteAssetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuoteAssetWith applies the HasEdge predicate on the "quote_asset" edge with a given conditions (other predicates).
func HasQuoteAssetWith(preds ...predicate.Asset) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QuoteAssetInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, QuoteAssetTable, QuoteAssetColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPortfolio applies the HasEdge predicate on the "portfolio" edge.
func HasPortfolio() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PortfolioTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PortfolioTable, PortfolioColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPortfolioWith applies the HasEdge predicate on the "portfolio" edge with a given conditions (other predicates).
func HasPortfolioWith(preds ...predicate.Portfolio) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PortfolioInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PortfolioTable, PortfolioColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExchange applies the HasEdge predicate on the "exchange" edge.
func HasExchange() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ExchangeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExchangeTable, ExchangeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExchangeWith applies the HasEdge predicate on the "exchange" edge with a given conditions (other predicates).
func HasExchangeWith(preds ...predicate.Exchange) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ExchangeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExchangeTable, ExchangeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBlockchain applies the HasEdge predicate on the "blockchain" edge.
func HasBlockchain() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BlockchainTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BlockchainTable, BlockchainColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlockchainWith applies the HasEdge predicate on the "blockchain" edge with a given conditions (other predicates).
func HasBlockchainWith(preds ...predicate.Blockchain) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BlockchainInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BlockchainTable, BlockchainColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		p(s.Not())
	})
}
