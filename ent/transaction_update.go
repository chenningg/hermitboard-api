// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chenningg/hermitboard-api/ent/asset"
	"github.com/chenningg/hermitboard-api/ent/exchange"
	"github.com/chenningg/hermitboard-api/ent/portfolio"
	"github.com/chenningg/hermitboard-api/ent/predicate"
	"github.com/chenningg/hermitboard-api/ent/transaction"
	"github.com/chenningg/hermitboard-api/ent/transactiontype"
	"github.com/chenningg/hermitboard-api/pulid"
)

// TransactionUpdate is the builder for updating Transaction entities.
type TransactionUpdate struct {
	config
	hooks    []Hook
	mutation *TransactionMutation
}

// Where appends a list predicates to the TransactionUpdate builder.
func (tu *TransactionUpdate) Where(ps ...predicate.Transaction) *TransactionUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TransactionUpdate) SetUpdatedAt(t time.Time) *TransactionUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetDeletedAt sets the "deleted_at" field.
func (tu *TransactionUpdate) SetDeletedAt(t time.Time) *TransactionUpdate {
	tu.mutation.SetDeletedAt(t)
	return tu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tu *TransactionUpdate) ClearDeletedAt() *TransactionUpdate {
	tu.mutation.ClearDeletedAt()
	return tu
}

// SetTime sets the "time" field.
func (tu *TransactionUpdate) SetTime(t time.Time) *TransactionUpdate {
	tu.mutation.SetTime(t)
	return tu
}

// SetUnits sets the "units" field.
func (tu *TransactionUpdate) SetUnits(i int) *TransactionUpdate {
	tu.mutation.ResetUnits()
	tu.mutation.SetUnits(i)
	return tu
}

// AddUnits adds i to the "units" field.
func (tu *TransactionUpdate) AddUnits(i int) *TransactionUpdate {
	tu.mutation.AddUnits(i)
	return tu
}

// SetPricePerUnit sets the "price_per_unit" field.
func (tu *TransactionUpdate) SetPricePerUnit(f float64) *TransactionUpdate {
	tu.mutation.ResetPricePerUnit()
	tu.mutation.SetPricePerUnit(f)
	return tu
}

// AddPricePerUnit adds f to the "price_per_unit" field.
func (tu *TransactionUpdate) AddPricePerUnit(f float64) *TransactionUpdate {
	tu.mutation.AddPricePerUnit(f)
	return tu
}

// SetTransactionTypeID sets the "transaction_type_id" field.
func (tu *TransactionUpdate) SetTransactionTypeID(pu pulid.PULID) *TransactionUpdate {
	tu.mutation.SetTransactionTypeID(pu)
	return tu
}

// SetBaseAssetID sets the "base_asset_id" field.
func (tu *TransactionUpdate) SetBaseAssetID(pu pulid.PULID) *TransactionUpdate {
	tu.mutation.SetBaseAssetID(pu)
	return tu
}

// SetQuoteAssetID sets the "quote_asset_id" field.
func (tu *TransactionUpdate) SetQuoteAssetID(pu pulid.PULID) *TransactionUpdate {
	tu.mutation.SetQuoteAssetID(pu)
	return tu
}

// SetNillableQuoteAssetID sets the "quote_asset_id" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableQuoteAssetID(pu *pulid.PULID) *TransactionUpdate {
	if pu != nil {
		tu.SetQuoteAssetID(*pu)
	}
	return tu
}

// ClearQuoteAssetID clears the value of the "quote_asset_id" field.
func (tu *TransactionUpdate) ClearQuoteAssetID() *TransactionUpdate {
	tu.mutation.ClearQuoteAssetID()
	return tu
}

// SetPortfolioID sets the "portfolio_id" field.
func (tu *TransactionUpdate) SetPortfolioID(pu pulid.PULID) *TransactionUpdate {
	tu.mutation.SetPortfolioID(pu)
	return tu
}

// SetExchangeID sets the "exchange_id" field.
func (tu *TransactionUpdate) SetExchangeID(pu pulid.PULID) *TransactionUpdate {
	tu.mutation.SetExchangeID(pu)
	return tu
}

// SetTransactionType sets the "transaction_type" edge to the TransactionType entity.
func (tu *TransactionUpdate) SetTransactionType(t *TransactionType) *TransactionUpdate {
	return tu.SetTransactionTypeID(t.ID)
}

// SetBaseAsset sets the "base_asset" edge to the Asset entity.
func (tu *TransactionUpdate) SetBaseAsset(a *Asset) *TransactionUpdate {
	return tu.SetBaseAssetID(a.ID)
}

// SetQuoteAsset sets the "quote_asset" edge to the Asset entity.
func (tu *TransactionUpdate) SetQuoteAsset(a *Asset) *TransactionUpdate {
	return tu.SetQuoteAssetID(a.ID)
}

// SetPortfolio sets the "portfolio" edge to the Portfolio entity.
func (tu *TransactionUpdate) SetPortfolio(p *Portfolio) *TransactionUpdate {
	return tu.SetPortfolioID(p.ID)
}

// SetExchange sets the "exchange" edge to the Exchange entity.
func (tu *TransactionUpdate) SetExchange(e *Exchange) *TransactionUpdate {
	return tu.SetExchangeID(e.ID)
}

// Mutation returns the TransactionMutation object of the builder.
func (tu *TransactionUpdate) Mutation() *TransactionMutation {
	return tu.mutation
}

// ClearTransactionType clears the "transaction_type" edge to the TransactionType entity.
func (tu *TransactionUpdate) ClearTransactionType() *TransactionUpdate {
	tu.mutation.ClearTransactionType()
	return tu
}

// ClearBaseAsset clears the "base_asset" edge to the Asset entity.
func (tu *TransactionUpdate) ClearBaseAsset() *TransactionUpdate {
	tu.mutation.ClearBaseAsset()
	return tu
}

// ClearQuoteAsset clears the "quote_asset" edge to the Asset entity.
func (tu *TransactionUpdate) ClearQuoteAsset() *TransactionUpdate {
	tu.mutation.ClearQuoteAsset()
	return tu
}

// ClearPortfolio clears the "portfolio" edge to the Portfolio entity.
func (tu *TransactionUpdate) ClearPortfolio() *TransactionUpdate {
	tu.mutation.ClearPortfolio()
	return tu
}

// ClearExchange clears the "exchange" edge to the Exchange entity.
func (tu *TransactionUpdate) ClearExchange() *TransactionUpdate {
	tu.mutation.ClearExchange()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TransactionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tu.defaults()
	if len(tu.hooks) == 0 {
		if err = tu.check(); err != nil {
			return 0, err
		}
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tu.check(); err != nil {
				return 0, err
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TransactionUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TransactionUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TransactionUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TransactionUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := transaction.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
	if _, ok := tu.mutation.DeletedAt(); !ok && !tu.mutation.DeletedAtCleared() {
		v := transaction.UpdateDefaultDeletedAt()
		tu.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TransactionUpdate) check() error {
	if _, ok := tu.mutation.TransactionTypeID(); tu.mutation.TransactionTypeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Transaction.transaction_type"`)
	}
	if _, ok := tu.mutation.BaseAssetID(); tu.mutation.BaseAssetCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Transaction.base_asset"`)
	}
	if _, ok := tu.mutation.PortfolioID(); tu.mutation.PortfolioCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Transaction.portfolio"`)
	}
	if _, ok := tu.mutation.ExchangeID(); tu.mutation.ExchangeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Transaction.exchange"`)
	}
	return nil
}

func (tu *TransactionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   transaction.Table,
			Columns: transaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: transaction.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: transaction.FieldUpdatedAt,
		})
	}
	if value, ok := tu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: transaction.FieldDeletedAt,
		})
	}
	if tu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: transaction.FieldDeletedAt,
		})
	}
	if value, ok := tu.mutation.Time(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: transaction.FieldTime,
		})
	}
	if value, ok := tu.mutation.Units(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: transaction.FieldUnits,
		})
	}
	if value, ok := tu.mutation.AddedUnits(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: transaction.FieldUnits,
		})
	}
	if value, ok := tu.mutation.PricePerUnit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transaction.FieldPricePerUnit,
		})
	}
	if value, ok := tu.mutation.AddedPricePerUnit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transaction.FieldPricePerUnit,
		})
	}
	if tu.mutation.TransactionTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   transaction.TransactionTypeTable,
			Columns: []string{transaction.TransactionTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transactiontype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TransactionTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   transaction.TransactionTypeTable,
			Columns: []string{transaction.TransactionTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transactiontype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.BaseAssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   transaction.BaseAssetTable,
			Columns: []string{transaction.BaseAssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: asset.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.BaseAssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   transaction.BaseAssetTable,
			Columns: []string{transaction.BaseAssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: asset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.QuoteAssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   transaction.QuoteAssetTable,
			Columns: []string{transaction.QuoteAssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: asset.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.QuoteAssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   transaction.QuoteAssetTable,
			Columns: []string{transaction.QuoteAssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: asset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.PortfolioCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.PortfolioTable,
			Columns: []string{transaction.PortfolioColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: portfolio.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.PortfolioIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.PortfolioTable,
			Columns: []string{transaction.PortfolioColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: portfolio.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ExchangeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.ExchangeTable,
			Columns: []string{transaction.ExchangeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: exchange.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ExchangeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.ExchangeTable,
			Columns: []string{transaction.ExchangeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: exchange.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TransactionUpdateOne is the builder for updating a single Transaction entity.
type TransactionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TransactionMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TransactionUpdateOne) SetUpdatedAt(t time.Time) *TransactionUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tuo *TransactionUpdateOne) SetDeletedAt(t time.Time) *TransactionUpdateOne {
	tuo.mutation.SetDeletedAt(t)
	return tuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tuo *TransactionUpdateOne) ClearDeletedAt() *TransactionUpdateOne {
	tuo.mutation.ClearDeletedAt()
	return tuo
}

// SetTime sets the "time" field.
func (tuo *TransactionUpdateOne) SetTime(t time.Time) *TransactionUpdateOne {
	tuo.mutation.SetTime(t)
	return tuo
}

// SetUnits sets the "units" field.
func (tuo *TransactionUpdateOne) SetUnits(i int) *TransactionUpdateOne {
	tuo.mutation.ResetUnits()
	tuo.mutation.SetUnits(i)
	return tuo
}

// AddUnits adds i to the "units" field.
func (tuo *TransactionUpdateOne) AddUnits(i int) *TransactionUpdateOne {
	tuo.mutation.AddUnits(i)
	return tuo
}

// SetPricePerUnit sets the "price_per_unit" field.
func (tuo *TransactionUpdateOne) SetPricePerUnit(f float64) *TransactionUpdateOne {
	tuo.mutation.ResetPricePerUnit()
	tuo.mutation.SetPricePerUnit(f)
	return tuo
}

// AddPricePerUnit adds f to the "price_per_unit" field.
func (tuo *TransactionUpdateOne) AddPricePerUnit(f float64) *TransactionUpdateOne {
	tuo.mutation.AddPricePerUnit(f)
	return tuo
}

// SetTransactionTypeID sets the "transaction_type_id" field.
func (tuo *TransactionUpdateOne) SetTransactionTypeID(pu pulid.PULID) *TransactionUpdateOne {
	tuo.mutation.SetTransactionTypeID(pu)
	return tuo
}

// SetBaseAssetID sets the "base_asset_id" field.
func (tuo *TransactionUpdateOne) SetBaseAssetID(pu pulid.PULID) *TransactionUpdateOne {
	tuo.mutation.SetBaseAssetID(pu)
	return tuo
}

// SetQuoteAssetID sets the "quote_asset_id" field.
func (tuo *TransactionUpdateOne) SetQuoteAssetID(pu pulid.PULID) *TransactionUpdateOne {
	tuo.mutation.SetQuoteAssetID(pu)
	return tuo
}

// SetNillableQuoteAssetID sets the "quote_asset_id" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableQuoteAssetID(pu *pulid.PULID) *TransactionUpdateOne {
	if pu != nil {
		tuo.SetQuoteAssetID(*pu)
	}
	return tuo
}

// ClearQuoteAssetID clears the value of the "quote_asset_id" field.
func (tuo *TransactionUpdateOne) ClearQuoteAssetID() *TransactionUpdateOne {
	tuo.mutation.ClearQuoteAssetID()
	return tuo
}

// SetPortfolioID sets the "portfolio_id" field.
func (tuo *TransactionUpdateOne) SetPortfolioID(pu pulid.PULID) *TransactionUpdateOne {
	tuo.mutation.SetPortfolioID(pu)
	return tuo
}

// SetExchangeID sets the "exchange_id" field.
func (tuo *TransactionUpdateOne) SetExchangeID(pu pulid.PULID) *TransactionUpdateOne {
	tuo.mutation.SetExchangeID(pu)
	return tuo
}

// SetTransactionType sets the "transaction_type" edge to the TransactionType entity.
func (tuo *TransactionUpdateOne) SetTransactionType(t *TransactionType) *TransactionUpdateOne {
	return tuo.SetTransactionTypeID(t.ID)
}

// SetBaseAsset sets the "base_asset" edge to the Asset entity.
func (tuo *TransactionUpdateOne) SetBaseAsset(a *Asset) *TransactionUpdateOne {
	return tuo.SetBaseAssetID(a.ID)
}

// SetQuoteAsset sets the "quote_asset" edge to the Asset entity.
func (tuo *TransactionUpdateOne) SetQuoteAsset(a *Asset) *TransactionUpdateOne {
	return tuo.SetQuoteAssetID(a.ID)
}

// SetPortfolio sets the "portfolio" edge to the Portfolio entity.
func (tuo *TransactionUpdateOne) SetPortfolio(p *Portfolio) *TransactionUpdateOne {
	return tuo.SetPortfolioID(p.ID)
}

// SetExchange sets the "exchange" edge to the Exchange entity.
func (tuo *TransactionUpdateOne) SetExchange(e *Exchange) *TransactionUpdateOne {
	return tuo.SetExchangeID(e.ID)
}

// Mutation returns the TransactionMutation object of the builder.
func (tuo *TransactionUpdateOne) Mutation() *TransactionMutation {
	return tuo.mutation
}

// ClearTransactionType clears the "transaction_type" edge to the TransactionType entity.
func (tuo *TransactionUpdateOne) ClearTransactionType() *TransactionUpdateOne {
	tuo.mutation.ClearTransactionType()
	return tuo
}

// ClearBaseAsset clears the "base_asset" edge to the Asset entity.
func (tuo *TransactionUpdateOne) ClearBaseAsset() *TransactionUpdateOne {
	tuo.mutation.ClearBaseAsset()
	return tuo
}

// ClearQuoteAsset clears the "quote_asset" edge to the Asset entity.
func (tuo *TransactionUpdateOne) ClearQuoteAsset() *TransactionUpdateOne {
	tuo.mutation.ClearQuoteAsset()
	return tuo
}

// ClearPortfolio clears the "portfolio" edge to the Portfolio entity.
func (tuo *TransactionUpdateOne) ClearPortfolio() *TransactionUpdateOne {
	tuo.mutation.ClearPortfolio()
	return tuo
}

// ClearExchange clears the "exchange" edge to the Exchange entity.
func (tuo *TransactionUpdateOne) ClearExchange() *TransactionUpdateOne {
	tuo.mutation.ClearExchange()
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TransactionUpdateOne) Select(field string, fields ...string) *TransactionUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Transaction entity.
func (tuo *TransactionUpdateOne) Save(ctx context.Context) (*Transaction, error) {
	var (
		err  error
		node *Transaction
	)
	tuo.defaults()
	if len(tuo.hooks) == 0 {
		if err = tuo.check(); err != nil {
			return nil, err
		}
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tuo.check(); err != nil {
				return nil, err
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Transaction)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TransactionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TransactionUpdateOne) SaveX(ctx context.Context) *Transaction {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TransactionUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TransactionUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TransactionUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := transaction.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
	if _, ok := tuo.mutation.DeletedAt(); !ok && !tuo.mutation.DeletedAtCleared() {
		v := transaction.UpdateDefaultDeletedAt()
		tuo.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TransactionUpdateOne) check() error {
	if _, ok := tuo.mutation.TransactionTypeID(); tuo.mutation.TransactionTypeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Transaction.transaction_type"`)
	}
	if _, ok := tuo.mutation.BaseAssetID(); tuo.mutation.BaseAssetCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Transaction.base_asset"`)
	}
	if _, ok := tuo.mutation.PortfolioID(); tuo.mutation.PortfolioCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Transaction.portfolio"`)
	}
	if _, ok := tuo.mutation.ExchangeID(); tuo.mutation.ExchangeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Transaction.exchange"`)
	}
	return nil
}

func (tuo *TransactionUpdateOne) sqlSave(ctx context.Context) (_node *Transaction, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   transaction.Table,
			Columns: transaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: transaction.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Transaction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transaction.FieldID)
		for _, f := range fields {
			if !transaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: transaction.FieldUpdatedAt,
		})
	}
	if value, ok := tuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: transaction.FieldDeletedAt,
		})
	}
	if tuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: transaction.FieldDeletedAt,
		})
	}
	if value, ok := tuo.mutation.Time(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: transaction.FieldTime,
		})
	}
	if value, ok := tuo.mutation.Units(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: transaction.FieldUnits,
		})
	}
	if value, ok := tuo.mutation.AddedUnits(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: transaction.FieldUnits,
		})
	}
	if value, ok := tuo.mutation.PricePerUnit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transaction.FieldPricePerUnit,
		})
	}
	if value, ok := tuo.mutation.AddedPricePerUnit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: transaction.FieldPricePerUnit,
		})
	}
	if tuo.mutation.TransactionTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   transaction.TransactionTypeTable,
			Columns: []string{transaction.TransactionTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transactiontype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TransactionTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   transaction.TransactionTypeTable,
			Columns: []string{transaction.TransactionTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transactiontype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.BaseAssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   transaction.BaseAssetTable,
			Columns: []string{transaction.BaseAssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: asset.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.BaseAssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   transaction.BaseAssetTable,
			Columns: []string{transaction.BaseAssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: asset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.QuoteAssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   transaction.QuoteAssetTable,
			Columns: []string{transaction.QuoteAssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: asset.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.QuoteAssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   transaction.QuoteAssetTable,
			Columns: []string{transaction.QuoteAssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: asset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.PortfolioCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.PortfolioTable,
			Columns: []string{transaction.PortfolioColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: portfolio.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.PortfolioIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.PortfolioTable,
			Columns: []string{transaction.PortfolioColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: portfolio.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ExchangeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.ExchangeTable,
			Columns: []string{transaction.ExchangeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: exchange.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ExchangeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.ExchangeTable,
			Columns: []string{transaction.ExchangeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: exchange.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Transaction{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
