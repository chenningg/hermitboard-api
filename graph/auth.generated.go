// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"context"
	"errors"
	"fmt"
	"strconv"

	"github.com/99designs/gqlgen/graphql"
	"github.com/chenningg/hermitboard-api/auth"
	"github.com/chenningg/hermitboard-api/ent"
	"github.com/chenningg/hermitboard-api/ent/authrole"
	"github.com/chenningg/hermitboard-api/graph/model"
	"github.com/chenningg/hermitboard-api/pulid"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

type MutationResolver interface {
	CreateAccount(ctx context.Context, input ent.CreateAccountInput) (*auth.CreateAccountPayload, error)
	CreateStaffAccount(ctx context.Context, input ent.CreateStaffAccountInput) (*auth.CreateStaffAccountPayload, error)
	LoginToAccount(ctx context.Context, input auth.LoginToAccountInput) (*auth.LoginToAccountPayload, error)
	LoginToStaffAccount(ctx context.Context, input auth.LoginToStaffAccountInput) (*auth.LoginToStaffAccountPayload, error)
	Logout(ctx context.Context) (*model.Void, error)
	CreateConnection(ctx context.Context, input ent.CreateConnectionInput) (*ent.Connection, error)
	UpdateConnection(ctx context.Context, id pulid.PULID, input ent.UpdateConnectionInput) (*ent.Connection, error)
	CreatePortfolio(ctx context.Context, input ent.CreatePortfolioInput) (*ent.Portfolio, error)
	UpdatePortfolio(ctx context.Context, id pulid.PULID, input ent.UpdatePortfolioInput) (*ent.Portfolio, error)
}

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_createAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ent.CreateAccountInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateAccountInput2githubᚗcomᚋchenninggᚋhermitboardᚑapiᚋentᚐCreateAccountInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createConnection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ent.CreateConnectionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateConnectionInput2githubᚗcomᚋchenninggᚋhermitboardᚑapiᚋentᚐCreateConnectionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPortfolio_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ent.CreatePortfolioInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreatePortfolioInput2githubᚗcomᚋchenninggᚋhermitboardᚑapiᚋentᚐCreatePortfolioInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createStaffAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ent.CreateStaffAccountInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateStaffAccountInput2githubᚗcomᚋchenninggᚋhermitboardᚑapiᚋentᚐCreateStaffAccountInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_loginToAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 auth.LoginToAccountInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNLoginToAccountInput2githubᚗcomᚋchenninggᚋhermitboardᚑapiᚋauthᚐLoginToAccountInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_loginToStaffAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 auth.LoginToStaffAccountInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNLoginToStaffAccountInput2githubᚗcomᚋchenninggᚋhermitboardᚑapiᚋauthᚐLoginToStaffAccountInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateConnection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.PULID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋchenninggᚋhermitboardᚑapiᚋpulidᚐPULID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ent.UpdateConnectionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateConnectionInput2githubᚗcomᚋchenninggᚋhermitboardᚑapiᚋentᚐUpdateConnectionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePortfolio_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.PULID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2githubᚗcomᚋchenninggᚋhermitboardᚑapiᚋpulidᚐPULID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ent.UpdatePortfolioInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdatePortfolioInput2githubᚗcomᚋchenninggᚋhermitboardᚑapiᚋentᚐUpdatePortfolioInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _CreateAccountPayload_account(ctx context.Context, field graphql.CollectedField, obj *auth.CreateAccountPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateAccountPayload_account(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Account, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Account)
	fc.Result = res
	return ec.marshalNAccount2ᚖgithubᚗcomᚋchenninggᚋhermitboardᚑapiᚋentᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateAccountPayload_account(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateAccountPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Account_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Account_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Account_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Account_deletedAt(ctx, field)
			case "nickname":
				return ec.fieldContext_Account_nickname(ctx, field)
			case "email":
				return ec.fieldContext_Account_email(ctx, field)
			case "emailConfirmed":
				return ec.fieldContext_Account_emailConfirmed(ctx, field)
			case "passwordUpdatedAt":
				return ec.fieldContext_Account_passwordUpdatedAt(ctx, field)
			case "friends":
				return ec.fieldContext_Account_friends(ctx, field)
			case "authRoles":
				return ec.fieldContext_Account_authRoles(ctx, field)
			case "portfolios":
				return ec.fieldContext_Account_portfolios(ctx, field)
			case "authType":
				return ec.fieldContext_Account_authType(ctx, field)
			case "connections":
				return ec.fieldContext_Account_connections(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Account", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateAccountPayload_session(ctx context.Context, field graphql.CollectedField, obj *auth.CreateAccountPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateAccountPayload_session(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Session, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*auth.Session)
	fc.Result = res
	return ec.marshalNSession2ᚖgithubᚗcomᚋchenninggᚋhermitboardᚑapiᚋauthᚐSession(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateAccountPayload_session(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateAccountPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "token":
				return ec.fieldContext_Session_token(ctx, field)
			case "userID":
				return ec.fieldContext_Session_userID(ctx, field)
			case "authRoles":
				return ec.fieldContext_Session_authRoles(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Session", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateStaffAccountPayload_staffAccount(ctx context.Context, field graphql.CollectedField, obj *auth.CreateStaffAccountPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateStaffAccountPayload_staffAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StaffAccount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.StaffAccount)
	fc.Result = res
	return ec.marshalNStaffAccount2ᚖgithubᚗcomᚋchenninggᚋhermitboardᚑapiᚋentᚐStaffAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateStaffAccountPayload_staffAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateStaffAccountPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_StaffAccount_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_StaffAccount_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_StaffAccount_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_StaffAccount_deletedAt(ctx, field)
			case "nickname":
				return ec.fieldContext_StaffAccount_nickname(ctx, field)
			case "email":
				return ec.fieldContext_StaffAccount_email(ctx, field)
			case "emailConfirmed":
				return ec.fieldContext_StaffAccount_emailConfirmed(ctx, field)
			case "passwordUpdatedAt":
				return ec.fieldContext_StaffAccount_passwordUpdatedAt(ctx, field)
			case "authRoles":
				return ec.fieldContext_StaffAccount_authRoles(ctx, field)
			case "authType":
				return ec.fieldContext_StaffAccount_authType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StaffAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateStaffAccountPayload_session(ctx context.Context, field graphql.CollectedField, obj *auth.CreateStaffAccountPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateStaffAccountPayload_session(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Session, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*auth.Session)
	fc.Result = res
	return ec.marshalNSession2ᚖgithubᚗcomᚋchenninggᚋhermitboardᚑapiᚋauthᚐSession(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateStaffAccountPayload_session(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateStaffAccountPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "token":
				return ec.fieldContext_Session_token(ctx, field)
			case "userID":
				return ec.fieldContext_Session_userID(ctx, field)
			case "authRoles":
				return ec.fieldContext_Session_authRoles(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Session", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _LoginToAccountPayload_account(ctx context.Context, field graphql.CollectedField, obj *auth.LoginToAccountPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LoginToAccountPayload_account(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Account, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Account)
	fc.Result = res
	return ec.marshalNAccount2ᚖgithubᚗcomᚋchenninggᚋhermitboardᚑapiᚋentᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LoginToAccountPayload_account(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LoginToAccountPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Account_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Account_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Account_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Account_deletedAt(ctx, field)
			case "nickname":
				return ec.fieldContext_Account_nickname(ctx, field)
			case "email":
				return ec.fieldContext_Account_email(ctx, field)
			case "emailConfirmed":
				return ec.fieldContext_Account_emailConfirmed(ctx, field)
			case "passwordUpdatedAt":
				return ec.fieldContext_Account_passwordUpdatedAt(ctx, field)
			case "friends":
				return ec.fieldContext_Account_friends(ctx, field)
			case "authRoles":
				return ec.fieldContext_Account_authRoles(ctx, field)
			case "portfolios":
				return ec.fieldContext_Account_portfolios(ctx, field)
			case "authType":
				return ec.fieldContext_Account_authType(ctx, field)
			case "connections":
				return ec.fieldContext_Account_connections(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Account", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _LoginToAccountPayload_session(ctx context.Context, field graphql.CollectedField, obj *auth.LoginToAccountPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LoginToAccountPayload_session(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Session, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*auth.Session)
	fc.Result = res
	return ec.marshalNSession2ᚖgithubᚗcomᚋchenninggᚋhermitboardᚑapiᚋauthᚐSession(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LoginToAccountPayload_session(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LoginToAccountPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "token":
				return ec.fieldContext_Session_token(ctx, field)
			case "userID":
				return ec.fieldContext_Session_userID(ctx, field)
			case "authRoles":
				return ec.fieldContext_Session_authRoles(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Session", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _LoginToStaffAccountPayload_staffAccount(ctx context.Context, field graphql.CollectedField, obj *auth.LoginToStaffAccountPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LoginToStaffAccountPayload_staffAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StaffAccount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.StaffAccount)
	fc.Result = res
	return ec.marshalNStaffAccount2ᚖgithubᚗcomᚋchenninggᚋhermitboardᚑapiᚋentᚐStaffAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LoginToStaffAccountPayload_staffAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LoginToStaffAccountPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_StaffAccount_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_StaffAccount_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_StaffAccount_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_StaffAccount_deletedAt(ctx, field)
			case "nickname":
				return ec.fieldContext_StaffAccount_nickname(ctx, field)
			case "email":
				return ec.fieldContext_StaffAccount_email(ctx, field)
			case "emailConfirmed":
				return ec.fieldContext_StaffAccount_emailConfirmed(ctx, field)
			case "passwordUpdatedAt":
				return ec.fieldContext_StaffAccount_passwordUpdatedAt(ctx, field)
			case "authRoles":
				return ec.fieldContext_StaffAccount_authRoles(ctx, field)
			case "authType":
				return ec.fieldContext_StaffAccount_authType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StaffAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _LoginToStaffAccountPayload_session(ctx context.Context, field graphql.CollectedField, obj *auth.LoginToStaffAccountPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LoginToStaffAccountPayload_session(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Session, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*auth.Session)
	fc.Result = res
	return ec.marshalNSession2ᚖgithubᚗcomᚋchenninggᚋhermitboardᚑapiᚋauthᚐSession(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LoginToStaffAccountPayload_session(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LoginToStaffAccountPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "token":
				return ec.fieldContext_Session_token(ctx, field)
			case "userID":
				return ec.fieldContext_Session_userID(ctx, field)
			case "authRoles":
				return ec.fieldContext_Session_authRoles(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Session", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateAccount(rctx, fc.Args["input"].(ent.CreateAccountInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*auth.CreateAccountPayload)
	fc.Result = res
	return ec.marshalNCreateAccountPayload2ᚖgithubᚗcomᚋchenninggᚋhermitboardᚑapiᚋauthᚐCreateAccountPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "account":
				return ec.fieldContext_CreateAccountPayload_account(ctx, field)
			case "session":
				return ec.fieldContext_CreateAccountPayload_session(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreateAccountPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createAccount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createStaffAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createStaffAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateStaffAccount(rctx, fc.Args["input"].(ent.CreateStaffAccountInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*auth.CreateStaffAccountPayload)
	fc.Result = res
	return ec.marshalNCreateStaffAccountPayload2ᚖgithubᚗcomᚋchenninggᚋhermitboardᚑapiᚋauthᚐCreateStaffAccountPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createStaffAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "staffAccount":
				return ec.fieldContext_CreateStaffAccountPayload_staffAccount(ctx, field)
			case "session":
				return ec.fieldContext_CreateStaffAccountPayload_session(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreateStaffAccountPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createStaffAccount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_loginToAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_loginToAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().LoginToAccount(rctx, fc.Args["input"].(auth.LoginToAccountInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*auth.LoginToAccountPayload)
	fc.Result = res
	return ec.marshalNLoginToAccountPayload2ᚖgithubᚗcomᚋchenninggᚋhermitboardᚑapiᚋauthᚐLoginToAccountPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_loginToAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "account":
				return ec.fieldContext_LoginToAccountPayload_account(ctx, field)
			case "session":
				return ec.fieldContext_LoginToAccountPayload_session(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LoginToAccountPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_loginToAccount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_loginToStaffAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_loginToStaffAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().LoginToStaffAccount(rctx, fc.Args["input"].(auth.LoginToStaffAccountInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*auth.LoginToStaffAccountPayload)
	fc.Result = res
	return ec.marshalNLoginToStaffAccountPayload2ᚖgithubᚗcomᚋchenninggᚋhermitboardᚑapiᚋauthᚐLoginToStaffAccountPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_loginToStaffAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "staffAccount":
				return ec.fieldContext_LoginToStaffAccountPayload_staffAccount(ctx, field)
			case "session":
				return ec.fieldContext_LoginToStaffAccountPayload_session(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LoginToStaffAccountPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_loginToStaffAccount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_logout(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_logout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Logout(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Void)
	fc.Result = res
	return ec.marshalOVoid2ᚖgithubᚗcomᚋchenninggᚋhermitboardᚑapiᚋgraphᚋmodelᚐVoid(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_logout(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Void does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createConnection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createConnection(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateConnection(rctx, fc.Args["input"].(ent.CreateConnectionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Connection)
	fc.Result = res
	return ec.marshalNConnection2ᚖgithubᚗcomᚋchenninggᚋhermitboardᚑapiᚋentᚐConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createConnection(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Connection_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Connection_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Connection_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Connection_deletedAt(ctx, field)
			case "name":
				return ec.fieldContext_Connection_name(ctx, field)
			case "accessToken":
				return ec.fieldContext_Connection_accessToken(ctx, field)
			case "refreshToken":
				return ec.fieldContext_Connection_refreshToken(ctx, field)
			case "accountID":
				return ec.fieldContext_Connection_accountID(ctx, field)
			case "account":
				return ec.fieldContext_Connection_account(ctx, field)
			case "portfolios":
				return ec.fieldContext_Connection_portfolios(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Connection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createConnection_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateConnection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateConnection(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateConnection(rctx, fc.Args["id"].(pulid.PULID), fc.Args["input"].(ent.UpdateConnectionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Connection)
	fc.Result = res
	return ec.marshalNConnection2ᚖgithubᚗcomᚋchenninggᚋhermitboardᚑapiᚋentᚐConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateConnection(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Connection_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Connection_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Connection_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Connection_deletedAt(ctx, field)
			case "name":
				return ec.fieldContext_Connection_name(ctx, field)
			case "accessToken":
				return ec.fieldContext_Connection_accessToken(ctx, field)
			case "refreshToken":
				return ec.fieldContext_Connection_refreshToken(ctx, field)
			case "accountID":
				return ec.fieldContext_Connection_accountID(ctx, field)
			case "account":
				return ec.fieldContext_Connection_account(ctx, field)
			case "portfolios":
				return ec.fieldContext_Connection_portfolios(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Connection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateConnection_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createPortfolio(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createPortfolio(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePortfolio(rctx, fc.Args["input"].(ent.CreatePortfolioInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Portfolio)
	fc.Result = res
	return ec.marshalNPortfolio2ᚖgithubᚗcomᚋchenninggᚋhermitboardᚑapiᚋentᚐPortfolio(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createPortfolio(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Portfolio_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Portfolio_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Portfolio_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Portfolio_deletedAt(ctx, field)
			case "name":
				return ec.fieldContext_Portfolio_name(ctx, field)
			case "isPublic":
				return ec.fieldContext_Portfolio_isPublic(ctx, field)
			case "isVisible":
				return ec.fieldContext_Portfolio_isVisible(ctx, field)
			case "accountID":
				return ec.fieldContext_Portfolio_accountID(ctx, field)
			case "account":
				return ec.fieldContext_Portfolio_account(ctx, field)
			case "transactions":
				return ec.fieldContext_Portfolio_transactions(ctx, field)
			case "connections":
				return ec.fieldContext_Portfolio_connections(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Portfolio", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createPortfolio_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePortfolio(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePortfolio(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePortfolio(rctx, fc.Args["id"].(pulid.PULID), fc.Args["input"].(ent.UpdatePortfolioInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Portfolio)
	fc.Result = res
	return ec.marshalNPortfolio2ᚖgithubᚗcomᚋchenninggᚋhermitboardᚑapiᚋentᚐPortfolio(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePortfolio(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Portfolio_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Portfolio_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Portfolio_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Portfolio_deletedAt(ctx, field)
			case "name":
				return ec.fieldContext_Portfolio_name(ctx, field)
			case "isPublic":
				return ec.fieldContext_Portfolio_isPublic(ctx, field)
			case "isVisible":
				return ec.fieldContext_Portfolio_isVisible(ctx, field)
			case "accountID":
				return ec.fieldContext_Portfolio_accountID(ctx, field)
			case "account":
				return ec.fieldContext_Portfolio_account(ctx, field)
			case "transactions":
				return ec.fieldContext_Portfolio_transactions(ctx, field)
			case "connections":
				return ec.fieldContext_Portfolio_connections(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Portfolio", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePortfolio_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Session_token(ctx context.Context, field graphql.CollectedField, obj *auth.Session) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Session_token(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(auth.SessionToken)
	fc.Result = res
	return ec.marshalNSessionToken2githubᚗcomᚋchenninggᚋhermitboardᚑapiᚋauthᚐSessionToken(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Session_token(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Session",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SessionToken does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Session_userID(ctx context.Context, field graphql.CollectedField, obj *auth.Session) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Session_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(pulid.PULID)
	fc.Result = res
	return ec.marshalNID2githubᚗcomᚋchenninggᚋhermitboardᚑapiᚋpulidᚐPULID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Session_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Session",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Session_authRoles(ctx context.Context, field graphql.CollectedField, obj *auth.Session) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Session_authRoles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthRoles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]authrole.Value)
	fc.Result = res
	return ec.marshalNAuthRoleValue2ᚕgithubᚗcomᚋchenninggᚋhermitboardᚑapiᚋentᚋauthroleᚐValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Session_authRoles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Session",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AuthRoleValue does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputLoginToAccountInput(ctx context.Context, obj interface{}) (auth.LoginToAccountInput, error) {
	var it auth.LoginToAccountInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"username", "password"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "username":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			it.Username, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLoginToStaffAccountInput(ctx context.Context, obj interface{}) (auth.LoginToStaffAccountInput, error) {
	var it auth.LoginToStaffAccountInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"username", "password"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "username":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			it.Username, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var createAccountPayloadImplementors = []string{"CreateAccountPayload"}

func (ec *executionContext) _CreateAccountPayload(ctx context.Context, sel ast.SelectionSet, obj *auth.CreateAccountPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createAccountPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateAccountPayload")
		case "account":

			out.Values[i] = ec._CreateAccountPayload_account(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "session":

			out.Values[i] = ec._CreateAccountPayload_session(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createStaffAccountPayloadImplementors = []string{"CreateStaffAccountPayload"}

func (ec *executionContext) _CreateStaffAccountPayload(ctx context.Context, sel ast.SelectionSet, obj *auth.CreateStaffAccountPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createStaffAccountPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateStaffAccountPayload")
		case "staffAccount":

			out.Values[i] = ec._CreateStaffAccountPayload_staffAccount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "session":

			out.Values[i] = ec._CreateStaffAccountPayload_session(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var loginToAccountPayloadImplementors = []string{"LoginToAccountPayload"}

func (ec *executionContext) _LoginToAccountPayload(ctx context.Context, sel ast.SelectionSet, obj *auth.LoginToAccountPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, loginToAccountPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LoginToAccountPayload")
		case "account":

			out.Values[i] = ec._LoginToAccountPayload_account(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "session":

			out.Values[i] = ec._LoginToAccountPayload_session(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var loginToStaffAccountPayloadImplementors = []string{"LoginToStaffAccountPayload"}

func (ec *executionContext) _LoginToStaffAccountPayload(ctx context.Context, sel ast.SelectionSet, obj *auth.LoginToStaffAccountPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, loginToStaffAccountPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LoginToStaffAccountPayload")
		case "staffAccount":

			out.Values[i] = ec._LoginToStaffAccountPayload_staffAccount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "session":

			out.Values[i] = ec._LoginToStaffAccountPayload_session(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createAccount":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createAccount(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createStaffAccount":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createStaffAccount(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "loginToAccount":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_loginToAccount(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "loginToStaffAccount":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_loginToStaffAccount(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "logout":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_logout(ctx, field)
			})

		case "createConnection":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createConnection(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateConnection":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateConnection(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPortfolio":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createPortfolio(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePortfolio":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePortfolio(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sessionImplementors = []string{"Session"}

func (ec *executionContext) _Session(ctx context.Context, sel ast.SelectionSet, obj *auth.Session) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sessionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Session")
		case "token":

			out.Values[i] = ec._Session_token(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userID":

			out.Values[i] = ec._Session_userID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "authRoles":

			out.Values[i] = ec._Session_authRoles(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNCreateAccountPayload2githubᚗcomᚋchenninggᚋhermitboardᚑapiᚋauthᚐCreateAccountPayload(ctx context.Context, sel ast.SelectionSet, v auth.CreateAccountPayload) graphql.Marshaler {
	return ec._CreateAccountPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateAccountPayload2ᚖgithubᚗcomᚋchenninggᚋhermitboardᚑapiᚋauthᚐCreateAccountPayload(ctx context.Context, sel ast.SelectionSet, v *auth.CreateAccountPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateAccountPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNCreateStaffAccountPayload2githubᚗcomᚋchenninggᚋhermitboardᚑapiᚋauthᚐCreateStaffAccountPayload(ctx context.Context, sel ast.SelectionSet, v auth.CreateStaffAccountPayload) graphql.Marshaler {
	return ec._CreateStaffAccountPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateStaffAccountPayload2ᚖgithubᚗcomᚋchenninggᚋhermitboardᚑapiᚋauthᚐCreateStaffAccountPayload(ctx context.Context, sel ast.SelectionSet, v *auth.CreateStaffAccountPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateStaffAccountPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLoginToAccountInput2githubᚗcomᚋchenninggᚋhermitboardᚑapiᚋauthᚐLoginToAccountInput(ctx context.Context, v interface{}) (auth.LoginToAccountInput, error) {
	res, err := ec.unmarshalInputLoginToAccountInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLoginToAccountPayload2githubᚗcomᚋchenninggᚋhermitboardᚑapiᚋauthᚐLoginToAccountPayload(ctx context.Context, sel ast.SelectionSet, v auth.LoginToAccountPayload) graphql.Marshaler {
	return ec._LoginToAccountPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLoginToAccountPayload2ᚖgithubᚗcomᚋchenninggᚋhermitboardᚑapiᚋauthᚐLoginToAccountPayload(ctx context.Context, sel ast.SelectionSet, v *auth.LoginToAccountPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._LoginToAccountPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLoginToStaffAccountInput2githubᚗcomᚋchenninggᚋhermitboardᚑapiᚋauthᚐLoginToStaffAccountInput(ctx context.Context, v interface{}) (auth.LoginToStaffAccountInput, error) {
	res, err := ec.unmarshalInputLoginToStaffAccountInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLoginToStaffAccountPayload2githubᚗcomᚋchenninggᚋhermitboardᚑapiᚋauthᚐLoginToStaffAccountPayload(ctx context.Context, sel ast.SelectionSet, v auth.LoginToStaffAccountPayload) graphql.Marshaler {
	return ec._LoginToStaffAccountPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLoginToStaffAccountPayload2ᚖgithubᚗcomᚋchenninggᚋhermitboardᚑapiᚋauthᚐLoginToStaffAccountPayload(ctx context.Context, sel ast.SelectionSet, v *auth.LoginToStaffAccountPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._LoginToStaffAccountPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNSession2ᚖgithubᚗcomᚋchenninggᚋhermitboardᚑapiᚋauthᚐSession(ctx context.Context, sel ast.SelectionSet, v *auth.Session) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Session(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSessionToken2githubᚗcomᚋchenninggᚋhermitboardᚑapiᚋauthᚐSessionToken(ctx context.Context, v interface{}) (auth.SessionToken, error) {
	var res auth.SessionToken
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSessionToken2githubᚗcomᚋchenninggᚋhermitboardᚑapiᚋauthᚐSessionToken(ctx context.Context, sel ast.SelectionSet, v auth.SessionToken) graphql.Marshaler {
	return v
}

// endregion ***************************** type.gotpl *****************************
