directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Account implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  nickname: String!
  email: String!
  """Hashed and salted password using Bcrypt."""
  password: String
  passwordUpdatedAt: Time!
  authTypeID: ID!
  authRoles(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for AuthRoles returned from the connection."""
    orderBy: AuthRoleOrder

    """Filtering options for AuthRoles returned from the connection."""
    where: AuthRoleWhereInput
  ): AuthRoleConnection!
  portfolios(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Portfolios returned from the connection."""
    orderBy: PortfolioOrder

    """Filtering options for Portfolios returned from the connection."""
    where: PortfolioWhereInput
  ): PortfolioConnection!
  authType: AuthType!
  connections(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Connections returned from the connection."""
    orderBy: ConnectionOrder

    """Filtering options for Connections returned from the connection."""
    where: ConnectionWhereInput
  ): ConnectionConnection!
}
"""A connection to a list of items."""
type AccountConnection {
  """A list of edges."""
  edges: [AccountEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type AccountEdge {
  """The item at the end of the edge."""
  node: Account
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Account connections"""
input AccountOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Accounts."""
  field: AccountOrderField!
}
"""Properties by which Account connections can be ordered."""
enum AccountOrderField {
  CREATED_AT
  UPDATED_AT
  DELETED_AT
  NICKNAME
  EMAIL
}
"""
AccountWhereInput is used for filtering Account objects.
Input was generated by ent.
"""
input AccountWhereInput {
  not: AccountWhereInput
  and: [AccountWhereInput!]
  or: [AccountWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """nickname field predicates"""
  nickname: String
  nicknameNEQ: String
  nicknameIn: [String!]
  nicknameNotIn: [String!]
  nicknameGT: String
  nicknameGTE: String
  nicknameLT: String
  nicknameLTE: String
  nicknameContains: String
  nicknameHasPrefix: String
  nicknameHasSuffix: String
  nicknameEqualFold: String
  nicknameContainsFold: String
  """email field predicates"""
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """password field predicates"""
  password: String
  passwordNEQ: String
  passwordIn: [String!]
  passwordNotIn: [String!]
  passwordGT: String
  passwordGTE: String
  passwordLT: String
  passwordLTE: String
  passwordContains: String
  passwordHasPrefix: String
  passwordHasSuffix: String
  passwordIsNil: Boolean
  passwordNotNil: Boolean
  passwordEqualFold: String
  passwordContainsFold: String
  """password_updated_at field predicates"""
  passwordUpdatedAt: Time
  passwordUpdatedAtNEQ: Time
  passwordUpdatedAtIn: [Time!]
  passwordUpdatedAtNotIn: [Time!]
  passwordUpdatedAtGT: Time
  passwordUpdatedAtGTE: Time
  passwordUpdatedAtLT: Time
  passwordUpdatedAtLTE: Time
  """auth_type_id field predicates"""
  authTypeID: ID
  authTypeIDNEQ: ID
  authTypeIDIn: [ID!]
  authTypeIDNotIn: [ID!]
  authTypeIDGT: ID
  authTypeIDGTE: ID
  authTypeIDLT: ID
  authTypeIDLTE: ID
  authTypeIDContains: ID
  authTypeIDHasPrefix: ID
  authTypeIDHasSuffix: ID
  authTypeIDEqualFold: ID
  authTypeIDContainsFold: ID
  """auth_roles edge predicates"""
  hasAuthRoles: Boolean
  hasAuthRolesWith: [AuthRoleWhereInput!]
  """portfolios edge predicates"""
  hasPortfolios: Boolean
  hasPortfoliosWith: [PortfolioWhereInput!]
  """auth_type edge predicates"""
  hasAuthType: Boolean
  hasAuthTypeWith: [AuthTypeWhereInput!]
  """connections edge predicates"""
  hasConnections: Boolean
  hasConnectionsWith: [ConnectionWhereInput!]
}
type Asset implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  assetClassID: ID!
  assetClass: AssetClass!
  cryptocurrency: Cryptocurrency
  transactionBases(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Transactions returned from the connection."""
    orderBy: TransactionOrder

    """Filtering options for Transactions returned from the connection."""
    where: TransactionWhereInput
  ): TransactionConnection!
  transactionQuotes(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Transactions returned from the connection."""
    orderBy: TransactionOrder

    """Filtering options for Transactions returned from the connection."""
    where: TransactionWhereInput
  ): TransactionConnection!
  dailyAssetPrices(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for DailyAssetPrices returned from the connection."""
    orderBy: DailyAssetPriceOrder

    """Filtering options for DailyAssetPrices returned from the connection."""
    where: DailyAssetPriceWhereInput
  ): DailyAssetPriceConnection!
}
type AssetClass implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  value: AssetClassValue!
  description: String
  assets(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Assets returned from the connection."""
    orderBy: AssetOrder

    """Filtering options for Assets returned from the connection."""
    where: AssetWhereInput
  ): AssetConnection!
}
"""A connection to a list of items."""
type AssetClassConnection {
  """A list of edges."""
  edges: [AssetClassEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type AssetClassEdge {
  """The item at the end of the edge."""
  node: AssetClass
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for AssetClass connections"""
input AssetClassOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order AssetClasses."""
  field: AssetClassOrderField!
}
"""Properties by which AssetClass connections can be ordered."""
enum AssetClassOrderField {
  CREATED_AT
  UPDATED_AT
  DELETED_AT
  ASSET_CLASS
}
"""AssetClassValue is enum for the field value"""
enum AssetClassValue @goModel(model: "github.com/chenningg/hermitboard-api/ent/assetclass.Value") {
  CASH_OR_CASH_EQUIVALENT
  COMMODITY
  CRYPTOCURRENCY
  EQUITY
  FIXED_INCOME
  FUTURE
  REAL_ESTATE
}
"""
AssetClassWhereInput is used for filtering AssetClass objects.
Input was generated by ent.
"""
input AssetClassWhereInput {
  not: AssetClassWhereInput
  and: [AssetClassWhereInput!]
  or: [AssetClassWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """value field predicates"""
  value: AssetClassValue
  valueNEQ: AssetClassValue
  valueIn: [AssetClassValue!]
  valueNotIn: [AssetClassValue!]
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """assets edge predicates"""
  hasAssets: Boolean
  hasAssetsWith: [AssetWhereInput!]
}
"""A connection to a list of items."""
type AssetConnection {
  """A list of edges."""
  edges: [AssetEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type AssetEdge {
  """The item at the end of the edge."""
  node: Asset
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Asset connections"""
input AssetOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Assets."""
  field: AssetOrderField!
}
"""Properties by which Asset connections can be ordered."""
enum AssetOrderField {
  CREATED_AT
  UPDATED_AT
  DELETED_AT
}
"""
AssetWhereInput is used for filtering Asset objects.
Input was generated by ent.
"""
input AssetWhereInput {
  not: AssetWhereInput
  and: [AssetWhereInput!]
  or: [AssetWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """asset_class_id field predicates"""
  assetClassID: ID
  assetClassIDNEQ: ID
  assetClassIDIn: [ID!]
  assetClassIDNotIn: [ID!]
  assetClassIDGT: ID
  assetClassIDGTE: ID
  assetClassIDLT: ID
  assetClassIDLTE: ID
  assetClassIDContains: ID
  assetClassIDHasPrefix: ID
  assetClassIDHasSuffix: ID
  assetClassIDEqualFold: ID
  assetClassIDContainsFold: ID
  """asset_class edge predicates"""
  hasAssetClass: Boolean
  hasAssetClassWith: [AssetClassWhereInput!]
  """cryptocurrency edge predicates"""
  hasCryptocurrency: Boolean
  hasCryptocurrencyWith: [CryptocurrencyWhereInput!]
  """transaction_bases edge predicates"""
  hasTransactionBases: Boolean
  hasTransactionBasesWith: [TransactionWhereInput!]
  """transaction_quotes edge predicates"""
  hasTransactionQuotes: Boolean
  hasTransactionQuotesWith: [TransactionWhereInput!]
  """daily_asset_prices edge predicates"""
  hasDailyAssetPrices: Boolean
  hasDailyAssetPricesWith: [DailyAssetPriceWhereInput!]
}
type AuthRole implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  value: AuthRoleValue!
  description: String
  accounts(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Accounts returned from the connection."""
    orderBy: AccountOrder

    """Filtering options for Accounts returned from the connection."""
    where: AccountWhereInput
  ): AccountConnection!
  staffAccounts(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for StaffAccounts returned from the connection."""
    orderBy: StaffAccountOrder

    """Filtering options for StaffAccounts returned from the connection."""
    where: StaffAccountWhereInput
  ): StaffAccountConnection!
}
"""A connection to a list of items."""
type AuthRoleConnection {
  """A list of edges."""
  edges: [AuthRoleEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type AuthRoleEdge {
  """The item at the end of the edge."""
  node: AuthRole
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for AuthRole connections"""
input AuthRoleOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order AuthRoles."""
  field: AuthRoleOrderField!
}
"""Properties by which AuthRole connections can be ordered."""
enum AuthRoleOrderField {
  CREATED_AT
  UPDATED_AT
  DELETED_AT
  AUTH_ROLE
}
"""AuthRoleValue is enum for the field value"""
enum AuthRoleValue @goModel(model: "github.com/chenningg/hermitboard-api/ent/authrole.Value") {
  DEMO
  FREE
  PLUS
  PRO
  ENTERPRISE
  SUPPORT
  ADMIN
  SUPER_ADMIN
}
"""
AuthRoleWhereInput is used for filtering AuthRole objects.
Input was generated by ent.
"""
input AuthRoleWhereInput {
  not: AuthRoleWhereInput
  and: [AuthRoleWhereInput!]
  or: [AuthRoleWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """value field predicates"""
  value: AuthRoleValue
  valueNEQ: AuthRoleValue
  valueIn: [AuthRoleValue!]
  valueNotIn: [AuthRoleValue!]
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """accounts edge predicates"""
  hasAccounts: Boolean
  hasAccountsWith: [AccountWhereInput!]
  """staff_accounts edge predicates"""
  hasStaffAccounts: Boolean
  hasStaffAccountsWith: [StaffAccountWhereInput!]
}
type AuthType implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  value: AuthTypeValue!
  description: String
  accounts(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Accounts returned from the connection."""
    orderBy: AccountOrder

    """Filtering options for Accounts returned from the connection."""
    where: AccountWhereInput
  ): AccountConnection!
  staffAccounts(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for StaffAccounts returned from the connection."""
    orderBy: StaffAccountOrder

    """Filtering options for StaffAccounts returned from the connection."""
    where: StaffAccountWhereInput
  ): StaffAccountConnection!
}
"""A connection to a list of items."""
type AuthTypeConnection {
  """A list of edges."""
  edges: [AuthTypeEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type AuthTypeEdge {
  """The item at the end of the edge."""
  node: AuthType
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for AuthType connections"""
input AuthTypeOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order AuthTypes."""
  field: AuthTypeOrderField!
}
"""Properties by which AuthType connections can be ordered."""
enum AuthTypeOrderField {
  CREATED_AT
  UPDATED_AT
  DELETED_AT
  AUTH_TYPE
}
"""AuthTypeValue is enum for the field value"""
enum AuthTypeValue @goModel(model: "github.com/chenningg/hermitboard-api/ent/authtype.Value") {
  LOCAL
  GOOGLE
  APPLE
  FACEBOOK
}
"""
AuthTypeWhereInput is used for filtering AuthType objects.
Input was generated by ent.
"""
input AuthTypeWhereInput {
  not: AuthTypeWhereInput
  and: [AuthTypeWhereInput!]
  or: [AuthTypeWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """value field predicates"""
  value: AuthTypeValue
  valueNEQ: AuthTypeValue
  valueIn: [AuthTypeValue!]
  valueNotIn: [AuthTypeValue!]
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """accounts edge predicates"""
  hasAccounts: Boolean
  hasAccountsWith: [AccountWhereInput!]
  """staff_accounts edge predicates"""
  hasStaffAccounts: Boolean
  hasStaffAccountsWith: [StaffAccountWhereInput!]
}
type Blockchain implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  name: String!
  symbol: String!
  icon: String
  chainID: Int
  cryptocurrencies(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Cryptocurrencies returned from the connection."""
    orderBy: CryptocurrencyOrder

    """Filtering options for Cryptocurrencies returned from the connection."""
    where: CryptocurrencyWhereInput
  ): CryptocurrencyConnection!
  transactions(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Transactions returned from the connection."""
    orderBy: TransactionOrder

    """Filtering options for Transactions returned from the connection."""
    where: TransactionWhereInput
  ): TransactionConnection!
}
"""A connection to a list of items."""
type BlockchainConnection {
  """A list of edges."""
  edges: [BlockchainEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type BlockchainEdge {
  """The item at the end of the edge."""
  node: Blockchain
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Blockchain connections"""
input BlockchainOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Blockchains."""
  field: BlockchainOrderField!
}
"""Properties by which Blockchain connections can be ordered."""
enum BlockchainOrderField {
  CREATED_AT
  UPDATED_AT
  DELETED_AT
  NAME
  SYMBOL
  CHAIN_ID
}
"""
BlockchainWhereInput is used for filtering Blockchain objects.
Input was generated by ent.
"""
input BlockchainWhereInput {
  not: BlockchainWhereInput
  and: [BlockchainWhereInput!]
  or: [BlockchainWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """symbol field predicates"""
  symbol: String
  symbolNEQ: String
  symbolIn: [String!]
  symbolNotIn: [String!]
  symbolGT: String
  symbolGTE: String
  symbolLT: String
  symbolLTE: String
  symbolContains: String
  symbolHasPrefix: String
  symbolHasSuffix: String
  symbolEqualFold: String
  symbolContainsFold: String
  """icon field predicates"""
  icon: String
  iconNEQ: String
  iconIn: [String!]
  iconNotIn: [String!]
  iconGT: String
  iconGTE: String
  iconLT: String
  iconLTE: String
  iconContains: String
  iconHasPrefix: String
  iconHasSuffix: String
  iconIsNil: Boolean
  iconNotNil: Boolean
  iconEqualFold: String
  iconContainsFold: String
  """chain_id field predicates"""
  chainID: Int
  chainIDNEQ: Int
  chainIDIn: [Int!]
  chainIDNotIn: [Int!]
  chainIDGT: Int
  chainIDGTE: Int
  chainIDLT: Int
  chainIDLTE: Int
  chainIDIsNil: Boolean
  chainIDNotNil: Boolean
  """cryptocurrencies edge predicates"""
  hasCryptocurrencies: Boolean
  hasCryptocurrenciesWith: [CryptocurrencyWhereInput!]
  """transactions edge predicates"""
  hasTransactions: Boolean
  hasTransactionsWith: [TransactionWhereInput!]
}
type Connection implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  name: String!
  accessToken: String!
  accountID: ID!
  account: Account!
  portfolios(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Portfolios returned from the connection."""
    orderBy: PortfolioOrder

    """Filtering options for Portfolios returned from the connection."""
    where: PortfolioWhereInput
  ): PortfolioConnection!
}
"""A connection to a list of items."""
type ConnectionConnection {
  """A list of edges."""
  edges: [ConnectionEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ConnectionEdge {
  """The item at the end of the edge."""
  node: Connection
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Connection connections"""
input ConnectionOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Connections."""
  field: ConnectionOrderField!
}
"""Properties by which Connection connections can be ordered."""
enum ConnectionOrderField {
  CREATED_AT
  UPDATED_AT
  DELETED_AT
  NAME
}
"""
ConnectionWhereInput is used for filtering Connection objects.
Input was generated by ent.
"""
input ConnectionWhereInput {
  not: ConnectionWhereInput
  and: [ConnectionWhereInput!]
  or: [ConnectionWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """access_token field predicates"""
  accessToken: String
  accessTokenNEQ: String
  accessTokenIn: [String!]
  accessTokenNotIn: [String!]
  accessTokenGT: String
  accessTokenGTE: String
  accessTokenLT: String
  accessTokenLTE: String
  accessTokenContains: String
  accessTokenHasPrefix: String
  accessTokenHasSuffix: String
  accessTokenEqualFold: String
  accessTokenContainsFold: String
  """account_id field predicates"""
  accountID: ID
  accountIDNEQ: ID
  accountIDIn: [ID!]
  accountIDNotIn: [ID!]
  accountIDGT: ID
  accountIDGTE: ID
  accountIDLT: ID
  accountIDLTE: ID
  accountIDContains: ID
  accountIDHasPrefix: ID
  accountIDHasSuffix: ID
  accountIDEqualFold: ID
  accountIDContainsFold: ID
  """account edge predicates"""
  hasAccount: Boolean
  hasAccountWith: [AccountWhereInput!]
  """portfolios edge predicates"""
  hasPortfolios: Boolean
  hasPortfoliosWith: [PortfolioWhereInput!]
}
"""
CreateAccountInput is used for create Account object.
Input was generated by ent.
"""
input CreateAccountInput {
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  nickname: String!
  email: String!
  """Hashed and salted password using Bcrypt."""
  password: String
  passwordUpdatedAt: Time
  authRoleIDs: [ID!]!
  portfolioIDs: [ID!]
  authTypeID: ID!
  connectionIDs: [ID!]
}
"""
CreateAssetClassInput is used for create AssetClass object.
Input was generated by ent.
"""
input CreateAssetClassInput {
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  value: AssetClassValue!
  description: String
  assetIDs: [ID!]
}
"""
CreateAssetInput is used for create Asset object.
Input was generated by ent.
"""
input CreateAssetInput {
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  assetClassID: ID!
  cryptocurrencyID: ID
  transactionBasisIDs: [ID!]
  transactionQuoteIDs: [ID!]
  dailyAssetPriceIDs: [ID!]
}
"""
CreateAuthRoleInput is used for create AuthRole object.
Input was generated by ent.
"""
input CreateAuthRoleInput {
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  value: AuthRoleValue!
  description: String
  accountIDs: [ID!]
  staffAccountIDs: [ID!]
}
"""
CreateAuthTypeInput is used for create AuthType object.
Input was generated by ent.
"""
input CreateAuthTypeInput {
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  value: AuthTypeValue!
  description: String
  accountIDs: [ID!]
  staffAccountIDs: [ID!]
}
"""
CreateBlockchainInput is used for create Blockchain object.
Input was generated by ent.
"""
input CreateBlockchainInput {
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  name: String!
  symbol: String!
  icon: String
  chainID: Int
  cryptocurrencyIDs: [ID!]
  transactionIDs: [ID!]
}
"""
CreateConnectionInput is used for create Connection object.
Input was generated by ent.
"""
input CreateConnectionInput {
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  name: String!
  accessToken: String!
  accountID: ID!
  portfolioIDs: [ID!]
}
"""
CreateCryptocurrencyInput is used for create Cryptocurrency object.
Input was generated by ent.
"""
input CreateCryptocurrencyInput {
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  symbol: String!
  """A url to the image icon for this cryptocurrency."""
  icon: String
  name: String!
  assetID: ID!
  blockchainIDs: [ID!]!
}
"""
CreateDailyAssetPriceInput is used for create DailyAssetPrice object.
Input was generated by ent.
"""
input CreateDailyAssetPriceInput {
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  time: Time
  open: Float
  high: Float
  low: Float
  close: Float
  adjustedClose: Float!
  assetID: ID!
}
"""
CreateExchangeInput is used for create Exchange object.
Input was generated by ent.
"""
input CreateExchangeInput {
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  name: String!
  icon: String
  """A url to the exchange site."""
  url: String
  transactionIDs: [ID!]
}
"""
CreatePortfolioInput is used for create Portfolio object.
Input was generated by ent.
"""
input CreatePortfolioInput {
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  name: String!
  """Whether this portfolio is visible to others."""
  isPublic: Boolean
  """Whether this portfolio is visible to the owner."""
  isVisible: Boolean
  accountID: ID!
  transactionIDs: [ID!]
  connectionIDs: [ID!]
}
"""
CreateSourceInput is used for create Source object.
Input was generated by ent.
"""
input CreateSourceInput {
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  name: String!
  icon: String
  sourceTypeID: ID!
}
"""
CreateSourceTypeInput is used for create SourceType object.
Input was generated by ent.
"""
input CreateSourceTypeInput {
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  value: SourceTypeValue!
  description: String
  sourceIDs: [ID!]
}
"""
CreateStaffAccountInput is used for create StaffAccount object.
Input was generated by ent.
"""
input CreateStaffAccountInput {
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  nickname: String!
  email: String!
  """Hashed and salted password using Bcrypt."""
  password: String
  passwordUpdatedAt: Time
  authRoleIDs: [ID!]
  authTypeID: ID!
}
"""
CreateTransactionInput is used for create Transaction object.
Input was generated by ent.
"""
input CreateTransactionInput {
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  time: Time!
  units: Int!
  pricePerUnit: Float!
  transactionTypeID: ID!
  baseAssetID: ID!
  quoteAssetID: ID
  portfolioID: ID!
  exchangeID: ID!
  blockchainID: ID
}
"""
CreateTransactionTypeInput is used for create TransactionType object.
Input was generated by ent.
"""
input CreateTransactionTypeInput {
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  value: TransactionTypeValue!
  description: String
  transactionIDs: [ID!]
}
type Cryptocurrency implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  symbol: String!
  """A url to the image icon for this cryptocurrency."""
  icon: String
  name: String!
  assetID: ID!
  asset: Asset!
  blockchains(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Blockchains returned from the connection."""
    orderBy: BlockchainOrder

    """Filtering options for Blockchains returned from the connection."""
    where: BlockchainWhereInput
  ): BlockchainConnection!
}
"""A connection to a list of items."""
type CryptocurrencyConnection {
  """A list of edges."""
  edges: [CryptocurrencyEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type CryptocurrencyEdge {
  """The item at the end of the edge."""
  node: Cryptocurrency
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Cryptocurrency connections"""
input CryptocurrencyOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Cryptocurrencies."""
  field: CryptocurrencyOrderField!
}
"""Properties by which Cryptocurrency connections can be ordered."""
enum CryptocurrencyOrderField {
  CREATED_AT
  UPDATED_AT
  DELETED_AT
  SYMBOL
  NAME
}
"""
CryptocurrencyWhereInput is used for filtering Cryptocurrency objects.
Input was generated by ent.
"""
input CryptocurrencyWhereInput {
  not: CryptocurrencyWhereInput
  and: [CryptocurrencyWhereInput!]
  or: [CryptocurrencyWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """symbol field predicates"""
  symbol: String
  symbolNEQ: String
  symbolIn: [String!]
  symbolNotIn: [String!]
  symbolGT: String
  symbolGTE: String
  symbolLT: String
  symbolLTE: String
  symbolContains: String
  symbolHasPrefix: String
  symbolHasSuffix: String
  symbolEqualFold: String
  symbolContainsFold: String
  """icon field predicates"""
  icon: String
  iconNEQ: String
  iconIn: [String!]
  iconNotIn: [String!]
  iconGT: String
  iconGTE: String
  iconLT: String
  iconLTE: String
  iconContains: String
  iconHasPrefix: String
  iconHasSuffix: String
  iconIsNil: Boolean
  iconNotNil: Boolean
  iconEqualFold: String
  iconContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """asset_id field predicates"""
  assetID: ID
  assetIDNEQ: ID
  assetIDIn: [ID!]
  assetIDNotIn: [ID!]
  assetIDGT: ID
  assetIDGTE: ID
  assetIDLT: ID
  assetIDLTE: ID
  assetIDContains: ID
  assetIDHasPrefix: ID
  assetIDHasSuffix: ID
  assetIDEqualFold: ID
  assetIDContainsFold: ID
  """asset edge predicates"""
  hasAsset: Boolean
  hasAssetWith: [AssetWhereInput!]
  """blockchains edge predicates"""
  hasBlockchains: Boolean
  hasBlockchainsWith: [BlockchainWhereInput!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type DailyAssetPrice implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  time: Time!
  open: Float
  high: Float
  low: Float
  close: Float
  adjustedClose: Float!
  assetID: ID!
  asset: Asset!
}
"""A connection to a list of items."""
type DailyAssetPriceConnection {
  """A list of edges."""
  edges: [DailyAssetPriceEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type DailyAssetPriceEdge {
  """The item at the end of the edge."""
  node: DailyAssetPrice
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for DailyAssetPrice connections"""
input DailyAssetPriceOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order DailyAssetPrices."""
  field: DailyAssetPriceOrderField!
}
"""Properties by which DailyAssetPrice connections can be ordered."""
enum DailyAssetPriceOrderField {
  CREATED_AT
  UPDATED_AT
  DELETED_AT
  TIME
}
"""
DailyAssetPriceWhereInput is used for filtering DailyAssetPrice objects.
Input was generated by ent.
"""
input DailyAssetPriceWhereInput {
  not: DailyAssetPriceWhereInput
  and: [DailyAssetPriceWhereInput!]
  or: [DailyAssetPriceWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """time field predicates"""
  time: Time
  timeNEQ: Time
  timeIn: [Time!]
  timeNotIn: [Time!]
  timeGT: Time
  timeGTE: Time
  timeLT: Time
  timeLTE: Time
  """open field predicates"""
  open: Float
  openNEQ: Float
  openIn: [Float!]
  openNotIn: [Float!]
  openGT: Float
  openGTE: Float
  openLT: Float
  openLTE: Float
  openIsNil: Boolean
  openNotNil: Boolean
  """high field predicates"""
  high: Float
  highNEQ: Float
  highIn: [Float!]
  highNotIn: [Float!]
  highGT: Float
  highGTE: Float
  highLT: Float
  highLTE: Float
  highIsNil: Boolean
  highNotNil: Boolean
  """low field predicates"""
  low: Float
  lowNEQ: Float
  lowIn: [Float!]
  lowNotIn: [Float!]
  lowGT: Float
  lowGTE: Float
  lowLT: Float
  lowLTE: Float
  lowIsNil: Boolean
  lowNotNil: Boolean
  """close field predicates"""
  close: Float
  closeNEQ: Float
  closeIn: [Float!]
  closeNotIn: [Float!]
  closeGT: Float
  closeGTE: Float
  closeLT: Float
  closeLTE: Float
  closeIsNil: Boolean
  closeNotNil: Boolean
  """adjusted_close field predicates"""
  adjustedClose: Float
  adjustedCloseNEQ: Float
  adjustedCloseIn: [Float!]
  adjustedCloseNotIn: [Float!]
  adjustedCloseGT: Float
  adjustedCloseGTE: Float
  adjustedCloseLT: Float
  adjustedCloseLTE: Float
  """asset_id field predicates"""
  assetID: ID
  assetIDNEQ: ID
  assetIDIn: [ID!]
  assetIDNotIn: [ID!]
  assetIDGT: ID
  assetIDGTE: ID
  assetIDLT: ID
  assetIDLTE: ID
  assetIDContains: ID
  assetIDHasPrefix: ID
  assetIDHasSuffix: ID
  assetIDEqualFold: ID
  assetIDContainsFold: ID
  """asset edge predicates"""
  hasAsset: Boolean
  hasAssetWith: [AssetWhereInput!]
}
type Exchange implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  name: String!
  icon: String
  """A url to the exchange site."""
  url: String
  transactions(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Transactions returned from the connection."""
    orderBy: TransactionOrder

    """Filtering options for Transactions returned from the connection."""
    where: TransactionWhereInput
  ): TransactionConnection!
}
"""A connection to a list of items."""
type ExchangeConnection {
  """A list of edges."""
  edges: [ExchangeEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ExchangeEdge {
  """The item at the end of the edge."""
  node: Exchange
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Exchange connections"""
input ExchangeOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Exchanges."""
  field: ExchangeOrderField!
}
"""Properties by which Exchange connections can be ordered."""
enum ExchangeOrderField {
  CREATED_AT
  UPDATED_AT
  DELETED_AT
  NAME
}
"""
ExchangeWhereInput is used for filtering Exchange objects.
Input was generated by ent.
"""
input ExchangeWhereInput {
  not: ExchangeWhereInput
  and: [ExchangeWhereInput!]
  or: [ExchangeWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """icon field predicates"""
  icon: String
  iconNEQ: String
  iconIn: [String!]
  iconNotIn: [String!]
  iconGT: String
  iconGTE: String
  iconLT: String
  iconLTE: String
  iconContains: String
  iconHasPrefix: String
  iconHasSuffix: String
  iconIsNil: Boolean
  iconNotNil: Boolean
  iconEqualFold: String
  iconContainsFold: String
  """url field predicates"""
  url: String
  urlNEQ: String
  urlIn: [String!]
  urlNotIn: [String!]
  urlGT: String
  urlGTE: String
  urlLT: String
  urlLTE: String
  urlContains: String
  urlHasPrefix: String
  urlHasSuffix: String
  urlIsNil: Boolean
  urlNotNil: Boolean
  urlEqualFold: String
  urlContainsFold: String
  """transactions edge predicates"""
  hasTransactions: Boolean
  hasTransactionsWith: [TransactionWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/chenningg/hermitboard-api/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Portfolio implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  name: String!
  """Whether this portfolio is visible to others."""
  isPublic: Boolean!
  """Whether this portfolio is visible to the owner."""
  isVisible: Boolean!
  accountID: ID!
  account: Account!
  transactions(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Transactions returned from the connection."""
    orderBy: TransactionOrder

    """Filtering options for Transactions returned from the connection."""
    where: TransactionWhereInput
  ): TransactionConnection!
  connections(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Connections returned from the connection."""
    orderBy: ConnectionOrder

    """Filtering options for Connections returned from the connection."""
    where: ConnectionWhereInput
  ): ConnectionConnection!
}
"""A connection to a list of items."""
type PortfolioConnection {
  """A list of edges."""
  edges: [PortfolioEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type PortfolioEdge {
  """The item at the end of the edge."""
  node: Portfolio
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Portfolio connections"""
input PortfolioOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Portfolios."""
  field: PortfolioOrderField!
}
"""Properties by which Portfolio connections can be ordered."""
enum PortfolioOrderField {
  CREATED_AT
  UPDATED_AT
  DELETED_AT
  NAME
  IS_PUBLIC
  IS_VISIBLE
}
"""
PortfolioWhereInput is used for filtering Portfolio objects.
Input was generated by ent.
"""
input PortfolioWhereInput {
  not: PortfolioWhereInput
  and: [PortfolioWhereInput!]
  or: [PortfolioWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """is_public field predicates"""
  isPublic: Boolean
  isPublicNEQ: Boolean
  """is_visible field predicates"""
  isVisible: Boolean
  isVisibleNEQ: Boolean
  """account_id field predicates"""
  accountID: ID
  accountIDNEQ: ID
  accountIDIn: [ID!]
  accountIDNotIn: [ID!]
  accountIDGT: ID
  accountIDGTE: ID
  accountIDLT: ID
  accountIDLTE: ID
  accountIDContains: ID
  accountIDHasPrefix: ID
  accountIDHasSuffix: ID
  accountIDEqualFold: ID
  accountIDContainsFold: ID
  """account edge predicates"""
  hasAccount: Boolean
  hasAccountWith: [AccountWhereInput!]
  """transactions edge predicates"""
  hasTransactions: Boolean
  hasTransactionsWith: [TransactionWhereInput!]
  """connections edge predicates"""
  hasConnections: Boolean
  hasConnectionsWith: [ConnectionWhereInput!]
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  accounts(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Accounts returned from the connection."""
    orderBy: AccountOrder

    """Filtering options for Accounts returned from the connection."""
    where: AccountWhereInput
  ): AccountConnection!
  assets(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Assets returned from the connection."""
    orderBy: AssetOrder

    """Filtering options for Assets returned from the connection."""
    where: AssetWhereInput
  ): AssetConnection!
  assetclasses(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for AssetClasses returned from the connection."""
    orderBy: AssetClassOrder

    """Filtering options for AssetClasses returned from the connection."""
    where: AssetClassWhereInput
  ): AssetClassConnection!
  authroles(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for AuthRoles returned from the connection."""
    orderBy: AuthRoleOrder

    """Filtering options for AuthRoles returned from the connection."""
    where: AuthRoleWhereInput
  ): AuthRoleConnection!
  authtypes(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for AuthTypes returned from the connection."""
    orderBy: AuthTypeOrder

    """Filtering options for AuthTypes returned from the connection."""
    where: AuthTypeWhereInput
  ): AuthTypeConnection!
  blockchains(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Blockchains returned from the connection."""
    orderBy: BlockchainOrder

    """Filtering options for Blockchains returned from the connection."""
    where: BlockchainWhereInput
  ): BlockchainConnection!
  connections(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Connections returned from the connection."""
    orderBy: ConnectionOrder

    """Filtering options for Connections returned from the connection."""
    where: ConnectionWhereInput
  ): ConnectionConnection!
  cryptocurrencies(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Cryptocurrencies returned from the connection."""
    orderBy: CryptocurrencyOrder

    """Filtering options for Cryptocurrencies returned from the connection."""
    where: CryptocurrencyWhereInput
  ): CryptocurrencyConnection!
  dailyassetprices(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for DailyAssetPrices returned from the connection."""
    orderBy: DailyAssetPriceOrder

    """Filtering options for DailyAssetPrices returned from the connection."""
    where: DailyAssetPriceWhereInput
  ): DailyAssetPriceConnection!
  exchanges(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Exchanges returned from the connection."""
    orderBy: ExchangeOrder

    """Filtering options for Exchanges returned from the connection."""
    where: ExchangeWhereInput
  ): ExchangeConnection!
  portfolios(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Portfolios returned from the connection."""
    orderBy: PortfolioOrder

    """Filtering options for Portfolios returned from the connection."""
    where: PortfolioWhereInput
  ): PortfolioConnection!
  sources(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Sources returned from the connection."""
    orderBy: SourceOrder

    """Filtering options for Sources returned from the connection."""
    where: SourceWhereInput
  ): SourceConnection!
  sourcetypes(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for SourceTypes returned from the connection."""
    orderBy: SourceTypeOrder

    """Filtering options for SourceTypes returned from the connection."""
    where: SourceTypeWhereInput
  ): SourceTypeConnection!
  staffaccounts(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for StaffAccounts returned from the connection."""
    orderBy: StaffAccountOrder

    """Filtering options for StaffAccounts returned from the connection."""
    where: StaffAccountWhereInput
  ): StaffAccountConnection!
  transactions(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Transactions returned from the connection."""
    orderBy: TransactionOrder

    """Filtering options for Transactions returned from the connection."""
    where: TransactionWhereInput
  ): TransactionConnection!
  transactiontypes(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for TransactionTypes returned from the connection."""
    orderBy: TransactionTypeOrder

    """Filtering options for TransactionTypes returned from the connection."""
    where: TransactionTypeWhereInput
  ): TransactionTypeConnection!
}
type Source implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  name: String!
  icon: String
  sourceTypeID: ID!
  sourceType: SourceType!
}
"""A connection to a list of items."""
type SourceConnection {
  """A list of edges."""
  edges: [SourceEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type SourceEdge {
  """The item at the end of the edge."""
  node: Source
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Source connections"""
input SourceOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Sources."""
  field: SourceOrderField!
}
"""Properties by which Source connections can be ordered."""
enum SourceOrderField {
  CREATED_AT
  UPDATED_AT
  DELETED_AT
  NAME
}
type SourceType implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  value: SourceTypeValue!
  description: String
  sources(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Sources returned from the connection."""
    orderBy: SourceOrder

    """Filtering options for Sources returned from the connection."""
    where: SourceWhereInput
  ): SourceConnection!
}
"""A connection to a list of items."""
type SourceTypeConnection {
  """A list of edges."""
  edges: [SourceTypeEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type SourceTypeEdge {
  """The item at the end of the edge."""
  node: SourceType
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for SourceType connections"""
input SourceTypeOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order SourceTypes."""
  field: SourceTypeOrderField!
}
"""Properties by which SourceType connections can be ordered."""
enum SourceTypeOrderField {
  CREATED_AT
  UPDATED_AT
  DELETED_AT
  SOURCE_TYPE
}
"""SourceTypeValue is enum for the field value"""
enum SourceTypeValue @goModel(model: "github.com/chenningg/hermitboard-api/ent/sourcetype.Value") {
  EXCHANGE
  BANK
  DECENTRALIZED_EXCHANGE
}
"""
SourceTypeWhereInput is used for filtering SourceType objects.
Input was generated by ent.
"""
input SourceTypeWhereInput {
  not: SourceTypeWhereInput
  and: [SourceTypeWhereInput!]
  or: [SourceTypeWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """value field predicates"""
  value: SourceTypeValue
  valueNEQ: SourceTypeValue
  valueIn: [SourceTypeValue!]
  valueNotIn: [SourceTypeValue!]
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """sources edge predicates"""
  hasSources: Boolean
  hasSourcesWith: [SourceWhereInput!]
}
"""
SourceWhereInput is used for filtering Source objects.
Input was generated by ent.
"""
input SourceWhereInput {
  not: SourceWhereInput
  and: [SourceWhereInput!]
  or: [SourceWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """icon field predicates"""
  icon: String
  iconNEQ: String
  iconIn: [String!]
  iconNotIn: [String!]
  iconGT: String
  iconGTE: String
  iconLT: String
  iconLTE: String
  iconContains: String
  iconHasPrefix: String
  iconHasSuffix: String
  iconIsNil: Boolean
  iconNotNil: Boolean
  iconEqualFold: String
  iconContainsFold: String
  """source_type_id field predicates"""
  sourceTypeID: ID
  sourceTypeIDNEQ: ID
  sourceTypeIDIn: [ID!]
  sourceTypeIDNotIn: [ID!]
  sourceTypeIDGT: ID
  sourceTypeIDGTE: ID
  sourceTypeIDLT: ID
  sourceTypeIDLTE: ID
  sourceTypeIDContains: ID
  sourceTypeIDHasPrefix: ID
  sourceTypeIDHasSuffix: ID
  sourceTypeIDEqualFold: ID
  sourceTypeIDContainsFold: ID
  """source_type edge predicates"""
  hasSourceType: Boolean
  hasSourceTypeWith: [SourceTypeWhereInput!]
}
type StaffAccount implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  nickname: String!
  email: String!
  """Hashed and salted password using Bcrypt."""
  password: String
  passwordUpdatedAt: Time!
  authTypeID: ID!
  authRoles(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for AuthRoles returned from the connection."""
    orderBy: AuthRoleOrder

    """Filtering options for AuthRoles returned from the connection."""
    where: AuthRoleWhereInput
  ): AuthRoleConnection!
  authType: AuthType!
}
"""A connection to a list of items."""
type StaffAccountConnection {
  """A list of edges."""
  edges: [StaffAccountEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type StaffAccountEdge {
  """The item at the end of the edge."""
  node: StaffAccount
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for StaffAccount connections"""
input StaffAccountOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order StaffAccounts."""
  field: StaffAccountOrderField!
}
"""Properties by which StaffAccount connections can be ordered."""
enum StaffAccountOrderField {
  CREATED_AT
  UPDATED_AT
  DELETED_AT
}
"""
StaffAccountWhereInput is used for filtering StaffAccount objects.
Input was generated by ent.
"""
input StaffAccountWhereInput {
  not: StaffAccountWhereInput
  and: [StaffAccountWhereInput!]
  or: [StaffAccountWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """nickname field predicates"""
  nickname: String
  nicknameNEQ: String
  nicknameIn: [String!]
  nicknameNotIn: [String!]
  nicknameGT: String
  nicknameGTE: String
  nicknameLT: String
  nicknameLTE: String
  nicknameContains: String
  nicknameHasPrefix: String
  nicknameHasSuffix: String
  nicknameEqualFold: String
  nicknameContainsFold: String
  """email field predicates"""
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """password field predicates"""
  password: String
  passwordNEQ: String
  passwordIn: [String!]
  passwordNotIn: [String!]
  passwordGT: String
  passwordGTE: String
  passwordLT: String
  passwordLTE: String
  passwordContains: String
  passwordHasPrefix: String
  passwordHasSuffix: String
  passwordIsNil: Boolean
  passwordNotNil: Boolean
  passwordEqualFold: String
  passwordContainsFold: String
  """password_updated_at field predicates"""
  passwordUpdatedAt: Time
  passwordUpdatedAtNEQ: Time
  passwordUpdatedAtIn: [Time!]
  passwordUpdatedAtNotIn: [Time!]
  passwordUpdatedAtGT: Time
  passwordUpdatedAtGTE: Time
  passwordUpdatedAtLT: Time
  passwordUpdatedAtLTE: Time
  """auth_type_id field predicates"""
  authTypeID: ID
  authTypeIDNEQ: ID
  authTypeIDIn: [ID!]
  authTypeIDNotIn: [ID!]
  authTypeIDGT: ID
  authTypeIDGTE: ID
  authTypeIDLT: ID
  authTypeIDLTE: ID
  authTypeIDContains: ID
  authTypeIDHasPrefix: ID
  authTypeIDHasSuffix: ID
  authTypeIDEqualFold: ID
  authTypeIDContainsFold: ID
  """auth_roles edge predicates"""
  hasAuthRoles: Boolean
  hasAuthRolesWith: [AuthRoleWhereInput!]
  """auth_type edge predicates"""
  hasAuthType: Boolean
  hasAuthTypeWith: [AuthTypeWhereInput!]
}
type Transaction implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  time: Time!
  units: Int!
  pricePerUnit: Float!
  blockchainID: ID
  transactionTypeID: ID!
  exchangeID: ID!
  portfolioID: ID!
  baseAssetID: ID!
  quoteAssetID: ID
  transactionType: TransactionType!
  baseAsset: Asset!
  quoteAsset: Asset
  portfolio: Portfolio!
  exchange: Exchange!
  blockchain: Blockchain
}
"""A connection to a list of items."""
type TransactionConnection {
  """A list of edges."""
  edges: [TransactionEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type TransactionEdge {
  """The item at the end of the edge."""
  node: Transaction
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Transaction connections"""
input TransactionOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Transactions."""
  field: TransactionOrderField!
}
"""Properties by which Transaction connections can be ordered."""
enum TransactionOrderField {
  CREATED_AT
  UPDATED_AT
  DELETED_AT
}
type TransactionType implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  value: TransactionTypeValue!
  description: String
  transactions(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Transactions returned from the connection."""
    orderBy: TransactionOrder

    """Filtering options for Transactions returned from the connection."""
    where: TransactionWhereInput
  ): TransactionConnection!
}
"""A connection to a list of items."""
type TransactionTypeConnection {
  """A list of edges."""
  edges: [TransactionTypeEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type TransactionTypeEdge {
  """The item at the end of the edge."""
  node: TransactionType
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for TransactionType connections"""
input TransactionTypeOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order TransactionTypes."""
  field: TransactionTypeOrderField!
}
"""Properties by which TransactionType connections can be ordered."""
enum TransactionTypeOrderField {
  CREATED_AT
  UPDATED_AT
  DELETED_AT
  TRANSACTION_TYPE
}
"""TransactionTypeValue is enum for the field value"""
enum TransactionTypeValue @goModel(model: "github.com/chenningg/hermitboard-api/ent/transactiontype.Value") {
  BUY
  SELL
  SWAP
  STAKE
  DIVIDEND_INCOME
  RENT_PAYMENT
  RENT_INCOME
  STOCK_DIVIDEND
}
"""
TransactionTypeWhereInput is used for filtering TransactionType objects.
Input was generated by ent.
"""
input TransactionTypeWhereInput {
  not: TransactionTypeWhereInput
  and: [TransactionTypeWhereInput!]
  or: [TransactionTypeWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """value field predicates"""
  value: TransactionTypeValue
  valueNEQ: TransactionTypeValue
  valueIn: [TransactionTypeValue!]
  valueNotIn: [TransactionTypeValue!]
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """transactions edge predicates"""
  hasTransactions: Boolean
  hasTransactionsWith: [TransactionWhereInput!]
}
"""
TransactionWhereInput is used for filtering Transaction objects.
Input was generated by ent.
"""
input TransactionWhereInput {
  not: TransactionWhereInput
  and: [TransactionWhereInput!]
  or: [TransactionWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """time field predicates"""
  time: Time
  timeNEQ: Time
  timeIn: [Time!]
  timeNotIn: [Time!]
  timeGT: Time
  timeGTE: Time
  timeLT: Time
  timeLTE: Time
  """units field predicates"""
  units: Int
  unitsNEQ: Int
  unitsIn: [Int!]
  unitsNotIn: [Int!]
  unitsGT: Int
  unitsGTE: Int
  unitsLT: Int
  unitsLTE: Int
  """price_per_unit field predicates"""
  pricePerUnit: Float
  pricePerUnitNEQ: Float
  pricePerUnitIn: [Float!]
  pricePerUnitNotIn: [Float!]
  pricePerUnitGT: Float
  pricePerUnitGTE: Float
  pricePerUnitLT: Float
  pricePerUnitLTE: Float
  """blockchain_id field predicates"""
  blockchainID: ID
  blockchainIDNEQ: ID
  blockchainIDIn: [ID!]
  blockchainIDNotIn: [ID!]
  blockchainIDGT: ID
  blockchainIDGTE: ID
  blockchainIDLT: ID
  blockchainIDLTE: ID
  blockchainIDContains: ID
  blockchainIDHasPrefix: ID
  blockchainIDHasSuffix: ID
  blockchainIDIsNil: Boolean
  blockchainIDNotNil: Boolean
  blockchainIDEqualFold: ID
  blockchainIDContainsFold: ID
  """transaction_type_id field predicates"""
  transactionTypeID: ID
  transactionTypeIDNEQ: ID
  transactionTypeIDIn: [ID!]
  transactionTypeIDNotIn: [ID!]
  transactionTypeIDGT: ID
  transactionTypeIDGTE: ID
  transactionTypeIDLT: ID
  transactionTypeIDLTE: ID
  transactionTypeIDContains: ID
  transactionTypeIDHasPrefix: ID
  transactionTypeIDHasSuffix: ID
  transactionTypeIDEqualFold: ID
  transactionTypeIDContainsFold: ID
  """exchange_id field predicates"""
  exchangeID: ID
  exchangeIDNEQ: ID
  exchangeIDIn: [ID!]
  exchangeIDNotIn: [ID!]
  exchangeIDGT: ID
  exchangeIDGTE: ID
  exchangeIDLT: ID
  exchangeIDLTE: ID
  exchangeIDContains: ID
  exchangeIDHasPrefix: ID
  exchangeIDHasSuffix: ID
  exchangeIDEqualFold: ID
  exchangeIDContainsFold: ID
  """portfolio_id field predicates"""
  portfolioID: ID
  portfolioIDNEQ: ID
  portfolioIDIn: [ID!]
  portfolioIDNotIn: [ID!]
  portfolioIDGT: ID
  portfolioIDGTE: ID
  portfolioIDLT: ID
  portfolioIDLTE: ID
  portfolioIDContains: ID
  portfolioIDHasPrefix: ID
  portfolioIDHasSuffix: ID
  portfolioIDEqualFold: ID
  portfolioIDContainsFold: ID
  """base_asset_id field predicates"""
  baseAssetID: ID
  baseAssetIDNEQ: ID
  baseAssetIDIn: [ID!]
  baseAssetIDNotIn: [ID!]
  baseAssetIDGT: ID
  baseAssetIDGTE: ID
  baseAssetIDLT: ID
  baseAssetIDLTE: ID
  baseAssetIDContains: ID
  baseAssetIDHasPrefix: ID
  baseAssetIDHasSuffix: ID
  baseAssetIDEqualFold: ID
  baseAssetIDContainsFold: ID
  """quote_asset_id field predicates"""
  quoteAssetID: ID
  quoteAssetIDNEQ: ID
  quoteAssetIDIn: [ID!]
  quoteAssetIDNotIn: [ID!]
  quoteAssetIDGT: ID
  quoteAssetIDGTE: ID
  quoteAssetIDLT: ID
  quoteAssetIDLTE: ID
  quoteAssetIDContains: ID
  quoteAssetIDHasPrefix: ID
  quoteAssetIDHasSuffix: ID
  quoteAssetIDIsNil: Boolean
  quoteAssetIDNotNil: Boolean
  quoteAssetIDEqualFold: ID
  quoteAssetIDContainsFold: ID
  """transaction_type edge predicates"""
  hasTransactionType: Boolean
  hasTransactionTypeWith: [TransactionTypeWhereInput!]
  """base_asset edge predicates"""
  hasBaseAsset: Boolean
  hasBaseAssetWith: [AssetWhereInput!]
  """quote_asset edge predicates"""
  hasQuoteAsset: Boolean
  hasQuoteAssetWith: [AssetWhereInput!]
  """portfolio edge predicates"""
  hasPortfolio: Boolean
  hasPortfolioWith: [PortfolioWhereInput!]
  """exchange edge predicates"""
  hasExchange: Boolean
  hasExchangeWith: [ExchangeWhereInput!]
  """blockchain edge predicates"""
  hasBlockchain: Boolean
  hasBlockchainWith: [BlockchainWhereInput!]
}
"""
UpdateAccountInput is used for update Account object.
Input was generated by ent.
"""
input UpdateAccountInput {
  updatedAt: Time
  clearDeletedAt: Boolean
  deletedAt: Time
  nickname: String
  email: String
  clearPassword: Boolean
  """Hashed and salted password using Bcrypt."""
  password: String
  passwordUpdatedAt: Time
  addAuthRoleIDs: [ID!]
  removeAuthRoleIDs: [ID!]
  addPortfolioIDs: [ID!]
  removePortfolioIDs: [ID!]
  clearAuthType: Boolean
  authTypeID: ID
  addConnectionIDs: [ID!]
  removeConnectionIDs: [ID!]
}
"""
UpdateAssetClassInput is used for update AssetClass object.
Input was generated by ent.
"""
input UpdateAssetClassInput {
  updatedAt: Time
  clearDeletedAt: Boolean
  deletedAt: Time
  value: AssetClassValue
  clearDescription: Boolean
  description: String
  addAssetIDs: [ID!]
  removeAssetIDs: [ID!]
}
"""
UpdateAssetInput is used for update Asset object.
Input was generated by ent.
"""
input UpdateAssetInput {
  updatedAt: Time
  clearDeletedAt: Boolean
  deletedAt: Time
  clearAssetClass: Boolean
  assetClassID: ID
  clearCryptocurrency: Boolean
  cryptocurrencyID: ID
  addTransactionBasisIDs: [ID!]
  removeTransactionBasisIDs: [ID!]
  addTransactionQuoteIDs: [ID!]
  removeTransactionQuoteIDs: [ID!]
  addDailyAssetPriceIDs: [ID!]
  removeDailyAssetPriceIDs: [ID!]
}
"""
UpdateAuthRoleInput is used for update AuthRole object.
Input was generated by ent.
"""
input UpdateAuthRoleInput {
  updatedAt: Time
  clearDeletedAt: Boolean
  deletedAt: Time
  value: AuthRoleValue
  clearDescription: Boolean
  description: String
  addAccountIDs: [ID!]
  removeAccountIDs: [ID!]
  addStaffAccountIDs: [ID!]
  removeStaffAccountIDs: [ID!]
}
"""
UpdateAuthTypeInput is used for update AuthType object.
Input was generated by ent.
"""
input UpdateAuthTypeInput {
  updatedAt: Time
  clearDeletedAt: Boolean
  deletedAt: Time
  value: AuthTypeValue
  clearDescription: Boolean
  description: String
  addAccountIDs: [ID!]
  removeAccountIDs: [ID!]
  addStaffAccountIDs: [ID!]
  removeStaffAccountIDs: [ID!]
}
"""
UpdateBlockchainInput is used for update Blockchain object.
Input was generated by ent.
"""
input UpdateBlockchainInput {
  updatedAt: Time
  clearDeletedAt: Boolean
  deletedAt: Time
  name: String
  symbol: String
  clearIcon: Boolean
  icon: String
  clearChainID: Boolean
  chainID: Int
  addCryptocurrencyIDs: [ID!]
  removeCryptocurrencyIDs: [ID!]
  addTransactionIDs: [ID!]
  removeTransactionIDs: [ID!]
}
"""
UpdateConnectionInput is used for update Connection object.
Input was generated by ent.
"""
input UpdateConnectionInput {
  updatedAt: Time
  clearDeletedAt: Boolean
  deletedAt: Time
  name: String
  accessToken: String
  clearAccount: Boolean
  accountID: ID
  addPortfolioIDs: [ID!]
  removePortfolioIDs: [ID!]
}
"""
UpdateCryptocurrencyInput is used for update Cryptocurrency object.
Input was generated by ent.
"""
input UpdateCryptocurrencyInput {
  updatedAt: Time
  clearDeletedAt: Boolean
  deletedAt: Time
  symbol: String
  clearIcon: Boolean
  """A url to the image icon for this cryptocurrency."""
  icon: String
  name: String
  clearAsset: Boolean
  assetID: ID
  addBlockchainIDs: [ID!]
  removeBlockchainIDs: [ID!]
}
"""
UpdateDailyAssetPriceInput is used for update DailyAssetPrice object.
Input was generated by ent.
"""
input UpdateDailyAssetPriceInput {
  updatedAt: Time
  clearDeletedAt: Boolean
  deletedAt: Time
  time: Time
  clearOpen: Boolean
  open: Float
  clearHigh: Boolean
  high: Float
  clearLow: Boolean
  low: Float
  clearClose: Boolean
  close: Float
  adjustedClose: Float
  clearAsset: Boolean
  assetID: ID
}
"""
UpdateExchangeInput is used for update Exchange object.
Input was generated by ent.
"""
input UpdateExchangeInput {
  updatedAt: Time
  clearDeletedAt: Boolean
  deletedAt: Time
  name: String
  clearIcon: Boolean
  icon: String
  clearURL: Boolean
  """A url to the exchange site."""
  url: String
  addTransactionIDs: [ID!]
  removeTransactionIDs: [ID!]
}
"""
UpdatePortfolioInput is used for update Portfolio object.
Input was generated by ent.
"""
input UpdatePortfolioInput {
  updatedAt: Time
  clearDeletedAt: Boolean
  deletedAt: Time
  name: String
  """Whether this portfolio is visible to others."""
  isPublic: Boolean
  """Whether this portfolio is visible to the owner."""
  isVisible: Boolean
  clearAccount: Boolean
  accountID: ID
  addTransactionIDs: [ID!]
  removeTransactionIDs: [ID!]
  addConnectionIDs: [ID!]
  removeConnectionIDs: [ID!]
}
"""
UpdateSourceInput is used for update Source object.
Input was generated by ent.
"""
input UpdateSourceInput {
  updatedAt: Time
  clearDeletedAt: Boolean
  deletedAt: Time
  name: String
  clearIcon: Boolean
  icon: String
  clearSourceType: Boolean
  sourceTypeID: ID
}
"""
UpdateSourceTypeInput is used for update SourceType object.
Input was generated by ent.
"""
input UpdateSourceTypeInput {
  updatedAt: Time
  clearDeletedAt: Boolean
  deletedAt: Time
  value: SourceTypeValue
  clearDescription: Boolean
  description: String
  addSourceIDs: [ID!]
  removeSourceIDs: [ID!]
}
"""
UpdateStaffAccountInput is used for update StaffAccount object.
Input was generated by ent.
"""
input UpdateStaffAccountInput {
  updatedAt: Time
  clearDeletedAt: Boolean
  deletedAt: Time
  nickname: String
  email: String
  clearPassword: Boolean
  """Hashed and salted password using Bcrypt."""
  password: String
  passwordUpdatedAt: Time
  addAuthRoleIDs: [ID!]
  removeAuthRoleIDs: [ID!]
  clearAuthType: Boolean
  authTypeID: ID
}
"""
UpdateTransactionInput is used for update Transaction object.
Input was generated by ent.
"""
input UpdateTransactionInput {
  updatedAt: Time
  clearDeletedAt: Boolean
  deletedAt: Time
  time: Time
  units: Int
  pricePerUnit: Float
  clearTransactionType: Boolean
  transactionTypeID: ID
  clearBaseAsset: Boolean
  baseAssetID: ID
  clearQuoteAsset: Boolean
  quoteAssetID: ID
  clearPortfolio: Boolean
  portfolioID: ID
  clearExchange: Boolean
  exchangeID: ID
  clearBlockchain: Boolean
  blockchainID: ID
}
"""
UpdateTransactionTypeInput is used for update TransactionType object.
Input was generated by ent.
"""
input UpdateTransactionTypeInput {
  updatedAt: Time
  clearDeletedAt: Boolean
  deletedAt: Time
  value: TransactionTypeValue
  clearDescription: Boolean
  description: String
  addTransactionIDs: [ID!]
  removeTransactionIDs: [ID!]
}
