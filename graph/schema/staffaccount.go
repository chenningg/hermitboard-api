// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/chenningg/hermitboard-api/ent/authtype"
	"github.com/chenningg/hermitboard-api/ent/staffaccount"
	"github.com/chenningg/hermitboard-api/pulid"
)

// StaffAccount is the model entity for the StaffAccount schema.
type StaffAccount struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.PULID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Nickname holds the value of the "nickname" field.
	Nickname string `json:"nickname,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Hashed and salted password using Bcrypt.
	Password *string `json:"-"`
	// PasswordUpdatedAt holds the value of the "password_updated_at" field.
	PasswordUpdatedAt time.Time `json:"password_updated_at,omitempty"`
	// AuthTypeID holds the value of the "auth_type_id" field.
	AuthTypeID pulid.PULID `json:"auth_type_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StaffAccountQuery when eager-loading is set.
	Edges StaffAccountEdges `json:"edges"`
}

// StaffAccountEdges holds the relations/edges for other nodes in the graph.
type StaffAccountEdges struct {
	// AuthRoles holds the value of the auth_roles edge.
	AuthRoles []*AuthRole `json:"auth_roles,omitempty"`
	// AuthType holds the value of the auth_type edge.
	AuthType *AuthType `json:"auth_type,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedAuthRoles map[string][]*AuthRole
}

// AuthRolesOrErr returns the AuthRoles value or an error if the edge
// was not loaded in eager-loading.
func (e StaffAccountEdges) AuthRolesOrErr() ([]*AuthRole, error) {
	if e.loadedTypes[0] {
		return e.AuthRoles, nil
	}
	return nil, &NotLoadedError{edge: "auth_roles"}
}

// AuthTypeOrErr returns the AuthType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StaffAccountEdges) AuthTypeOrErr() (*AuthType, error) {
	if e.loadedTypes[1] {
		if e.AuthType == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: authtype.Label}
		}
		return e.AuthType, nil
	}
	return nil, &NotLoadedError{edge: "auth_type"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StaffAccount) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case staffaccount.FieldID, staffaccount.FieldAuthTypeID:
			values[i] = new(pulid.PULID)
		case staffaccount.FieldNickname, staffaccount.FieldEmail, staffaccount.FieldPassword:
			values[i] = new(sql.NullString)
		case staffaccount.FieldCreatedAt, staffaccount.FieldUpdatedAt, staffaccount.FieldDeletedAt, staffaccount.FieldPasswordUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type StaffAccount", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StaffAccount fields.
func (sa *StaffAccount) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case staffaccount.FieldID:
			if value, ok := values[i].(*pulid.PULID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sa.ID = *value
			}
		case staffaccount.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sa.CreatedAt = value.Time
			}
		case staffaccount.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sa.UpdatedAt = value.Time
			}
		case staffaccount.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				sa.DeletedAt = new(time.Time)
				*sa.DeletedAt = value.Time
			}
		case staffaccount.FieldNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickname", values[i])
			} else if value.Valid {
				sa.Nickname = value.String
			}
		case staffaccount.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				sa.Email = value.String
			}
		case staffaccount.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				sa.Password = new(string)
				*sa.Password = value.String
			}
		case staffaccount.FieldPasswordUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field password_updated_at", values[i])
			} else if value.Valid {
				sa.PasswordUpdatedAt = value.Time
			}
		case staffaccount.FieldAuthTypeID:
			if value, ok := values[i].(*pulid.PULID); !ok {
				return fmt.Errorf("unexpected type %T for field auth_type_id", values[i])
			} else if value != nil {
				sa.AuthTypeID = *value
			}
		}
	}
	return nil
}

// QueryAuthRoles queries the "auth_roles" edge of the StaffAccount entity.
func (sa *StaffAccount) QueryAuthRoles() *AuthRoleQuery {
	return (&StaffAccountClient{config: sa.config}).QueryAuthRoles(sa)
}

// QueryAuthType queries the "auth_type" edge of the StaffAccount entity.
func (sa *StaffAccount) QueryAuthType() *AuthTypeQuery {
	return (&StaffAccountClient{config: sa.config}).QueryAuthType(sa)
}

// Update returns a builder for updating this StaffAccount.
// Note that you need to call StaffAccount.Unwrap() before calling this method if this StaffAccount
// was returned from a transaction, and the transaction was committed or rolled back.
func (sa *StaffAccount) Update() *StaffAccountUpdateOne {
	return (&StaffAccountClient{config: sa.config}).UpdateOne(sa)
}

// Unwrap unwraps the StaffAccount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sa *StaffAccount) Unwrap() *StaffAccount {
	_tx, ok := sa.config.driver.(*txDriver)
	if !ok {
		panic("ent: StaffAccount is not a transactional entity")
	}
	sa.config.driver = _tx.drv
	return sa
}

// String implements the fmt.Stringer.
func (sa *StaffAccount) String() string {
	var builder strings.Builder
	builder.WriteString("StaffAccount(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sa.ID))
	builder.WriteString("created_at=")
	builder.WriteString(sa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := sa.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("nickname=")
	builder.WriteString(sa.Nickname)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(sa.Email)
	builder.WriteString(", ")
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("password_updated_at=")
	builder.WriteString(sa.PasswordUpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("auth_type_id=")
	builder.WriteString(fmt.Sprintf("%v", sa.AuthTypeID))
	builder.WriteByte(')')
	return builder.String()
}

// NamedAuthRoles returns the AuthRoles named value or an error if the edge was not
// loaded in eager-loading with this name.
func (sa *StaffAccount) NamedAuthRoles(name string) ([]*AuthRole, error) {
	if sa.Edges.namedAuthRoles == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := sa.Edges.namedAuthRoles[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (sa *StaffAccount) appendNamedAuthRoles(name string, edges ...*AuthRole) {
	if sa.Edges.namedAuthRoles == nil {
		sa.Edges.namedAuthRoles = make(map[string][]*AuthRole)
	}
	if len(edges) == 0 {
		sa.Edges.namedAuthRoles[name] = []*AuthRole{}
	} else {
		sa.Edges.namedAuthRoles[name] = append(sa.Edges.namedAuthRoles[name], edges...)
	}
}

// StaffAccounts is a parsable slice of StaffAccount.
type StaffAccounts []*StaffAccount

func (sa StaffAccounts) config(cfg config) {
	for _i := range sa {
		sa[_i].config = cfg
	}
}
