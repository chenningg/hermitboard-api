// Code generated by "enumer -type=AssetClass"; DO NOT EDIT.

package hbtype

import (
	"fmt"
	"strings"
)

const _AssetClassName = "CashOrCashEquivalentsCommodityCryptocurrencyEquityFixedIncomeFuturesRealEstate"

var _AssetClassIndex = [...]uint8{0, 21, 30, 44, 50, 61, 68, 78}

const _AssetClassLowerName = "cashorcashequivalentscommoditycryptocurrencyequityfixedincomefuturesrealestate"

func (i AssetClass) String() string {
	if i < 0 || i >= AssetClass(len(_AssetClassIndex)-1) {
		return fmt.Sprintf("AssetClass(%d)", i)
	}
	return _AssetClassName[_AssetClassIndex[i]:_AssetClassIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AssetClassNoOp() {
	var x [1]struct{}
	_ = x[CashOrCashEquivalents-(0)]
	_ = x[Commodity-(1)]
	_ = x[Cryptocurrency-(2)]
	_ = x[Equity-(3)]
	_ = x[FixedIncome-(4)]
	_ = x[Futures-(5)]
	_ = x[RealEstate-(6)]
}

var _AssetClassValues = []AssetClass{CashOrCashEquivalents, Commodity, Cryptocurrency, Equity, FixedIncome, Futures, RealEstate}

var _AssetClassNameToValueMap = map[string]AssetClass{
	_AssetClassName[0:21]:       CashOrCashEquivalents,
	_AssetClassLowerName[0:21]:  CashOrCashEquivalents,
	_AssetClassName[21:30]:      Commodity,
	_AssetClassLowerName[21:30]: Commodity,
	_AssetClassName[30:44]:      Cryptocurrency,
	_AssetClassLowerName[30:44]: Cryptocurrency,
	_AssetClassName[44:50]:      Equity,
	_AssetClassLowerName[44:50]: Equity,
	_AssetClassName[50:61]:      FixedIncome,
	_AssetClassLowerName[50:61]: FixedIncome,
	_AssetClassName[61:68]:      Futures,
	_AssetClassLowerName[61:68]: Futures,
	_AssetClassName[68:78]:      RealEstate,
	_AssetClassLowerName[68:78]: RealEstate,
}

var _AssetClassNames = []string{
	_AssetClassName[0:21],
	_AssetClassName[21:30],
	_AssetClassName[30:44],
	_AssetClassName[44:50],
	_AssetClassName[50:61],
	_AssetClassName[61:68],
	_AssetClassName[68:78],
}

// AssetClassString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AssetClassString(s string) (AssetClass, error) {
	if val, ok := _AssetClassNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AssetClassNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AssetClass values", s)
}

// AssetClassValues returns all values of the enum
func AssetClassValues() []AssetClass {
	return _AssetClassValues
}

// AssetClassStrings returns a slice of all String values of the enum
func AssetClassStrings() []string {
	strs := make([]string, len(_AssetClassNames))
	copy(strs, _AssetClassNames)
	return strs
}

// IsAAssetClass returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AssetClass) IsAAssetClass() bool {
	for _, v := range _AssetClassValues {
		if i == v {
			return true
		}
	}
	return false
}
