// Code generated by "enumer -type=AssetClass -json -text -sql"; DO NOT EDIT.

package hbtype

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _AssetClassName = "CashOrCashEquivalentCommodityCryptocurrencyEquityFixedIncomeFutureRealEstate"

var _AssetClassIndex = [...]uint8{0, 20, 29, 43, 49, 60, 66, 76}

const _AssetClassLowerName = "cashorcashequivalentcommoditycryptocurrencyequityfixedincomefuturerealestate"

func (i AssetClass) String() string {
	i -= 1
	if i < 0 || i >= AssetClass(len(_AssetClassIndex)-1) {
		return fmt.Sprintf("AssetClass(%d)", i+1)
	}
	return _AssetClassName[_AssetClassIndex[i]:_AssetClassIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AssetClassNoOp() {
	var x [1]struct{}
	_ = x[CashOrCashEquivalent-(1)]
	_ = x[Commodity-(2)]
	_ = x[Cryptocurrency-(3)]
	_ = x[Equity-(4)]
	_ = x[FixedIncome-(5)]
	_ = x[Future-(6)]
	_ = x[RealEstate-(7)]
}

var _AssetClassValues = []AssetClass{CashOrCashEquivalent, Commodity, Cryptocurrency, Equity, FixedIncome, Future, RealEstate}

var _AssetClassNameToValueMap = map[string]AssetClass{
	_AssetClassName[0:20]:       CashOrCashEquivalent,
	_AssetClassLowerName[0:20]:  CashOrCashEquivalent,
	_AssetClassName[20:29]:      Commodity,
	_AssetClassLowerName[20:29]: Commodity,
	_AssetClassName[29:43]:      Cryptocurrency,
	_AssetClassLowerName[29:43]: Cryptocurrency,
	_AssetClassName[43:49]:      Equity,
	_AssetClassLowerName[43:49]: Equity,
	_AssetClassName[49:60]:      FixedIncome,
	_AssetClassLowerName[49:60]: FixedIncome,
	_AssetClassName[60:66]:      Future,
	_AssetClassLowerName[60:66]: Future,
	_AssetClassName[66:76]:      RealEstate,
	_AssetClassLowerName[66:76]: RealEstate,
}

var _AssetClassNames = []string{
	_AssetClassName[0:20],
	_AssetClassName[20:29],
	_AssetClassName[29:43],
	_AssetClassName[43:49],
	_AssetClassName[49:60],
	_AssetClassName[60:66],
	_AssetClassName[66:76],
}

// AssetClassString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AssetClassString(s string) (AssetClass, error) {
	if val, ok := _AssetClassNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AssetClassNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AssetClass values", s)
}

// AssetClassValues returns all values of the enum
func AssetClassValues() []AssetClass {
	return _AssetClassValues
}

// AssetClassStrings returns a slice of all String values of the enum
func AssetClassStrings() []string {
	strs := make([]string, len(_AssetClassNames))
	copy(strs, _AssetClassNames)
	return strs
}

// IsAAssetClass returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AssetClass) IsAAssetClass() bool {
	for _, v := range _AssetClassValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for AssetClass
func (i AssetClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for AssetClass
func (i *AssetClass) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("AssetClass should be a string, got %s", data)
	}

	var err error
	*i, err = AssetClassString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for AssetClass
func (i AssetClass) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for AssetClass
func (i *AssetClass) UnmarshalText(text []byte) error {
	var err error
	*i, err = AssetClassString(string(text))
	return err
}

func (i AssetClass) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *AssetClass) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of AssetClass: %[1]T(%[1]v)", value)
	}

	val, err := AssetClassString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
