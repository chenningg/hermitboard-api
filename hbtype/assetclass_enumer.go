// Code generated by "enumer -type=AssetClass"; DO NOT EDIT.

package hbtype

import (
	"fmt"
	"strings"
)

const _AssetClassName = "CommodityCryptocurrencyEquityFixedIncomeRealEstate"

var _AssetClassIndex = [...]uint8{0, 9, 23, 29, 40, 50}

const _AssetClassLowerName = "commoditycryptocurrencyequityfixedincomerealestate"

func (i AssetClass) String() string {
	if i < 0 || i >= AssetClass(len(_AssetClassIndex)-1) {
		return fmt.Sprintf("AssetClass(%d)", i)
	}
	return _AssetClassName[_AssetClassIndex[i]:_AssetClassIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AssetClassNoOp() {
	var x [1]struct{}
	_ = x[Commodity-(0)]
	_ = x[Cryptocurrency-(1)]
	_ = x[Equity-(2)]
	_ = x[FixedIncome-(3)]
	_ = x[RealEstate-(4)]
}

var _AssetClassValues = []AssetClass{Commodity, Cryptocurrency, Equity, FixedIncome, RealEstate}

var _AssetClassNameToValueMap = map[string]AssetClass{
	_AssetClassName[0:9]:        Commodity,
	_AssetClassLowerName[0:9]:   Commodity,
	_AssetClassName[9:23]:       Cryptocurrency,
	_AssetClassLowerName[9:23]:  Cryptocurrency,
	_AssetClassName[23:29]:      Equity,
	_AssetClassLowerName[23:29]: Equity,
	_AssetClassName[29:40]:      FixedIncome,
	_AssetClassLowerName[29:40]: FixedIncome,
	_AssetClassName[40:50]:      RealEstate,
	_AssetClassLowerName[40:50]: RealEstate,
}

var _AssetClassNames = []string{
	_AssetClassName[0:9],
	_AssetClassName[9:23],
	_AssetClassName[23:29],
	_AssetClassName[29:40],
	_AssetClassName[40:50],
}

// AssetClassString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AssetClassString(s string) (AssetClass, error) {
	if val, ok := _AssetClassNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AssetClassNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AssetClass values", s)
}

// AssetClassValues returns all values of the enum
func AssetClassValues() []AssetClass {
	return _AssetClassValues
}

// AssetClassStrings returns a slice of all String values of the enum
func AssetClassStrings() []string {
	strs := make([]string, len(_AssetClassNames))
	copy(strs, _AssetClassNames)
	return strs
}

// IsAAssetClass returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AssetClass) IsAAssetClass() bool {
	for _, v := range _AssetClassValues {
		if i == v {
			return true
		}
	}
	return false
}
