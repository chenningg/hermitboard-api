// Code generated by "enumer -type=AuthType"; DO NOT EDIT.

package hbtype

import (
	"fmt"
	"strings"
)

const _AuthTypeName = "LocalFirebase"

var _AuthTypeIndex = [...]uint8{0, 5, 13}

const _AuthTypeLowerName = "localfirebase"

func (i AuthType) String() string {
	if i < 0 || i >= AuthType(len(_AuthTypeIndex)-1) {
		return fmt.Sprintf("AuthType(%d)", i)
	}
	return _AuthTypeName[_AuthTypeIndex[i]:_AuthTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AuthTypeNoOp() {
	var x [1]struct{}
	_ = x[Local-(0)]
	_ = x[Firebase-(1)]
}

var _AuthTypeValues = []AuthType{Local, Firebase}

var _AuthTypeNameToValueMap = map[string]AuthType{
	_AuthTypeName[0:5]:       Local,
	_AuthTypeLowerName[0:5]:  Local,
	_AuthTypeName[5:13]:      Firebase,
	_AuthTypeLowerName[5:13]: Firebase,
}

var _AuthTypeNames = []string{
	_AuthTypeName[0:5],
	_AuthTypeName[5:13],
}

// AuthTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AuthTypeString(s string) (AuthType, error) {
	if val, ok := _AuthTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AuthTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AuthType values", s)
}

// AuthTypeValues returns all values of the enum
func AuthTypeValues() []AuthType {
	return _AuthTypeValues
}

// AuthTypeStrings returns a slice of all String values of the enum
func AuthTypeStrings() []string {
	strs := make([]string, len(_AuthTypeNames))
	copy(strs, _AuthTypeNames)
	return strs
}

// IsAAuthType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AuthType) IsAAuthType() bool {
	for _, v := range _AuthTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
